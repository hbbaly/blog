{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_data/butterfly.yml","hash":"621c78257e7dfac46130bbb39c9916d1b22d85e9","modified":1606891774110},{"_id":"source/_data/link.yml","hash":"11faecce47bdeccb67f24b6f7b5f8349beee5012","modified":1606891774111},{"_id":"source/_posts/crawler.md","hash":"fa9d98404437742c36d53f18e88030ee4bc2816e","modified":1606891774111},{"_id":"source/_posts/es6-1.md","hash":"d80044b93aacc6e77354e84baa37f7cdb971cb1e","modified":1606891774114},{"_id":"source/_posts/css-2.md","hash":"346da02bf10a9237f0e2f903d3d312419078e897","modified":1606891774113},{"_id":"source/_posts/es6-10.md","hash":"f1c455301c80ffd2cb0f574b6059e7e73e91c8f0","modified":1606891774114},{"_id":"source/_posts/css-1.md","hash":"bc8f0390f45086e097efd248bb94f7c078444c8d","modified":1606891774112},{"_id":"source/_posts/css-3.md","hash":"1be636def1d87e499bafff23a9f0c2f5b0fd84e6","modified":1606891774113},{"_id":"source/_posts/es6-11.md","hash":"3e919ce3fb280ca2bfc087bc690f54062b5010dc","modified":1606891774115},{"_id":"source/_posts/es6-12.md","hash":"2ab75f624462d761bbe19141a09033dbc95bb581","modified":1606891774116},{"_id":"source/_posts/es6-2.md","hash":"6c64b9aaac437cc9a2af41248cc4262ff2da17fb","modified":1606891774117},{"_id":"source/_posts/es6-4.md","hash":"9426f955059dc624c39621a70d3c26b2415eebee","modified":1606891774118},{"_id":"source/_posts/es6-13.md","hash":"6cdbe2082d530e609ee65f9cc8432f602892e82b","modified":1606891774117},{"_id":"source/_posts/es6-3.md","hash":"e0c716f3ecad05a6054d77c9ed21cd6b2311bf66","modified":1606891774118},{"_id":"source/_posts/es6-5.md","hash":"f3c5675d5010ce9f2a4534aaf188e6d21ed9d04a","modified":1606891774118},{"_id":"source/_posts/es6-6.md","hash":"71b905cb6774a5679205091f14e57c77acfe690d","modified":1606891774119},{"_id":"source/_posts/es6-7.md","hash":"4bc9ba28939880461f00ec0961a10eadcc02d7b9","modified":1606891774119},{"_id":"source/_posts/es6-8.md","hash":"1bab05237fd8fe4380cd3fe1fc46588dffe4d266","modified":1606891774120},{"_id":"source/_posts/es6-9.md","hash":"79c08c7ef854f56067d397441ea900bcd615581c","modified":1606891774120},{"_id":"source/_posts/git.md","hash":"2b0181f27659567fd547a09f63eff67637d36536","modified":1606891774121},{"_id":"source/_posts/gulp.md","hash":"e1636abd50a9666997ec55b9b199f830c4067732","modified":1606891774122},{"_id":"source/_posts/hello-world.md","hash":"ea4cb57a73e2a1df09d637db454d1c40d55b24b5","modified":1606891774123},{"_id":"source/_posts/html-1.md","hash":"ba1e870e6ae19963c84e6eb741c81f0744caa0f0","modified":1606891774123},{"_id":"source/_posts/jest.md","hash":"502058a0c4fd565c069cd28faa0d4f15cc43c22c","modified":1606891774125},{"_id":"source/_posts/html-2.md","hash":"b4ec3dc109d97694e5a84af3ce087550cf0ae4b2","modified":1606891774124},{"_id":"source/_posts/js-1.md","hash":"d966dcc8320d8ed9a44afbd1be90efd20d72d5ec","modified":1606891774126},{"_id":"source/_posts/js-11.md","hash":"ddd431b9876507f2ba161a465be8b2fe0b349869","modified":1606891774127},{"_id":"source/_posts/js-10.md","hash":"b81772a142e038cd2ccad9befe038927d5451c3e","modified":1606891774126},{"_id":"source/_posts/js-13.md","hash":"65771f6011be46c8fd8218e059722cc5f26444b1","modified":1606891774128},{"_id":"source/_posts/js-12.md","hash":"723674a6b92eec176569c0c238609841c9501bfa","modified":1606891774127},{"_id":"source/_posts/js-14.md","hash":"7d5c95ed80bdc31f5d60a0b7fe12e8faab422e57","modified":1606891774129},{"_id":"source/_posts/js-15.md","hash":"7b5b3481f8ee2e279c458bb58088329726d91fad","modified":1606891774130},{"_id":"source/_posts/js-16.md","hash":"880883b2fc8e9d09d1da658b161032a3327b9d4c","modified":1606891774131},{"_id":"source/_posts/js-17.md","hash":"90c1ce9bfed09a1911f26667655d3c50caad4475","modified":1606891774132},{"_id":"source/_posts/js-18.md","hash":"77b5f8e1338f938bee1689220ed5b703c5370e20","modified":1606891774132},{"_id":"source/_posts/js-19.md","hash":"6527ba644d1634b001a26bbd607dbded3478ca02","modified":1606891774133},{"_id":"source/_posts/js-2.md","hash":"d6cd7d647db02dc220bc7f0e240ab073bd0e1eae","modified":1606891774134},{"_id":"source/_posts/js-20.md","hash":"e2d7d022301c7f1fc9ee93728ff5bce6138cf3d3","modified":1606891774135},{"_id":"source/_posts/js-21.md","hash":"9dc1cf0bbcf24795398484ba29f8bc701572856b","modified":1606891774136},{"_id":"source/_posts/js-22.md","hash":"c6815d7dda6a1f76c1ae5eed76fbd3cecf9426b3","modified":1606891774137},{"_id":"source/_posts/js-23.md","hash":"b400172c25c72c8d905cc61584a94ceac487a983","modified":1606891774137},{"_id":"source/_posts/js-3.md","hash":"f3e429a28f7e997d68c819a2c9bb7d0b6986227a","modified":1606891774139},{"_id":"source/_posts/js-24.md","hash":"e7efa15c4d1083cc6299ff1a7ef9b655a9a4fcf6","modified":1606891774138},{"_id":"source/_posts/js-4.md","hash":"b02829ba993bdc313855e2b813f789766af1de62","modified":1606891774140},{"_id":"source/_posts/js-5.md","hash":"4f15390f7ac9209dbf496f3fcaf70277f8043b7b","modified":1606891774140},{"_id":"source/_posts/js-7.md","hash":"86c11fa76e85a2b2e71bc68d32c1a5630f110f64","modified":1606891774141},{"_id":"source/_posts/js-6.md","hash":"dd3af541fd88c78439353279ebe1f563d04891c3","modified":1606891774141},{"_id":"source/_posts/js-8.md","hash":"15d7b83b4d74d6c1d539ab71836fb15b62ca5fd8","modified":1606891774142},{"_id":"source/_posts/js-9.md","hash":"ccb6c6f1fd63d1e65ec091b89f48674e04f7e778","modified":1606891774142},{"_id":"source/_posts/md.md","hash":"8a25ad2cad5d6a8cf8adf98fb07f37e723254507","modified":1606891774143},{"_id":"source/_posts/moment.md","hash":"df8fd1cb221a462b86ccf2da5a3d6dfc4deba2ab","modified":1606891774143},{"_id":"source/_posts/react-1.md","hash":"1be4a36887c339f90afed8de5d0acfc6298397f8","modified":1606891774144},{"_id":"source/_posts/vue-2.md","hash":"3fea6445d84ef15d7d01268b5c764abb2a8d8a25","modified":1606891774145},{"_id":"source/_posts/vue-1.md","hash":"1219bfb71d1f198e2012fa8e3b1705c2bd39e3ec","modified":1606891774145},{"_id":"source/_posts/vue-3.md","hash":"1b67e60359cdf9c1b6dc36bb301e3d7c7342758c","modified":1606891774146},{"_id":"source/_posts/vue-4.md","hash":"50cba3eafb7a34777f25cb9ba1bb735e9a546ebc","modified":1606891774147},{"_id":"source/_posts/vue-5.md","hash":"36f4c7087faa344caaaa78613bf982f309d79d3e","modified":1606891774147},{"_id":"source/_posts/vue-6.md","hash":"728413512b030d65aa2ecfa8738f828ee34a1690","modified":1606891774148},{"_id":"source/_posts/vue-7.md","hash":"467157ab02eb01ad81d9670a174f3ed351e6e5e6","modified":1606891774149},{"_id":"source/_posts/vue-8.md","hash":"cb888434deda1c94c15daa475481d3d89a5320e1","modified":1606891774149},{"_id":"source/_posts/wb3-1.md","hash":"a82a7004c451db2fb3a1f809f511543b279a92c0","modified":1606891774150},{"_id":"source/_posts/wb3-2.md","hash":"cbfbded36ac045b24753c950610df567d13f98f4","modified":1606891774151},{"_id":"source/_posts/wb3-3.md","hash":"8a8a7bef95f8f5271ddee78bcba2f508b88bcd36","modified":1606891774151},{"_id":"source/_posts/wb3-4.md","hash":"15a8b205da69fcc5c0662d1f2545545605be2633","modified":1606891774152},{"_id":"source/_posts/wb3-5.md","hash":"b7aa9f6dba12f98b8605f90598dcfb81da46ad31","modified":1606891774153},{"_id":"source/_posts/wb3-6.md","hash":"44b99af8f298450585150713ee76fe7ad77f896f","modified":1606891774153},{"_id":"source/_posts/wb3-7.md","hash":"fb1b2910fe55f86a12ae45413f1c8a9c88114613","modified":1606891774153},{"_id":"source/about/index.md","hash":"59309856b5b0bf659405a090ca65c541f8cb377c","modified":1606891774154},{"_id":"source/categories/index.md","hash":"1b37110e4b149685ad9698d3ae696a98d0819308","modified":1606891774155},{"_id":"source/link/index.md","hash":"3caf61ce19adaae347707175009f87b9cc57da07","modified":1606891774156},{"_id":"source/tags/index.md","hash":"ca2f1b45bf6e743fc20c8e2510cb30689a5649a9","modified":1606891774156},{"_id":"source/_posts/img/vue-2.png","hash":"81bd8801e7b048da7ca320c3821a45eb73482f73","modified":1606891774124}],"Category":[{"name":"node","_id":"cki71wajw0004tl9kyeqkcaxg"},{"name":"ES6","_id":"cki71wak4000btl9k7zjsz2ab"},{"name":"css","_id":"cki71wak8000htl9kpcsc0h0v"},{"name":"Git","_id":"cki71waks001otl9kq3tvcp45"},{"name":"gulp","_id":"cki71wakw001xtl9kqc15ew14"},{"name":"Html","_id":"cki71waky0026tl9kfsufu10z"},{"name":"js","_id":"cki71wal0002etl9k8yq481jw"},{"name":"regular","_id":"cki71wald003dtl9kmqrqpuhr"},{"name":"md","_id":"cki71walu004ntl9khf8vzkjl"},{"name":"react","_id":"cki71walx004wtl9khqmqzxot"},{"name":"Vue","_id":"cki71walz0056tl9kpjeara3i"},{"name":"webpack","_id":"cki71wame0062tl9krm485efm"}],"Data":[{"_id":"butterfly","data":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true}},{"_id":"link","data":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}],"Page":[{"title":"about","date":"2016-01-12T07:03:40.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-01-12 15:03:40\n---\n","updated":"2020-12-02T06:49:34.154Z","path":"about/index.html","comments":1,"layout":"page","_id":"cki71wajs0001tl9khzpy7zaq","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":""},{"title":"categories","date":"2016-01-12T07:03:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-01-12 15:03:40\ntype: \"categories\"\n---\n","updated":"2020-12-02T06:49:34.155Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cki71wajv0003tl9kfgv0f3xb","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":""},{"title":"link","date":"2016-01-12T07:03:40.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2016-01-12 15:03:40\ntype: \"link\"\n---\n","updated":"2020-12-02T06:49:34.156Z","path":"link/index.html","comments":1,"layout":"page","_id":"cki71wajz0007tl9kmfzss1xh","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":""},{"title":"tags","date":"2016-01-12T07:03:40.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-01-12 15:03:40\ntype: \"tags\"\n---\n","updated":"2020-12-02T06:49:34.156Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cki71wak10009tl9kzbt3pp60","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":""}],"Post":[{"title":"node爬取电子书","comments":1,"description":"使用node爬取电子书, 减少各种广告带来的不好的体验","keywords":"node, node.js node爬虫, 电子书,爬取内容","date":"2018-09-04T16:00:00.000Z","_content":"\n# node-crawler\n\n## Install\n\n```sh\nnpm install\n```\n\n## Run\n\n爬取书籍章节\n\n```sh\nnpm run crawler\n```\n\n生成详细内容\n\n```sh\nnpm run start\n```\n\n## 创建目录\n\n```sh\nnpm install -g koa-generator\n```\n\n```sh\nkoa2 node-novel\n```\n\n```sh\ncd node-novel && npm install\n```\n\n到这里项目目录大体已经搭建好\n\n## 安装`superagent`及`cheerio`, `superagent-charset`\n\n```sh\nnpm install cheerio superagent superagent-charset - S\n```\n\n使用`superagent`及`cheerio`\n\n```js\n// 引入相关依赖\nconst request = require('superagent')\nconst cheerio = require('cheerio')\n\n//用来解决不是utf8摘取到的内容乱码问题\nconst superagent=require('superagent-charset')(request)\n// 公用组件\nconst helpers = require('./helpers')\n\n// 获取书籍的信息\nconst host = 'https://www.12zw.com/'\nconst type = 8\nconst category = 8169\nconst url = `${host}/${type}/${category}`\n\n//开始爬取\nsuperagent.get(url).charset('gbk').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`抓取失败 - ${err}`)\n  } else {\n    // 创建这本书籍的存放目录\n    helpers.mkdir(`${type}/${category}`)\n\n    // 使用cheerio\n    const $ = cheerio.load(res.text)\n\n    // 存放书籍信息对象\n    let current_book = {}\n    current_book.chapter = []\n\n    // 通过分析dom结构，可以获取到\n    // 获取书籍的基本信息\n    current_book.title = $('#info h1').text()\n    current_book.author = $('#info p').eq(0).text().split('：')[1]\n    current_book.last_update = $('#info p').eq(2).text().split('：')[1]\n    current_book.last_chapter = $('#info p').eq(3).text().split('：')[1]\n    current_book.intro = $('#intro').html()\n    // 书记章节\n    $('#list a').each((index, item) => {\n      let title = $(item).text()\n      let num = $(item).attr('href').replace('.html', '')\n      let href = $(item).attr('href')\n      current_book.chapter.push({\n        title,\n        num,\n        href\n      })\n    })\n    // 创建书籍json数据\n    helpers.write_config(`${type}/${category}`, current_book)\n  }\n});\n```\n\n`helpers.js`\n\n```js\nconst fs = require('fs')\nconst debug = require('debug')('crawler')\n// 创建书记存放目录\nexports.mkdir = function(folder) {\n  const mkdirp = require('mkdirp')\n  mkdirp.sync('views/'+folder, function (err) {\n    if (err) console.error(err)\n    else debug('pow!')\n  })\n}\n//创建书籍json数据\nexports.write_config = function (pagePath, content) {\n  let book = JSON.stringify(content, null, 4)\n  fs.writeFileSync('views/'+pagePath+'/book.json',book, function (err) {\n    if (err) throw err;\n    debug('It\\'s saved!');\n  });\n}\n// 创建书籍某个章节html或者pug\nexports.write_chapter = function(pagePath, chapter, content) {\n  fs.writeFileSync('views/'+pagePath+'/'+chapter.num+'.html', content, function (err) {\n    if (err) throw err;\n    debug('It\\'s saved!');\n  })\n}\n```\n\n命令爬取书籍章节及信息\n```sh\nnpm run crawler\n```\n\n## 展示\n\n`routes/index.js`\n\n\n```js\nconst router = require('koa-router')()\nconst fs = require('fs')\nconst schedule = require('node-schedule')\nconst requestChapter = require('@novel/crawler')\nconst getContent = require('@utils/getContent')\n// const getStat = require('@utils/judePath')\n\nrouter.get('/', async (ctx, next) => {\n  await ctx.render('index', {\n    title: 'Hello Koa 2!',\n    con: '<h2>hbb</h2>'\n  })\n})\n\n// 某个书籍章节列表\nrouter.get('/:type/:category', async (ctx, next) => {\n  const type = ctx.params.type\n  const category = ctx.params.category\n  const novelD = `${type}/${category}`\n  let content = null\n  // 定时任务，每天凌晨获取最新list\n  schedule.scheduleJob('0 0 0 * * ?', async() => {\n    console.log('The answer to life, the universe, and everything!');\n    await requestChapter()\n  });\n  \n  // 获取书记json数据\n  content = await fs.readFileSync('views/'+novelD+'/book.json','utf-8')\n  content = content ? JSON.parse(content) : content\n  // 渲染模版\n  await ctx.render('index', {\n    content: content,\n    category,\n    title: content.title,\n    keywords: content.info,\n    description: content.info\n  })\n})\n\n// 某篇文章\nrouter.get('/:type/:category/:chapter', async (ctx, next) => {\n  const host = 'https://www.12zw.com/'\n  const type = ctx.params.type\n  const category = ctx.params.category\n  const chapter = ctx.params.chapter\n  const novelD = `${type}/${category}`\n  \n  const request = require('superagent')\n  const cheerio = require('cheerio')\n  const superagent=require('superagent-charset')(request)\n  let content = await new Promise((resolve, reject) => {\n    // 爬取详细的章节内容\n    superagent.get(`${host}/${novelD}/${chapter}.html`).charset('gbk').end((err, res) => {\n      if (err) {\n        // 如果访问失败或者出错，会这行这里\n        console.log(`抓取失败 - ${err}`)\n      } else {\n        const $ = cheerio.load(res)\n        let reg = /<div id=\"content\">(.*)<\\/div>/\n        let contentHtml = res.text\n        let content = getContent.getRegContent(contentHtml, reg)\n        let title = getContent.getRegContent(contentHtml, /<title>(.*)<\\/title>/)\n        let keywords = getContent.getRegContent(contentHtml, /<meta name=\"keywords\" content=(.*) \\/>/)\n        let description = getContent.getRegContent(contentHtml, /<meta name=\"description\" content=(.*) \\/>/).replace('笔趣阁', '')\n        \n        let prev = getContent.getRegContent(contentHtml, /<a href=\"(\\d+).html\">上一章<\\/a>/)\n        let next =getContent.getRegContent(contentHtml, /<a href=\"(\\d+).html\">下一章<\\/a>/)\n        resolve({content, title, keywords, description, prev, next})\n      }\n    })\n  })\n  await ctx.render('chapter', {\n    content: content.content,\n    title: content.title,\n    keywords: content.keywords,\n    description: content.description,\n    prev: content.prev,\n    next: content.next,\n    type,\n    category\n  })\n})\n\nmodule.exports = router\n```\n\n`views/index.pug`\n\n```pug\nextends layout\n\nblock content\n  div.novel-header\n    h1= content.title\n    div.novel-info\n      img.novel-img(src=content.img)\n      div.novel-cont\n        p.novel-author= content.author\n        p.last-update 最近更新：#{content.last_update}\n        p.last-chapter 最新章节：#{content.last_chapter}\n        p.novel-intro 本书简介：#{content.info}\n  \n  div.novel-content\n    ul.novel-chapter\n      - for (var i = 0; i < content.chapter.length; i++)\n        li.novel-chapter-list\n          a(href= category +'/'+ content.chapter[i].num)= content.chapter[i].title\n\n```\n\n\n运行\n\n```sh\nnpm run start\n```\n\n输入已经存在的目录就可以看到对应的书籍信息展示页面了，也可以看某一个章节的内容\n\n写这个爬虫，主要是忍受不了网站上的广告，实在是太多了，体验一点也不好","source":"_posts/crawler.md","raw":"---\ntitle: node爬取电子书\ncomments: true\ndescription: 使用node爬取电子书, 减少各种广告带来的不好的体验\ntags: \"node\"\ncategories: \"node\"\nkeywords: node, node.js node爬虫, 电子书,爬取内容\ndate: 2018-09-05 00:00:00\n---\n\n# node-crawler\n\n## Install\n\n```sh\nnpm install\n```\n\n## Run\n\n爬取书籍章节\n\n```sh\nnpm run crawler\n```\n\n生成详细内容\n\n```sh\nnpm run start\n```\n\n## 创建目录\n\n```sh\nnpm install -g koa-generator\n```\n\n```sh\nkoa2 node-novel\n```\n\n```sh\ncd node-novel && npm install\n```\n\n到这里项目目录大体已经搭建好\n\n## 安装`superagent`及`cheerio`, `superagent-charset`\n\n```sh\nnpm install cheerio superagent superagent-charset - S\n```\n\n使用`superagent`及`cheerio`\n\n```js\n// 引入相关依赖\nconst request = require('superagent')\nconst cheerio = require('cheerio')\n\n//用来解决不是utf8摘取到的内容乱码问题\nconst superagent=require('superagent-charset')(request)\n// 公用组件\nconst helpers = require('./helpers')\n\n// 获取书籍的信息\nconst host = 'https://www.12zw.com/'\nconst type = 8\nconst category = 8169\nconst url = `${host}/${type}/${category}`\n\n//开始爬取\nsuperagent.get(url).charset('gbk').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`抓取失败 - ${err}`)\n  } else {\n    // 创建这本书籍的存放目录\n    helpers.mkdir(`${type}/${category}`)\n\n    // 使用cheerio\n    const $ = cheerio.load(res.text)\n\n    // 存放书籍信息对象\n    let current_book = {}\n    current_book.chapter = []\n\n    // 通过分析dom结构，可以获取到\n    // 获取书籍的基本信息\n    current_book.title = $('#info h1').text()\n    current_book.author = $('#info p').eq(0).text().split('：')[1]\n    current_book.last_update = $('#info p').eq(2).text().split('：')[1]\n    current_book.last_chapter = $('#info p').eq(3).text().split('：')[1]\n    current_book.intro = $('#intro').html()\n    // 书记章节\n    $('#list a').each((index, item) => {\n      let title = $(item).text()\n      let num = $(item).attr('href').replace('.html', '')\n      let href = $(item).attr('href')\n      current_book.chapter.push({\n        title,\n        num,\n        href\n      })\n    })\n    // 创建书籍json数据\n    helpers.write_config(`${type}/${category}`, current_book)\n  }\n});\n```\n\n`helpers.js`\n\n```js\nconst fs = require('fs')\nconst debug = require('debug')('crawler')\n// 创建书记存放目录\nexports.mkdir = function(folder) {\n  const mkdirp = require('mkdirp')\n  mkdirp.sync('views/'+folder, function (err) {\n    if (err) console.error(err)\n    else debug('pow!')\n  })\n}\n//创建书籍json数据\nexports.write_config = function (pagePath, content) {\n  let book = JSON.stringify(content, null, 4)\n  fs.writeFileSync('views/'+pagePath+'/book.json',book, function (err) {\n    if (err) throw err;\n    debug('It\\'s saved!');\n  });\n}\n// 创建书籍某个章节html或者pug\nexports.write_chapter = function(pagePath, chapter, content) {\n  fs.writeFileSync('views/'+pagePath+'/'+chapter.num+'.html', content, function (err) {\n    if (err) throw err;\n    debug('It\\'s saved!');\n  })\n}\n```\n\n命令爬取书籍章节及信息\n```sh\nnpm run crawler\n```\n\n## 展示\n\n`routes/index.js`\n\n\n```js\nconst router = require('koa-router')()\nconst fs = require('fs')\nconst schedule = require('node-schedule')\nconst requestChapter = require('@novel/crawler')\nconst getContent = require('@utils/getContent')\n// const getStat = require('@utils/judePath')\n\nrouter.get('/', async (ctx, next) => {\n  await ctx.render('index', {\n    title: 'Hello Koa 2!',\n    con: '<h2>hbb</h2>'\n  })\n})\n\n// 某个书籍章节列表\nrouter.get('/:type/:category', async (ctx, next) => {\n  const type = ctx.params.type\n  const category = ctx.params.category\n  const novelD = `${type}/${category}`\n  let content = null\n  // 定时任务，每天凌晨获取最新list\n  schedule.scheduleJob('0 0 0 * * ?', async() => {\n    console.log('The answer to life, the universe, and everything!');\n    await requestChapter()\n  });\n  \n  // 获取书记json数据\n  content = await fs.readFileSync('views/'+novelD+'/book.json','utf-8')\n  content = content ? JSON.parse(content) : content\n  // 渲染模版\n  await ctx.render('index', {\n    content: content,\n    category,\n    title: content.title,\n    keywords: content.info,\n    description: content.info\n  })\n})\n\n// 某篇文章\nrouter.get('/:type/:category/:chapter', async (ctx, next) => {\n  const host = 'https://www.12zw.com/'\n  const type = ctx.params.type\n  const category = ctx.params.category\n  const chapter = ctx.params.chapter\n  const novelD = `${type}/${category}`\n  \n  const request = require('superagent')\n  const cheerio = require('cheerio')\n  const superagent=require('superagent-charset')(request)\n  let content = await new Promise((resolve, reject) => {\n    // 爬取详细的章节内容\n    superagent.get(`${host}/${novelD}/${chapter}.html`).charset('gbk').end((err, res) => {\n      if (err) {\n        // 如果访问失败或者出错，会这行这里\n        console.log(`抓取失败 - ${err}`)\n      } else {\n        const $ = cheerio.load(res)\n        let reg = /<div id=\"content\">(.*)<\\/div>/\n        let contentHtml = res.text\n        let content = getContent.getRegContent(contentHtml, reg)\n        let title = getContent.getRegContent(contentHtml, /<title>(.*)<\\/title>/)\n        let keywords = getContent.getRegContent(contentHtml, /<meta name=\"keywords\" content=(.*) \\/>/)\n        let description = getContent.getRegContent(contentHtml, /<meta name=\"description\" content=(.*) \\/>/).replace('笔趣阁', '')\n        \n        let prev = getContent.getRegContent(contentHtml, /<a href=\"(\\d+).html\">上一章<\\/a>/)\n        let next =getContent.getRegContent(contentHtml, /<a href=\"(\\d+).html\">下一章<\\/a>/)\n        resolve({content, title, keywords, description, prev, next})\n      }\n    })\n  })\n  await ctx.render('chapter', {\n    content: content.content,\n    title: content.title,\n    keywords: content.keywords,\n    description: content.description,\n    prev: content.prev,\n    next: content.next,\n    type,\n    category\n  })\n})\n\nmodule.exports = router\n```\n\n`views/index.pug`\n\n```pug\nextends layout\n\nblock content\n  div.novel-header\n    h1= content.title\n    div.novel-info\n      img.novel-img(src=content.img)\n      div.novel-cont\n        p.novel-author= content.author\n        p.last-update 最近更新：#{content.last_update}\n        p.last-chapter 最新章节：#{content.last_chapter}\n        p.novel-intro 本书简介：#{content.info}\n  \n  div.novel-content\n    ul.novel-chapter\n      - for (var i = 0; i < content.chapter.length; i++)\n        li.novel-chapter-list\n          a(href= category +'/'+ content.chapter[i].num)= content.chapter[i].title\n\n```\n\n\n运行\n\n```sh\nnpm run start\n```\n\n输入已经存在的目录就可以看到对应的书籍信息展示页面了，也可以看某一个章节的内容\n\n写这个爬虫，主要是忍受不了网站上的广告，实在是太多了，体验一点也不好","slug":"crawler","published":1,"updated":"2020-12-02T06:49:34.111Z","layout":"post","photos":[],"link":"","_id":"cki71wajo0000tl9kh394m3la","content":"<h1 id=\"node-crawler\"><a href=\"#node-crawler\" class=\"headerlink\" title=\"node-crawler\"></a>node-crawler</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><p>爬取书籍章节</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run crawler</span><br></pre></td></tr></table></figure>\n\n<p>生成详细内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g koa-generator</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">koa2 node-novel</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-novel &amp;&amp; npm install</span><br></pre></td></tr></table></figure>\n\n<p>到这里项目目录大体已经搭建好</p>\n<h2 id=\"安装superagent及cheerio-superagent-charset\"><a href=\"#安装superagent及cheerio-superagent-charset\" class=\"headerlink\" title=\"安装superagent及cheerio, superagent-charset\"></a>安装<code>superagent</code>及<code>cheerio</code>, <code>superagent-charset</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cheerio superagent superagent-charset - S</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>superagent</code>及<code>cheerio</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入相关依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用来解决不是utf8摘取到的内容乱码问题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent=<span class=\"built_in\">require</span>(<span class=\"string\">'superagent-charset'</span>)(request)</span><br><span class=\"line\"><span class=\"comment\">// 公用组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取书籍的信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> host = <span class=\"string\">'https://www.12zw.com/'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> type = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> category = <span class=\"number\">8169</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;host&#125;</span>/<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始爬取</span></span><br><span class=\"line\">superagent.get(url).charset(<span class=\"string\">'gbk'</span>).end(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果访问失败或者出错，会这行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`抓取失败 - <span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建这本书籍的存放目录</span></span><br><span class=\"line\">    helpers.mkdir(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用cheerio</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(res.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存放书籍信息对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> current_book = &#123;&#125;</span><br><span class=\"line\">    current_book.chapter = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过分析dom结构，可以获取到</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取书籍的基本信息</span></span><br><span class=\"line\">    current_book.title = $(<span class=\"string\">'#info h1'</span>).text()</span><br><span class=\"line\">    current_book.author = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">0</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.last_update = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">2</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.last_chapter = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">3</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.intro = $(<span class=\"string\">'#intro'</span>).html()</span><br><span class=\"line\">    <span class=\"comment\">// 书记章节</span></span><br><span class=\"line\">    $(<span class=\"string\">'#list a'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> title = $(item).text()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> num = $(item).attr(<span class=\"string\">'href'</span>).replace(<span class=\"string\">'.html'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> href = $(item).attr(<span class=\"string\">'href'</span>)</span><br><span class=\"line\">      current_book.chapter.push(&#123;</span><br><span class=\"line\">        title,</span><br><span class=\"line\">        num,</span><br><span class=\"line\">        href</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 创建书籍json数据</span></span><br><span class=\"line\">    helpers.write_config(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span>, current_book)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>helpers.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'crawler'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建书记存放目录</span></span><br><span class=\"line\">exports.mkdir = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">folder</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">'mkdirp'</span>)</span><br><span class=\"line\">  mkdirp.sync(<span class=\"string\">'views/'</span>+folder, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> debug(<span class=\"string\">'pow!'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建书籍json数据</span></span><br><span class=\"line\">exports.write_config = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pagePath, content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> book = <span class=\"built_in\">JSON</span>.stringify(content, <span class=\"literal\">null</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'views/'</span>+pagePath+<span class=\"string\">'/book.json'</span>,book, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    debug(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建书籍某个章节html或者pug</span></span><br><span class=\"line\">exports.write_chapter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pagePath, chapter, content</span>) </span>&#123;</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'views/'</span>+pagePath+<span class=\"string\">'/'</span>+chapter.num+<span class=\"string\">'.html'</span>, content, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    debug(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命令爬取书籍章节及信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run crawler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h2><p><code>routes/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> schedule = <span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> requestChapter = <span class=\"built_in\">require</span>(<span class=\"string\">'@novel/crawler'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> getContent = <span class=\"built_in\">require</span>(<span class=\"string\">'@utils/getContent'</span>)</span><br><span class=\"line\"><span class=\"comment\">// const getStat = require('@utils/judePath')</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Hello Koa 2!'</span>,</span><br><span class=\"line\">    con: <span class=\"string\">'&lt;h2&gt;hbb&lt;/h2&gt;'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 某个书籍章节列表</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:type/:category'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = ctx.params.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> category = ctx.params.category</span><br><span class=\"line\">  <span class=\"keyword\">const</span> novelD = <span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 定时任务，每天凌晨获取最新list</span></span><br><span class=\"line\">  schedule.scheduleJob(<span class=\"string\">'0 0 0 * * ?'</span>, <span class=\"keyword\">async</span>() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The answer to life, the universe, and everything!'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> requestChapter()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 获取书记json数据</span></span><br><span class=\"line\">  content = <span class=\"keyword\">await</span> fs.readFileSync(<span class=\"string\">'views/'</span>+novelD+<span class=\"string\">'/book.json'</span>,<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">  content = content ? <span class=\"built_in\">JSON</span>.parse(content) : content</span><br><span class=\"line\">  <span class=\"comment\">// 渲染模版</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    content: content,</span><br><span class=\"line\">    category,</span><br><span class=\"line\">    title: content.title,</span><br><span class=\"line\">    keywords: content.info,</span><br><span class=\"line\">    description: content.info</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 某篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:type/:category/:chapter'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> host = <span class=\"string\">'https://www.12zw.com/'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = ctx.params.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> category = ctx.params.category</span><br><span class=\"line\">  <span class=\"keyword\">const</span> chapter = ctx.params.chapter</span><br><span class=\"line\">  <span class=\"keyword\">const</span> novelD = <span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> superagent=<span class=\"built_in\">require</span>(<span class=\"string\">'superagent-charset'</span>)(request)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 爬取详细的章节内容</span></span><br><span class=\"line\">    superagent.get(<span class=\"string\">`<span class=\"subst\">$&#123;host&#125;</span>/<span class=\"subst\">$&#123;novelD&#125;</span>/<span class=\"subst\">$&#123;chapter&#125;</span>.html`</span>).charset(<span class=\"string\">'gbk'</span>).end(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果访问失败或者出错，会这行这里</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`抓取失败 - <span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> $ = cheerio.load(res)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/&lt;div id=\"content\"&gt;(.*)&lt;\\/div&gt;/</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> contentHtml = res.text</span><br><span class=\"line\">        <span class=\"keyword\">let</span> content = getContent.getRegContent(contentHtml, reg)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> title = getContent.getRegContent(contentHtml, /&lt;title&gt;(.*)&lt;\\/title&gt;/)</span><br><span class=\"line\">        let keywords = getContent.getRegContent(contentHtml, /&lt;meta name=\"keywords\" content=(.*) \\/&gt;/)</span><br><span class=\"line\">        let description = getContent.getRegContent(contentHtml, /&lt;meta name=\"description\" content=(.*) \\/&gt;/).replace('笔趣阁', '')</span><br><span class=\"line\">        </span><br><span class=\"line\">        let prev = getContent.getRegContent(contentHtml, /&lt;a href=\"(\\d+).html\"&gt;上一章&lt;\\/a&gt;/)</span><br><span class=\"line\">        let next =getContent.getRegContent(contentHtml, /&lt;a href=\"(\\d+).html\"&gt;下一章&lt;\\/a&gt;/)</span><br><span class=\"line\">        resolve(&#123;content, title, keywords, description, prev, next&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  await ctx.render('chapter', &#123;</span><br><span class=\"line\">    content: content.content,</span><br><span class=\"line\">    title: content.title,</span><br><span class=\"line\">    keywords: content.keywords,</span><br><span class=\"line\">    description: content.description,</span><br><span class=\"line\">    prev: content.prev,</span><br><span class=\"line\">    next: content.next,</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    category</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n\n<p><code>views/index.pug</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends layout</span><br><span class=\"line\"></span><br><span class=\"line\">block content</span><br><span class=\"line\">  div.novel-header</span><br><span class=\"line\">    h1= content.title</span><br><span class=\"line\">    div.novel-info</span><br><span class=\"line\">      img.novel-img(src=content.img)</span><br><span class=\"line\">      div.novel-cont</span><br><span class=\"line\">        p.novel-author= content.author</span><br><span class=\"line\">        p.last-update 最近更新：#&#123;content.last_update&#125;</span><br><span class=\"line\">        p.last-chapter 最新章节：#&#123;content.last_chapter&#125;</span><br><span class=\"line\">        p.novel-intro 本书简介：#&#123;content.info&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  div.novel-content</span><br><span class=\"line\">    ul.novel-chapter</span><br><span class=\"line\">      - for (var i = 0; i &lt; content.chapter.length; i++)</span><br><span class=\"line\">        li.novel-chapter-list</span><br><span class=\"line\">          a(href= category +&apos;/&apos;+ content.chapter[i].num)= content.chapter[i].title</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n\n<p>输入已经存在的目录就可以看到对应的书籍信息展示页面了，也可以看某一个章节的内容</p>\n<p>写这个爬虫，主要是忍受不了网站上的广告，实在是太多了，体验一点也不好</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"node-crawler\"><a href=\"#node-crawler\" class=\"headerlink\" title=\"node-crawler\"></a>node-crawler</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><p>爬取书籍章节</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run crawler</span><br></pre></td></tr></table></figure>\n\n<p>生成详细内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g koa-generator</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">koa2 node-novel</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-novel &amp;&amp; npm install</span><br></pre></td></tr></table></figure>\n\n<p>到这里项目目录大体已经搭建好</p>\n<h2 id=\"安装superagent及cheerio-superagent-charset\"><a href=\"#安装superagent及cheerio-superagent-charset\" class=\"headerlink\" title=\"安装superagent及cheerio, superagent-charset\"></a>安装<code>superagent</code>及<code>cheerio</code>, <code>superagent-charset</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cheerio superagent superagent-charset - S</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>superagent</code>及<code>cheerio</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入相关依赖</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用来解决不是utf8摘取到的内容乱码问题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> superagent=<span class=\"built_in\">require</span>(<span class=\"string\">'superagent-charset'</span>)(request)</span><br><span class=\"line\"><span class=\"comment\">// 公用组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取书籍的信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> host = <span class=\"string\">'https://www.12zw.com/'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> type = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> category = <span class=\"number\">8169</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;host&#125;</span>/<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始爬取</span></span><br><span class=\"line\">superagent.get(url).charset(<span class=\"string\">'gbk'</span>).end(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果访问失败或者出错，会这行这里</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`抓取失败 - <span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建这本书籍的存放目录</span></span><br><span class=\"line\">    helpers.mkdir(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用cheerio</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $ = cheerio.load(res.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存放书籍信息对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> current_book = &#123;&#125;</span><br><span class=\"line\">    current_book.chapter = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过分析dom结构，可以获取到</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取书籍的基本信息</span></span><br><span class=\"line\">    current_book.title = $(<span class=\"string\">'#info h1'</span>).text()</span><br><span class=\"line\">    current_book.author = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">0</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.last_update = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">2</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.last_chapter = $(<span class=\"string\">'#info p'</span>).eq(<span class=\"number\">3</span>).text().split(<span class=\"string\">'：'</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    current_book.intro = $(<span class=\"string\">'#intro'</span>).html()</span><br><span class=\"line\">    <span class=\"comment\">// 书记章节</span></span><br><span class=\"line\">    $(<span class=\"string\">'#list a'</span>).each(<span class=\"function\">(<span class=\"params\">index, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> title = $(item).text()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> num = $(item).attr(<span class=\"string\">'href'</span>).replace(<span class=\"string\">'.html'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> href = $(item).attr(<span class=\"string\">'href'</span>)</span><br><span class=\"line\">      current_book.chapter.push(&#123;</span><br><span class=\"line\">        title,</span><br><span class=\"line\">        num,</span><br><span class=\"line\">        href</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 创建书籍json数据</span></span><br><span class=\"line\">    helpers.write_config(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span>, current_book)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>helpers.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'crawler'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建书记存放目录</span></span><br><span class=\"line\">exports.mkdir = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">folder</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">'mkdirp'</span>)</span><br><span class=\"line\">  mkdirp.sync(<span class=\"string\">'views/'</span>+folder, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> debug(<span class=\"string\">'pow!'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建书籍json数据</span></span><br><span class=\"line\">exports.write_config = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pagePath, content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> book = <span class=\"built_in\">JSON</span>.stringify(content, <span class=\"literal\">null</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'views/'</span>+pagePath+<span class=\"string\">'/book.json'</span>,book, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    debug(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建书籍某个章节html或者pug</span></span><br><span class=\"line\">exports.write_chapter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pagePath, chapter, content</span>) </span>&#123;</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'views/'</span>+pagePath+<span class=\"string\">'/'</span>+chapter.num+<span class=\"string\">'.html'</span>, content, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    debug(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命令爬取书籍章节及信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run crawler</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h2><p><code>routes/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> schedule = <span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> requestChapter = <span class=\"built_in\">require</span>(<span class=\"string\">'@novel/crawler'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> getContent = <span class=\"built_in\">require</span>(<span class=\"string\">'@utils/getContent'</span>)</span><br><span class=\"line\"><span class=\"comment\">// const getStat = require('@utils/judePath')</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Hello Koa 2!'</span>,</span><br><span class=\"line\">    con: <span class=\"string\">'&lt;h2&gt;hbb&lt;/h2&gt;'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 某个书籍章节列表</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:type/:category'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = ctx.params.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> category = ctx.params.category</span><br><span class=\"line\">  <span class=\"keyword\">const</span> novelD = <span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 定时任务，每天凌晨获取最新list</span></span><br><span class=\"line\">  schedule.scheduleJob(<span class=\"string\">'0 0 0 * * ?'</span>, <span class=\"keyword\">async</span>() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The answer to life, the universe, and everything!'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> requestChapter()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 获取书记json数据</span></span><br><span class=\"line\">  content = <span class=\"keyword\">await</span> fs.readFileSync(<span class=\"string\">'views/'</span>+novelD+<span class=\"string\">'/book.json'</span>,<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">  content = content ? <span class=\"built_in\">JSON</span>.parse(content) : content</span><br><span class=\"line\">  <span class=\"comment\">// 渲染模版</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    content: content,</span><br><span class=\"line\">    category,</span><br><span class=\"line\">    title: content.title,</span><br><span class=\"line\">    keywords: content.info,</span><br><span class=\"line\">    description: content.info</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 某篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:type/:category/:chapter'</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> host = <span class=\"string\">'https://www.12zw.com/'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = ctx.params.type</span><br><span class=\"line\">  <span class=\"keyword\">const</span> category = ctx.params.category</span><br><span class=\"line\">  <span class=\"keyword\">const</span> chapter = ctx.params.chapter</span><br><span class=\"line\">  <span class=\"keyword\">const</span> novelD = <span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>/<span class=\"subst\">$&#123;category&#125;</span>`</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> superagent=<span class=\"built_in\">require</span>(<span class=\"string\">'superagent-charset'</span>)(request)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> content = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 爬取详细的章节内容</span></span><br><span class=\"line\">    superagent.get(<span class=\"string\">`<span class=\"subst\">$&#123;host&#125;</span>/<span class=\"subst\">$&#123;novelD&#125;</span>/<span class=\"subst\">$&#123;chapter&#125;</span>.html`</span>).charset(<span class=\"string\">'gbk'</span>).end(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果访问失败或者出错，会这行这里</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`抓取失败 - <span class=\"subst\">$&#123;err&#125;</span>`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> $ = cheerio.load(res)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/&lt;div id=\"content\"&gt;(.*)&lt;\\/div&gt;/</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> contentHtml = res.text</span><br><span class=\"line\">        <span class=\"keyword\">let</span> content = getContent.getRegContent(contentHtml, reg)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> title = getContent.getRegContent(contentHtml, /&lt;title&gt;(.*)&lt;\\/title&gt;/)</span><br><span class=\"line\">        let keywords = getContent.getRegContent(contentHtml, /&lt;meta name=\"keywords\" content=(.*) \\/&gt;/)</span><br><span class=\"line\">        let description = getContent.getRegContent(contentHtml, /&lt;meta name=\"description\" content=(.*) \\/&gt;/).replace('笔趣阁', '')</span><br><span class=\"line\">        </span><br><span class=\"line\">        let prev = getContent.getRegContent(contentHtml, /&lt;a href=\"(\\d+).html\"&gt;上一章&lt;\\/a&gt;/)</span><br><span class=\"line\">        let next =getContent.getRegContent(contentHtml, /&lt;a href=\"(\\d+).html\"&gt;下一章&lt;\\/a&gt;/)</span><br><span class=\"line\">        resolve(&#123;content, title, keywords, description, prev, next&#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  await ctx.render('chapter', &#123;</span><br><span class=\"line\">    content: content.content,</span><br><span class=\"line\">    title: content.title,</span><br><span class=\"line\">    keywords: content.keywords,</span><br><span class=\"line\">    description: content.description,</span><br><span class=\"line\">    prev: content.prev,</span><br><span class=\"line\">    next: content.next,</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    category</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n\n<p><code>views/index.pug</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends layout</span><br><span class=\"line\"></span><br><span class=\"line\">block content</span><br><span class=\"line\">  div.novel-header</span><br><span class=\"line\">    h1= content.title</span><br><span class=\"line\">    div.novel-info</span><br><span class=\"line\">      img.novel-img(src=content.img)</span><br><span class=\"line\">      div.novel-cont</span><br><span class=\"line\">        p.novel-author= content.author</span><br><span class=\"line\">        p.last-update 最近更新：#&#123;content.last_update&#125;</span><br><span class=\"line\">        p.last-chapter 最新章节：#&#123;content.last_chapter&#125;</span><br><span class=\"line\">        p.novel-intro 本书简介：#&#123;content.info&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  div.novel-content</span><br><span class=\"line\">    ul.novel-chapter</span><br><span class=\"line\">      - for (var i = 0; i &lt; content.chapter.length; i++)</span><br><span class=\"line\">        li.novel-chapter-list</span><br><span class=\"line\">          a(href= category +&apos;/&apos;+ content.chapter[i].num)= content.chapter[i].title</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n\n<p>输入已经存在的目录就可以看到对应的书籍信息展示页面了，也可以看某一个章节的内容</p>\n<p>写这个爬虫，主要是忍受不了网站上的广告，实在是太多了，体验一点也不好</p>\n"},{"title":"var, let, const命令","comments":1,"description":"var, let , const用法以及区别","date":"2017-04-01T10:12:20.000Z","keywords":"var, let, const, es6","_content":"\n## let\n\nlet命令与var命令类似，但是差别也是很大。\n\n### let命令只在let命令所在的代码块内有效。\n\n比如在for循环中\n\n```js\nfor(var i=0;i<5;i++){\n  console.log(i)  //0,1,2,3,4\n}\nconsole.log(i)  //5\nfor(let j = 0;j<5;j++){\n  console.log(j)   //0,1,2,3,4\n}\nconsole.log(j)  //Uncaught ReferenceError: j is not defined\n```\n\n计数器j只在for循环体内有效，在循环体外引用就会报错\n\n### var 存在变量提升，let不存在\n\n```js\nconsole.log(a)  // undefined\nvar a = 1\nconsole.log(b)  //b is not defined\nlet b = 0\n```\n\n### let不允许在同一个作用于内，声明同一个变量\n\n```js\n{\n    let a = 1\n    var a = 0  //Identifier 'a' has already been declared\n}\n{\n    let a = 1\n    let a = 0  //Identifier 'a' has already been declared\n}\n```\n\n### 在代码块内，使用let命令声明变量之前，该变量都是不可用的\n\n```js\nvar a = 0\nfunction func(){\n    console.log(a)   //Uncaught ReferenceError: a is not defined\n    let a = 1;\n    console.log(a)   //1\n}\nfunc()\n```\n\n我们可以看到在使用let的时候，func函数形成了块级作用域，使用let命令声明变量之前，该变量都是不可用的。\n\n## const命令\n\n### const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n```js\nconst a = 1;\na = 1;   //Assignment to constant variable.\n```\n\n### 如果const只声明不赋值，就会报错。\n\n```js\nconst a ;  //Uncaught SyntaxError: Missing initializer in const declaration\n```\n\n### const的作用域与let命令相同\n\n只在声明所在的块级作用域内有效，与let一样不可重复声明，在代码块内，使用const命令声明变量之前，该变量都是不可用的。\n\n### const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\n\n```js\nconst arr = []\narr.push('a'),\nconsole.log(arr,arr.length) // ['a'],1\n\n arr = ['a']   //Uncaught TypeError: Assignment to constant variable\n//\nconst json = {\n    name:'hbb'\n}\njson.age = 20\nconsole.log(json)\njson = {\n    name:'hbb',\n    age:20\n}   //Uncaught TypeError: Assignment to constant variable\n```\n","source":"_posts/es6-1.md","raw":"---\ntitle: var, let, const命令\ncomments: true\ndescription: var, let , const用法以及区别\ntags: \"ES6\"\ndate: 2017-04-1 18:12:20\ncategories: \"ES6\"\nkeywords: var, let, const, es6\n---\n\n## let\n\nlet命令与var命令类似，但是差别也是很大。\n\n### let命令只在let命令所在的代码块内有效。\n\n比如在for循环中\n\n```js\nfor(var i=0;i<5;i++){\n  console.log(i)  //0,1,2,3,4\n}\nconsole.log(i)  //5\nfor(let j = 0;j<5;j++){\n  console.log(j)   //0,1,2,3,4\n}\nconsole.log(j)  //Uncaught ReferenceError: j is not defined\n```\n\n计数器j只在for循环体内有效，在循环体外引用就会报错\n\n### var 存在变量提升，let不存在\n\n```js\nconsole.log(a)  // undefined\nvar a = 1\nconsole.log(b)  //b is not defined\nlet b = 0\n```\n\n### let不允许在同一个作用于内，声明同一个变量\n\n```js\n{\n    let a = 1\n    var a = 0  //Identifier 'a' has already been declared\n}\n{\n    let a = 1\n    let a = 0  //Identifier 'a' has already been declared\n}\n```\n\n### 在代码块内，使用let命令声明变量之前，该变量都是不可用的\n\n```js\nvar a = 0\nfunction func(){\n    console.log(a)   //Uncaught ReferenceError: a is not defined\n    let a = 1;\n    console.log(a)   //1\n}\nfunc()\n```\n\n我们可以看到在使用let的时候，func函数形成了块级作用域，使用let命令声明变量之前，该变量都是不可用的。\n\n## const命令\n\n### const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n```js\nconst a = 1;\na = 1;   //Assignment to constant variable.\n```\n\n### 如果const只声明不赋值，就会报错。\n\n```js\nconst a ;  //Uncaught SyntaxError: Missing initializer in const declaration\n```\n\n### const的作用域与let命令相同\n\n只在声明所在的块级作用域内有效，与let一样不可重复声明，在代码块内，使用const命令声明变量之前，该变量都是不可用的。\n\n### const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\n\n```js\nconst arr = []\narr.push('a'),\nconsole.log(arr,arr.length) // ['a'],1\n\n arr = ['a']   //Uncaught TypeError: Assignment to constant variable\n//\nconst json = {\n    name:'hbb'\n}\njson.age = 20\nconsole.log(json)\njson = {\n    name:'hbb',\n    age:20\n}   //Uncaught TypeError: Assignment to constant variable\n```\n","slug":"es6-1","published":1,"updated":"2020-12-02T06:49:34.114Z","layout":"post","photos":[],"link":"","_id":"cki71waju0002tl9kdxpcrq7p","content":"<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>let命令与var命令类似，但是差别也是很大。</p>\n<h3 id=\"let命令只在let命令所在的代码块内有效。\"><a href=\"#let命令只在let命令所在的代码块内有效。\" class=\"headerlink\" title=\"let命令只在let命令所在的代码块内有效。\"></a>let命令只在let命令所在的代码块内有效。</h3><p>比如在for循环中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j)   <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j)  <span class=\"comment\">//Uncaught ReferenceError: j is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>计数器j只在for循环体内有效，在循环体外引用就会报错</p>\n<h3 id=\"var-存在变量提升，let不存在\"><a href=\"#var-存在变量提升，let不存在\" class=\"headerlink\" title=\"var 存在变量提升，let不存在\"></a>var 存在变量提升，let不存在</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)  <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"let不允许在同一个作用于内，声明同一个变量\"><a href=\"#let不允许在同一个作用于内，声明同一个变量\" class=\"headerlink\" title=\"let不允许在同一个作用于内，声明同一个变量\"></a>let不允许在同一个作用于内，声明同一个变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在代码块内，使用let命令声明变量之前，该变量都是不可用的\"><a href=\"#在代码块内，使用let命令声明变量之前，该变量都是不可用的\" class=\"headerlink\" title=\"在代码块内，使用let命令声明变量之前，该变量都是不可用的\"></a>在代码块内，使用let命令声明变量之前，该变量都是不可用的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func()</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到在使用let的时候，func函数形成了块级作用域，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><h3 id=\"const声明一个只读的常量。一旦声明，常量的值就不能改变。\"><a href=\"#const声明一个只读的常量。一旦声明，常量的值就不能改变。\" class=\"headerlink\" title=\"const声明一个只读的常量。一旦声明，常量的值就不能改变。\"></a>const声明一个只读的常量。一旦声明，常量的值就不能改变。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;   <span class=\"comment\">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果const只声明不赋值，就会报错。\"><a href=\"#如果const只声明不赋值，就会报错。\" class=\"headerlink\" title=\"如果const只声明不赋值，就会报错。\"></a>如果const只声明不赋值，就会报错。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a ;  <span class=\"comment\">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"const的作用域与let命令相同\"><a href=\"#const的作用域与let命令相同\" class=\"headerlink\" title=\"const的作用域与let命令相同\"></a>const的作用域与let命令相同</h3><p>只在声明所在的块级作用域内有效，与let一样不可重复声明，在代码块内，使用const命令声明变量之前，该变量都是不可用的。</p>\n<h3 id=\"const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\"><a href=\"#const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\" class=\"headerlink\" title=\"const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\"></a>const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">arr.push(<span class=\"string\">'a'</span>),</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr.length) <span class=\"comment\">// ['a'],1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> arr = [<span class=\"string\">'a'</span>]   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json.age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>let命令与var命令类似，但是差别也是很大。</p>\n<h3 id=\"let命令只在let命令所在的代码块内有效。\"><a href=\"#let命令只在let命令所在的代码块内有效。\" class=\"headerlink\" title=\"let命令只在let命令所在的代码块内有效。\"></a>let命令只在let命令所在的代码块内有效。</h3><p>比如在for循环中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j)   <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j)  <span class=\"comment\">//Uncaught ReferenceError: j is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>计数器j只在for循环体内有效，在循环体外引用就会报错</p>\n<h3 id=\"var-存在变量提升，let不存在\"><a href=\"#var-存在变量提升，let不存在\" class=\"headerlink\" title=\"var 存在变量提升，let不存在\"></a>var 存在变量提升，let不存在</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)  <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"let不允许在同一个作用于内，声明同一个变量\"><a href=\"#let不允许在同一个作用于内，声明同一个变量\" class=\"headerlink\" title=\"let不允许在同一个作用于内，声明同一个变量\"></a>let不允许在同一个作用于内，声明同一个变量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在代码块内，使用let命令声明变量之前，该变量都是不可用的\"><a href=\"#在代码块内，使用let命令声明变量之前，该变量都是不可用的\" class=\"headerlink\" title=\"在代码块内，使用let命令声明变量之前，该变量都是不可用的\"></a>在代码块内，使用let命令声明变量之前，该变量都是不可用的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func()</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到在使用let的时候，func函数形成了块级作用域，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><h3 id=\"const声明一个只读的常量。一旦声明，常量的值就不能改变。\"><a href=\"#const声明一个只读的常量。一旦声明，常量的值就不能改变。\" class=\"headerlink\" title=\"const声明一个只读的常量。一旦声明，常量的值就不能改变。\"></a>const声明一个只读的常量。一旦声明，常量的值就不能改变。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;   <span class=\"comment\">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果const只声明不赋值，就会报错。\"><a href=\"#如果const只声明不赋值，就会报错。\" class=\"headerlink\" title=\"如果const只声明不赋值，就会报错。\"></a>如果const只声明不赋值，就会报错。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a ;  <span class=\"comment\">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"const的作用域与let命令相同\"><a href=\"#const的作用域与let命令相同\" class=\"headerlink\" title=\"const的作用域与let命令相同\"></a>const的作用域与let命令相同</h3><p>只在声明所在的块级作用域内有效，与let一样不可重复声明，在代码块内，使用const命令声明变量之前，该变量都是不可用的。</p>\n<h3 id=\"const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\"><a href=\"#const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\" class=\"headerlink\" title=\"const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\"></a>const实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">arr.push(<span class=\"string\">'a'</span>),</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr.length) <span class=\"comment\">// ['a'],1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> arr = [<span class=\"string\">'a'</span>]   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json.age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Flex 布局","comments":1,"description":"Flex 布局, position, float, display","date":"2016-04-01T11:12:20.000Z","keywords":"flex, css, position, float, display","_content":"\n我在学习`flex`的时候，看的是阮一峰的大神的`flex`布局教程，这里直接转载阮一峰大神。\n## 概述：\n\n网页布局（`layout`）是`CSS`的一个重点应用。\n![](https://www.runoob.com/wp-content/uploads/2015/07/7bf8bed24a17fbebd3e171f9630dbccb.gif)\n\n布局的传统解决方案，基于盒状模型，依赖 `display`属性 + `position`属性 + `float`属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n2009年，W3C提出了一种新的方案—-`Flex`布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/8712d713c7d0b884a5cb9770efc422b4.jpg)\n\n`Flex`布局将成为未来布局的首选方案。本文介绍Flex布局的语法。\n\n## Flex布局是什么？\n`Flex`是`Flexible Box`的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。\n\n任何一个容器都可以指定为`Flex`布局。\n\n```css\n\n.box{\n  display: flex;\n}\n```\n\n行内元素也可以使用Flex布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\n`Webkit`内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n注意，设为`Flex`布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 基本概念\n\n采用`Flex`布局的元素，称为`Flex`容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为`Flex`项目（flex item），简称”项目”。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png)\n\n容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n## 容器的属性\n\n以下6个属性设置在容器上。\n\n- flex-direction\n\n- flex-wrap\n\n- flex-flow\n\n- justify-content\n\n- align-items\n\n- align-content\n\n### flex-direction属性\n\n`flex-direction`属性决定主轴的方向（即项目的排列方向）。\n\n```css\n\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png)\n\n它可能有4个值。\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n  \n### flex-wrap属性\n\n默认情况下，项目都排在一条线（又称”轴线”）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png)\n\n```css\n\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n它可能取三个值。\n\n（1）nowrap（默认）：不换行。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png)\n\n（2）wrap：换行，第一行在上方。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg)\n\n（3）wrap-reverse：换行，第一行在下方。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg)\n\n### flex-flow\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n```css\n\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n\n```\n\n### justify-content属性\n\n`justify-content`属性定义了项目在主轴上的对齐方式。\n\n```css\n\n.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png)\n\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center： 居中\n- space-between：两端对齐，项目之间的间隔都相等。\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n\n### align-items属性\n\n`align-items`属性定义项目在交叉轴上如何对齐。\n\n```css\n\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n\n### align-content属性\n\n`align-content`属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n```css\n\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png)\n\n该属性可能取6个值。\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n\n\n## 项目的属性\n以下6个属性设置在项目上。\n\n- order\n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n\n### order属性\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png)\n\n### flex-grow属性\n`flex-grow`属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png)\n\n\n如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n### flex-shrink属性\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg)\n\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n### flex-basis属性\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间。\n\n### flex属性\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为0 1 auto。后两个属性可选。\n\n```css\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n该属性有两个快捷值：`auto` (1 1 auto) 和 `none` (0 0 auto)。\n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n### align-self属性\n\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png)\n\n该属性可能取6个值，除了auto，其他都与`align-items`属性完全一致。\n\n来源：\n\n- http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html","source":"_posts/css-2.md","raw":"---\ntitle: Flex 布局\ncomments: true\ndescription: Flex 布局, position, float, display\ntags: \"css\"\ndate: 2016-04-1 19:12:20\ncategories: \"css\"\nkeywords: flex, css, position, float, display\n---\n\n我在学习`flex`的时候，看的是阮一峰的大神的`flex`布局教程，这里直接转载阮一峰大神。\n## 概述：\n\n网页布局（`layout`）是`CSS`的一个重点应用。\n![](https://www.runoob.com/wp-content/uploads/2015/07/7bf8bed24a17fbebd3e171f9630dbccb.gif)\n\n布局的传统解决方案，基于盒状模型，依赖 `display`属性 + `position`属性 + `float`属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n2009年，W3C提出了一种新的方案—-`Flex`布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/8712d713c7d0b884a5cb9770efc422b4.jpg)\n\n`Flex`布局将成为未来布局的首选方案。本文介绍Flex布局的语法。\n\n## Flex布局是什么？\n`Flex`是`Flexible Box`的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。\n\n任何一个容器都可以指定为`Flex`布局。\n\n```css\n\n.box{\n  display: flex;\n}\n```\n\n行内元素也可以使用Flex布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\n`Webkit`内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n注意，设为`Flex`布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 基本概念\n\n采用`Flex`布局的元素，称为`Flex`容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为`Flex`项目（flex item），简称”项目”。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png)\n\n容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n## 容器的属性\n\n以下6个属性设置在容器上。\n\n- flex-direction\n\n- flex-wrap\n\n- flex-flow\n\n- justify-content\n\n- align-items\n\n- align-content\n\n### flex-direction属性\n\n`flex-direction`属性决定主轴的方向（即项目的排列方向）。\n\n```css\n\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png)\n\n它可能有4个值。\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n  \n### flex-wrap属性\n\n默认情况下，项目都排在一条线（又称”轴线”）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png)\n\n```css\n\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n它可能取三个值。\n\n（1）nowrap（默认）：不换行。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png)\n\n（2）wrap：换行，第一行在上方。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg)\n\n（3）wrap-reverse：换行，第一行在下方。\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg)\n\n### flex-flow\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n```css\n\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n\n```\n\n### justify-content属性\n\n`justify-content`属性定义了项目在主轴上的对齐方式。\n\n```css\n\n.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png)\n\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center： 居中\n- space-between：两端对齐，项目之间的间隔都相等。\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n\n### align-items属性\n\n`align-items`属性定义项目在交叉轴上如何对齐。\n\n```css\n\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n\n### align-content属性\n\n`align-content`属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n```css\n\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png)\n\n该属性可能取6个值。\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n\n\n## 项目的属性\n以下6个属性设置在项目上。\n\n- order\n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n\n### order属性\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n![](https://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png)\n\n### flex-grow属性\n`flex-grow`属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png)\n\n\n如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n### flex-shrink属性\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg)\n\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n### flex-basis属性\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间。\n\n### flex属性\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为0 1 auto。后两个属性可选。\n\n```css\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n该属性有两个快捷值：`auto` (1 1 auto) 和 `none` (0 0 auto)。\n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n### align-self属性\n\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n![](https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png)\n\n该属性可能取6个值，除了auto，其他都与`align-items`属性完全一致。\n\n来源：\n\n- http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html","slug":"css-2","published":1,"updated":"2020-12-02T06:49:34.113Z","layout":"post","photos":[],"link":"","_id":"cki71wajy0006tl9kjnajlr4n","content":"<p>我在学习<code>flex</code>的时候，看的是阮一峰的大神的<code>flex</code>布局教程，这里直接转载阮一峰大神。</p>\n<h2 id=\"概述：\"><a href=\"#概述：\" class=\"headerlink\" title=\"概述：\"></a>概述：</h2><p>网页布局（<code>layout</code>）是<code>CSS</code>的一个重点应用。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/7bf8bed24a17fbebd3e171f9630dbccb.gif\" alt></p>\n<p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>2009年，W3C提出了一种新的方案—-<code>Flex</code>布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/8712d713c7d0b884a5cb9770efc422b4.jpg\" alt></p>\n<p><code>Flex</code>布局将成为未来布局的首选方案。本文介绍Flex布局的语法。</p>\n<h2 id=\"Flex布局是什么？\"><a href=\"#Flex布局是什么？\" class=\"headerlink\" title=\"Flex布局是什么？\"></a>Flex布局是什么？</h2><p><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为<code>Flex</code>布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>行内元素也可以使用Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Webkit</code>内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，设为<code>Flex</code>布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>采用<code>Flex</code>布局的元素，称为<code>Flex</code>容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为<code>Flex</code>项目（flex item），简称”项目”。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png\" alt></p>\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><p>以下6个属性设置在容器上。</p>\n<ul>\n<li><p>flex-direction</p>\n</li>\n<li><p>flex-wrap</p>\n</li>\n<li><p>flex-flow</p>\n</li>\n<li><p>justify-content</p>\n</li>\n<li><p>align-items</p>\n</li>\n<li><p>align-content</p>\n</li>\n</ul>\n<h3 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png\" alt></p>\n<p>它可能有4个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h3 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png\" alt></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可能取三个值。</p>\n<p>（1）nowrap（默认）：不换行。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png\" alt></p>\n<p>（2）wrap：换行，第一行在上方。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg\" alt></p>\n<p>（3）wrap-reverse：换行，第一行在下方。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg\" alt></p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png\" alt></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<h3 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png\" alt></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png\" alt></p>\n<p>该属性可能取6个值。</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png\" alt></p>\n<h3 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png\" alt></p>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg\" alt></p>\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该属性有两个快捷值：<code>auto</code> (1 1 auto) 和 <code>none</code> (0 0 auto)。</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h3 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png\" alt></p>\n<p>该属性可能取6个值，除了auto，其他都与<code>align-items</code>属性完全一致。</p>\n<p>来源：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>我在学习<code>flex</code>的时候，看的是阮一峰的大神的<code>flex</code>布局教程，这里直接转载阮一峰大神。</p>\n<h2 id=\"概述：\"><a href=\"#概述：\" class=\"headerlink\" title=\"概述：\"></a>概述：</h2><p>网页布局（<code>layout</code>）是<code>CSS</code>的一个重点应用。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/7bf8bed24a17fbebd3e171f9630dbccb.gif\" alt></p>\n<p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>2009年，W3C提出了一种新的方案—-<code>Flex</code>布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/8712d713c7d0b884a5cb9770efc422b4.jpg\" alt></p>\n<p><code>Flex</code>布局将成为未来布局的首选方案。本文介绍Flex布局的语法。</p>\n<h2 id=\"Flex布局是什么？\"><a href=\"#Flex布局是什么？\" class=\"headerlink\" title=\"Flex布局是什么？\"></a>Flex布局是什么？</h2><p><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为<code>Flex</code>布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>行内元素也可以使用Flex布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Webkit</code>内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，设为<code>Flex</code>布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>采用<code>Flex</code>布局的元素，称为<code>Flex</code>容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为<code>Flex</code>项目（flex item），简称”项目”。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png\" alt></p>\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><p>以下6个属性设置在容器上。</p>\n<ul>\n<li><p>flex-direction</p>\n</li>\n<li><p>flex-wrap</p>\n</li>\n<li><p>flex-flow</p>\n</li>\n<li><p>justify-content</p>\n</li>\n<li><p>align-items</p>\n</li>\n<li><p>align-content</p>\n</li>\n</ul>\n<h3 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png\" alt></p>\n<p>它可能有4个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h3 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png\" alt></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可能取三个值。</p>\n<p>（1）nowrap（默认）：不换行。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png\" alt></p>\n<p>（2）wrap：换行，第一行在上方。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg\" alt></p>\n<p>（3）wrap-reverse：换行，第一行在下方。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg\" alt></p>\n<h3 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png\" alt></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<h3 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png\" alt></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png\" alt></p>\n<p>该属性可能取6个值。</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png\" alt></p>\n<h3 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png\" alt></p>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg\" alt></p>\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该属性有两个快捷值：<code>auto</code> (1 1 auto) 和 <code>none</code> (0 0 auto)。</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h3 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png\" alt></p>\n<p>该属性可能取6个值，除了auto，其他都与<code>align-items</code>属性完全一致。</p>\n<p>来源：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n</ul>\n"},{"title":"Class 的基本语法","comments":1,"description":"Class 的基本语法","date":"2017-09-05T12:13:45.000Z","keywords":"ES6, Class","_content":"\n\n`JavaScript` 语言中，生成实例对象的传统方法是通过构造函数。\n\n```js\nfunction Point(x,y){\n  this.x = x;\n  this.y = y;\n}\nPoint.prototype.toString = function(){\n  return '(' + this.x + ', ' + this.y + ')'\n}\nconst point = new Point(1,2)\n```\n\n上面的代码用 `ES6` 的`class`改写\n\n```js\nclass Point{\n    constructor(x,y){\n        this.x = x\n        this.y = y\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nconst point = new Point(1,2)\n```\n\n代码定义了一个“类”，可以看到里面有一个`constructor`方法，这就是构造方法，而this关键字则代表实例对象。也就是说，`ES5` 的构造函数`Point`，对应 `ES6` 的`Point`类的构造方法。\n\n`Point`类除了构造方法，还定义了一个`toString`方法。注意，定义“类”的方法的时候，前面不需要加上`function`这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n\n```js\nclass point{}\nconsole.log(typeof point)   //function\nconsole.log(point === point.prototype.constructor)  //true\n```\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。\n\n```js\nclass Point{\n    constructor(x,y){\n        this.x = x\n        this.y = y\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nconst point = new Point(1,2)\nconsole.log(point.toString())    //(1, 2)\n```\n\n构造函数的`prototype`属性，在 `ES6` 的“类”上面继续存在。事实上，类的所有方法都定义在类的`prototype`属性上面。\n\n```js\nclass Point{\n    constructor(){}\n    toString(){}\n    toValue(){}\n}\n//等同于\nPoint.prototype = {\n    constructor(){},\n    toString(){},\n    toVlaue(){}\n}\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\n```js\nclass Point{}\nconst point = new Point()\nconsole.log( point.constructor === Point.prototype.constructor )  //true\nObject.assign方法可以很方便地一次向类添加多个方法。\n```\n\n`prototype`对象的`constructor`属性，直接指向“类”的本身，这与 `ES5` 的行为是一致的。\n\n```js\nclass Point{\n    constructor(){}\n}\nObject.assign(Point.prototype,{\n    toString(){},\n    toValue(){}\n})\nconsole.log(Point===Point.prototype.constructor)   //true\n```\n\n类的内部所有定义的方法，都是不可枚举的（`non-enumerable`）。\n\n```js\nclass Point{\n    constructor(){}\n}\nconsole.log( Object.keys(Point.prototype) )   //[]\nconsole.log(Object.getOwnPropertyNames(Point.prototype))   // [\"constructor\"]\n//assign合并的方法可枚举\nObject.assign(Point.prototype,{\n    toString(){},\n    toValue(){}\n})\nconsole.log( Object.keys(Point.prototype) )   //[\"toString\", \"toValue\"]\nconsole.log(Object.getOwnPropertyNames(Point.prototype))   //  [\"constructor\", \"toString\", \"toValue\"]\n```\n\nES5 的写法，也是可枚举的。\n\n## constructor 方法\n\n`constructor`方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有`constructor`方法，如果没有显式定义，一个空的`constructor`方法会被默认添加。\n\n`constructor`方法默认返回实例对象（即this）\n\n类必须使用new调用，否则会报错。\n\n```js\nPoint()  //报错\nconst point = new Point()\n//instanceof  :运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链\nconsole.log(point instanceof Point)  //true\n```\n\n实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。\n\n```js\nclass Point{\n    constructor(x,y){\n      this.x = x\n      this.y = y\n    }\n    toString(){\n      return '(' + this.x + ', ' + this.y + ')';\n    }\n}\nconst point = new Point(2,3)\n\nconsole.log( point.toString() )  //(2,3)\nconsole.log( point.hasOwnProperty('x') )  //true\nconsole.log( point.hasOwnProperty('y') )  //true\nconsole.log( point.hasOwnProperty('toString') )  //false\nconsole.log( point.__proto__.hasOwnProperty('toString') )    //true\n```\n\nx和y都是实例对象`point`自身的属性（因为定义在this变量上），所以`hasOwnProperty`方法返回true，而`toString`是原型对象的属性（因为定义在Point类上），所以`hasOwnProperty`方法返回`false`。这些都与 `ES5` 的行为保持一致。\n\n## Class 表达式\n\n与函数一样，类也可以使用表达式的形式定义。\n\n```js\nconst point = class Point{\n    toString(){\n      return Point.name\n    }\n}\n\n//需要注意的是，这个类的名字是point而不是Point，Point只在 Class 的内部代码可用，指代当前类。\nconst p = new point()\nconsole.log( p.toString() )   //Point\nPoint.name   //Uncaught ReferenceError: Point is not defined\n```\n\n雨里雾里的，我先去增强自身实力再好好理解class详细的语法。\n\n\n参考资料：http://es6.ruanyifeng.com/#docs/class","source":"_posts/es6-10.md","raw":"---\ntitle: Class 的基本语法\ncomments: true\ndescription: Class 的基本语法\ntags: \"ES6\"\ndate: 2017-09-05 20:13:45\ncategories: \"ES6\"\nkeywords: ES6, Class\n---\n\n\n`JavaScript` 语言中，生成实例对象的传统方法是通过构造函数。\n\n```js\nfunction Point(x,y){\n  this.x = x;\n  this.y = y;\n}\nPoint.prototype.toString = function(){\n  return '(' + this.x + ', ' + this.y + ')'\n}\nconst point = new Point(1,2)\n```\n\n上面的代码用 `ES6` 的`class`改写\n\n```js\nclass Point{\n    constructor(x,y){\n        this.x = x\n        this.y = y\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nconst point = new Point(1,2)\n```\n\n代码定义了一个“类”，可以看到里面有一个`constructor`方法，这就是构造方法，而this关键字则代表实例对象。也就是说，`ES5` 的构造函数`Point`，对应 `ES6` 的`Point`类的构造方法。\n\n`Point`类除了构造方法，还定义了一个`toString`方法。注意，定义“类”的方法的时候，前面不需要加上`function`这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n\n```js\nclass point{}\nconsole.log(typeof point)   //function\nconsole.log(point === point.prototype.constructor)  //true\n```\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。\n\n```js\nclass Point{\n    constructor(x,y){\n        this.x = x\n        this.y = y\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nconst point = new Point(1,2)\nconsole.log(point.toString())    //(1, 2)\n```\n\n构造函数的`prototype`属性，在 `ES6` 的“类”上面继续存在。事实上，类的所有方法都定义在类的`prototype`属性上面。\n\n```js\nclass Point{\n    constructor(){}\n    toString(){}\n    toValue(){}\n}\n//等同于\nPoint.prototype = {\n    constructor(){},\n    toString(){},\n    toVlaue(){}\n}\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\n```js\nclass Point{}\nconst point = new Point()\nconsole.log( point.constructor === Point.prototype.constructor )  //true\nObject.assign方法可以很方便地一次向类添加多个方法。\n```\n\n`prototype`对象的`constructor`属性，直接指向“类”的本身，这与 `ES5` 的行为是一致的。\n\n```js\nclass Point{\n    constructor(){}\n}\nObject.assign(Point.prototype,{\n    toString(){},\n    toValue(){}\n})\nconsole.log(Point===Point.prototype.constructor)   //true\n```\n\n类的内部所有定义的方法，都是不可枚举的（`non-enumerable`）。\n\n```js\nclass Point{\n    constructor(){}\n}\nconsole.log( Object.keys(Point.prototype) )   //[]\nconsole.log(Object.getOwnPropertyNames(Point.prototype))   // [\"constructor\"]\n//assign合并的方法可枚举\nObject.assign(Point.prototype,{\n    toString(){},\n    toValue(){}\n})\nconsole.log( Object.keys(Point.prototype) )   //[\"toString\", \"toValue\"]\nconsole.log(Object.getOwnPropertyNames(Point.prototype))   //  [\"constructor\", \"toString\", \"toValue\"]\n```\n\nES5 的写法，也是可枚举的。\n\n## constructor 方法\n\n`constructor`方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有`constructor`方法，如果没有显式定义，一个空的`constructor`方法会被默认添加。\n\n`constructor`方法默认返回实例对象（即this）\n\n类必须使用new调用，否则会报错。\n\n```js\nPoint()  //报错\nconst point = new Point()\n//instanceof  :运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链\nconsole.log(point instanceof Point)  //true\n```\n\n实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。\n\n```js\nclass Point{\n    constructor(x,y){\n      this.x = x\n      this.y = y\n    }\n    toString(){\n      return '(' + this.x + ', ' + this.y + ')';\n    }\n}\nconst point = new Point(2,3)\n\nconsole.log( point.toString() )  //(2,3)\nconsole.log( point.hasOwnProperty('x') )  //true\nconsole.log( point.hasOwnProperty('y') )  //true\nconsole.log( point.hasOwnProperty('toString') )  //false\nconsole.log( point.__proto__.hasOwnProperty('toString') )    //true\n```\n\nx和y都是实例对象`point`自身的属性（因为定义在this变量上），所以`hasOwnProperty`方法返回true，而`toString`是原型对象的属性（因为定义在Point类上），所以`hasOwnProperty`方法返回`false`。这些都与 `ES5` 的行为保持一致。\n\n## Class 表达式\n\n与函数一样，类也可以使用表达式的形式定义。\n\n```js\nconst point = class Point{\n    toString(){\n      return Point.name\n    }\n}\n\n//需要注意的是，这个类的名字是point而不是Point，Point只在 Class 的内部代码可用，指代当前类。\nconst p = new point()\nconsole.log( p.toString() )   //Point\nPoint.name   //Uncaught ReferenceError: Point is not defined\n```\n\n雨里雾里的，我先去增强自身实力再好好理解class详细的语法。\n\n\n参考资料：http://es6.ruanyifeng.com/#docs/class","slug":"es6-10","published":1,"updated":"2020-12-02T06:49:34.114Z","layout":"post","photos":[],"link":"","_id":"cki71wak00008tl9k1nx44y4i","content":"<p><code>JavaScript</code> 语言中，生成实例对象的传统方法是通过构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码用 <code>ES6</code> 的<code>class</code>改写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而this关键字则代表实例对象。也就是说，<code>ES5</code> 的构造函数<code>Point</code>，对应 <code>ES6</code> 的<code>Point</code>类的构造方法。</p>\n<p><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> point)   <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point === point.prototype.constructor)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point.toString())    <span class=\"comment\">//(1, 2)</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数的<code>prototype</code>属性，在 <code>ES6</code> 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    toString()&#123;&#125;</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;,</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toVlaue()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.constructor === Point.prototype.constructor )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign方法可以很方便地一次向类添加多个方法。</span><br></pre></td></tr></table></figure>\n\n<p><code>prototype</code>对象的<code>constructor</code>属性，直接指向“类”的本身，这与 <code>ES5</code> 的行为是一致的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype,&#123;</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Point===Point.prototype.constructor)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>类的内部所有定义的方法，都是不可枚举的（<code>non-enumerable</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(Point.prototype) )   <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype))   <span class=\"comment\">// [\"constructor\"]</span></span><br><span class=\"line\"><span class=\"comment\">//assign合并的方法可枚举</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype,&#123;</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(Point.prototype) )   <span class=\"comment\">//[\"toString\", \"toValue\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype))   <span class=\"comment\">//  [\"constructor\", \"toString\", \"toValue\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES5 的写法，也是可枚举的。</p>\n<h2 id=\"constructor-方法\"><a href=\"#constructor-方法\" class=\"headerlink\" title=\"constructor 方法\"></a>constructor 方法</h2><p><code>constructor</code>方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>\n<p><code>constructor</code>方法默认返回实例对象（即this）</p>\n<p>类必须使用new调用，否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point()  <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point()</span><br><span class=\"line\"><span class=\"comment\">//instanceof  :运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point <span class=\"keyword\">instanceof</span> Point)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.toString() )  <span class=\"comment\">//(2,3)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'x'</span>) )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'y'</span>) )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'toString'</span>) )  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) )    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>x和y都是实例对象<code>point</code>自身的属性（因为定义在this变量上），所以<code>hasOwnProperty</code>方法返回true，而<code>toString</code>是原型对象的属性（因为定义在Point类上），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 <code>ES5</code> 的行为保持一致。</p>\n<h2 id=\"Class-表达式\"><a href=\"#Class-表达式\" class=\"headerlink\" title=\"Class 表达式\"></a>Class 表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Point.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是，这个类的名字是point而不是Point，Point只在 Class 的内部代码可用，指代当前类。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> point()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.toString() )   <span class=\"comment\">//Point</span></span><br><span class=\"line\">Point.name   <span class=\"comment\">//Uncaught ReferenceError: Point is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>雨里雾里的，我先去增强自身实力再好好理解class详细的语法。</p>\n<p>参考资料：<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/class</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><code>JavaScript</code> 语言中，生成实例对象的传统方法是通过构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码用 <code>ES6</code> 的<code>class</code>改写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而this关键字则代表实例对象。也就是说，<code>ES5</code> 的构造函数<code>Point</code>，对应 <code>ES6</code> 的<code>Point</code>类的构造方法。</p>\n<p><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> point)   <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point === point.prototype.constructor)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point.toString())    <span class=\"comment\">//(1, 2)</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数的<code>prototype</code>属性，在 <code>ES6</code> 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    toString()&#123;&#125;</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;,</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toVlaue()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.constructor === Point.prototype.constructor )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign方法可以很方便地一次向类添加多个方法。</span><br></pre></td></tr></table></figure>\n\n<p><code>prototype</code>对象的<code>constructor</code>属性，直接指向“类”的本身，这与 <code>ES5</code> 的行为是一致的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype,&#123;</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Point===Point.prototype.constructor)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>类的内部所有定义的方法，都是不可枚举的（<code>non-enumerable</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(Point.prototype) )   <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype))   <span class=\"comment\">// [\"constructor\"]</span></span><br><span class=\"line\"><span class=\"comment\">//assign合并的方法可枚举</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point.prototype,&#123;</span><br><span class=\"line\">    toString()&#123;&#125;,</span><br><span class=\"line\">    toValue()&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(Point.prototype) )   <span class=\"comment\">//[\"toString\", \"toValue\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype))   <span class=\"comment\">//  [\"constructor\", \"toString\", \"toValue\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES5 的写法，也是可枚举的。</p>\n<h2 id=\"constructor-方法\"><a href=\"#constructor-方法\" class=\"headerlink\" title=\"constructor 方法\"></a>constructor 方法</h2><p><code>constructor</code>方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>\n<p><code>constructor</code>方法默认返回实例对象（即this）</p>\n<p>类必须使用new调用，否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point()  <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point()</span><br><span class=\"line\"><span class=\"comment\">//instanceof  :运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(point <span class=\"keyword\">instanceof</span> Point)  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.toString() )  <span class=\"comment\">//(2,3)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'x'</span>) )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'y'</span>) )  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.hasOwnProperty(<span class=\"string\">'toString'</span>) )  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) )    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>x和y都是实例对象<code>point</code>自身的属性（因为定义在this变量上），所以<code>hasOwnProperty</code>方法返回true，而<code>toString</code>是原型对象的属性（因为定义在Point类上），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 <code>ES5</code> 的行为保持一致。</p>\n<h2 id=\"Class-表达式\"><a href=\"#Class-表达式\" class=\"headerlink\" title=\"Class 表达式\"></a>Class 表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Point.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是，这个类的名字是point而不是Point，Point只在 Class 的内部代码可用，指代当前类。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> point()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( p.toString() )   <span class=\"comment\">//Point</span></span><br><span class=\"line\">Point.name   <span class=\"comment\">//Uncaught ReferenceError: Point is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>雨里雾里的，我先去增强自身实力再好好理解class详细的语法。</p>\n<p>参考资料：<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/class</a></p>\n"},{"title":"CSS3-filter应用","comments":1,"description":"CSS3-filter应用 css3 filter","date":"2016-03-12T01:10:20.000Z","keywords":"html, css ,CSS3-filter应用","_content":"\n## 概述\n`CSS3filter`主要是用来处理图片。`filter`兼容性目前不是很好，`IE11`及以下不兼容，`Edg`需要带上前缀。`chrome，Firefox，Opera`浏览器都兼容。实在想用它的话，就放弃兼容`IE`浏览器吧！\n\n## `CSS3-filter`应用\n  ![左边为原图，右边是修改filter函数的取值](http://www.hbbaly.com/wp-content/uploads/2017/09/filter.png)\n\n## `filter`函数的取值\n\n`grayscale`灰度\n`sepia`褐色（求专业指点翻译）\n`saturate`饱和度\n`hue-rotate`色相旋转\n`invert`反色\n`opacity`透明度\n`brightness`亮度\n`contrast`对比度\n`blur`模糊\n`drop-shadow`阴影\n\n下面一个一个测试这10个。\n````html\n<div class=\"img\">\n  <img src=\"img/car.jpg\" alt=\"\">\n  <img src=\"img/car.jpg\" alt=\"\">\n</div>\n```\n```css\n.img{\n  width:100%;\n  height:400px;\n  display: -webkit-flex;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n  margin-top:10px;\n}\nimg{\n  display: block;\n  margin-top:10px;\n  width:800px;\n  height:400px;\n}\n.img img:nth-child(2){\n  -webkit-filter: grayscale(70%); /*grayscale灰度*/\n  filter:grayscale(70%);\n}\n```\n（如果代码没有特殊说明均为此代码）\n\n`CSS3-filter`应用\n左边为原图，右边为改动\n\n### `grayscale`\n\n将图像转换为灰度图像，值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化，默认为0。\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/gray.png)\n\n### `sepia`\n\n将图像转换为深褐色，值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化，值默认是0\n```css\n.img img:nth-child(2){\n  -webkit-filter: sepia(70%);/*褐色*/\n  filter:sepia(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/sepia.png)\n\n### `saturate`\n\n转换图像饱和度，值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。其他值，超过100%的值是允许的，则有更高的饱和度，值默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter: saturate(70%);/*saturate饱和度*/\n  filter: saturate(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/saturate.png)\n\n### `invert`\n\n反转输入图像，值定义转换的比例。100%的价值是完全反转，值为0%则图像无变化。，值默认是0。\n```css\n.img img:nth-child(2){\n  -webkit-filter: invert(70%);/*invert反色*/\n  filter: invert(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/invert-1.png)\n\n### opacity`\n\n转化图像的透明程度，值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。，值默认是1。\n\n```css\n.img img:nth-child(2){\n  -webkit-filter: opacity(.7);/*opacity*/\n  filter: opacity(.7);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/opacity.png)\n\n### `hue-rotate`\n\n给图像应用色相旋转，\"angle\"一值设定图像会被调整的色环角度值。值为0deg，则图像无变化，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。\n\n```css\n.img img:nth-child(2){\n  -webkit-filter: hue-rotate(120deg);/*hue-rotate色相旋转*/\n  filter: hue-rotate(120deg);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png)\n\n\n### `brightness`\n\n使图片看起来更亮或更暗。如果值是0%，图像会全黑。值是100%，则图像无变化。，值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter: brightness(5);/* brightness亮度*/\n  filter: brightness(5);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png)\n\n\n### `contrast`\n\n调整图像的对比度，值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter:contrast(30%);/* contrast对比度*/\n  filter:contrast(30%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/contrast.png)\n\n### `blur`\n\n给图像设置高斯模糊， 所以值越大越模糊；如果没有设定值，则默认是0；这个参数可设置css长度值，但不接受百分比值。\n```css\n.img img:nth-child(2){\n  -webkit-filter:blur(10px);/*blur模糊*/\n  filter:blur(10px);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/blur.png)\n\n\n### `drop-shadow(h-shadow v-shadow blur spread color)`\n\n给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了\"inset\"关键字是不允许的。\n```css\n.img img:nth-child(2){\n  -webkit-filter:drop-shadow(0 15px 5px #000);/*drop-shadow阴影*/\n  filter:drop-shadow(0 15px 5px #000);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/shadow.png)\n\n\n参考资料：\n  - http://www.runoob.com/cssref/css3-pr-filter.html\n\n  - http://www.w3cplus.com/css3/advanced-css-filters.html\n\n  - http://www.w3cplus.com/css3/ten-effects-with-css3-filter","source":"_posts/css-1.md","raw":"---\ntitle: CSS3-filter应用\ncomments: true\ndescription: CSS3-filter应用 css3 filter\ntags: \"css\"\ndate: 2016-03-12 09:10:20\ncategories: \"css\"\nkeywords: html, css ,CSS3-filter应用\n---\n\n## 概述\n`CSS3filter`主要是用来处理图片。`filter`兼容性目前不是很好，`IE11`及以下不兼容，`Edg`需要带上前缀。`chrome，Firefox，Opera`浏览器都兼容。实在想用它的话，就放弃兼容`IE`浏览器吧！\n\n## `CSS3-filter`应用\n  ![左边为原图，右边是修改filter函数的取值](http://www.hbbaly.com/wp-content/uploads/2017/09/filter.png)\n\n## `filter`函数的取值\n\n`grayscale`灰度\n`sepia`褐色（求专业指点翻译）\n`saturate`饱和度\n`hue-rotate`色相旋转\n`invert`反色\n`opacity`透明度\n`brightness`亮度\n`contrast`对比度\n`blur`模糊\n`drop-shadow`阴影\n\n下面一个一个测试这10个。\n````html\n<div class=\"img\">\n  <img src=\"img/car.jpg\" alt=\"\">\n  <img src=\"img/car.jpg\" alt=\"\">\n</div>\n```\n```css\n.img{\n  width:100%;\n  height:400px;\n  display: -webkit-flex;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n  margin-top:10px;\n}\nimg{\n  display: block;\n  margin-top:10px;\n  width:800px;\n  height:400px;\n}\n.img img:nth-child(2){\n  -webkit-filter: grayscale(70%); /*grayscale灰度*/\n  filter:grayscale(70%);\n}\n```\n（如果代码没有特殊说明均为此代码）\n\n`CSS3-filter`应用\n左边为原图，右边为改动\n\n### `grayscale`\n\n将图像转换为灰度图像，值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化，默认为0。\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/gray.png)\n\n### `sepia`\n\n将图像转换为深褐色，值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化，值默认是0\n```css\n.img img:nth-child(2){\n  -webkit-filter: sepia(70%);/*褐色*/\n  filter:sepia(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/sepia.png)\n\n### `saturate`\n\n转换图像饱和度，值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。其他值，超过100%的值是允许的，则有更高的饱和度，值默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter: saturate(70%);/*saturate饱和度*/\n  filter: saturate(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/saturate.png)\n\n### `invert`\n\n反转输入图像，值定义转换的比例。100%的价值是完全反转，值为0%则图像无变化。，值默认是0。\n```css\n.img img:nth-child(2){\n  -webkit-filter: invert(70%);/*invert反色*/\n  filter: invert(70%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/invert-1.png)\n\n### opacity`\n\n转化图像的透明程度，值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。，值默认是1。\n\n```css\n.img img:nth-child(2){\n  -webkit-filter: opacity(.7);/*opacity*/\n  filter: opacity(.7);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/opacity.png)\n\n### `hue-rotate`\n\n给图像应用色相旋转，\"angle\"一值设定图像会被调整的色环角度值。值为0deg，则图像无变化，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。\n\n```css\n.img img:nth-child(2){\n  -webkit-filter: hue-rotate(120deg);/*hue-rotate色相旋转*/\n  filter: hue-rotate(120deg);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png)\n\n\n### `brightness`\n\n使图片看起来更亮或更暗。如果值是0%，图像会全黑。值是100%，则图像无变化。，值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter: brightness(5);/* brightness亮度*/\n  filter: brightness(5);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png)\n\n\n### `contrast`\n\n调整图像的对比度，值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，默认是1。\n```css\n.img img:nth-child(2){\n  -webkit-filter:contrast(30%);/* contrast对比度*/\n  filter:contrast(30%);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/contrast.png)\n\n### `blur`\n\n给图像设置高斯模糊， 所以值越大越模糊；如果没有设定值，则默认是0；这个参数可设置css长度值，但不接受百分比值。\n```css\n.img img:nth-child(2){\n  -webkit-filter:blur(10px);/*blur模糊*/\n  filter:blur(10px);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/blur.png)\n\n\n### `drop-shadow(h-shadow v-shadow blur spread color)`\n\n给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了\"inset\"关键字是不允许的。\n```css\n.img img:nth-child(2){\n  -webkit-filter:drop-shadow(0 15px 5px #000);/*drop-shadow阴影*/\n  filter:drop-shadow(0 15px 5px #000);\n}\n```\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/shadow.png)\n\n\n参考资料：\n  - http://www.runoob.com/cssref/css3-pr-filter.html\n\n  - http://www.w3cplus.com/css3/advanced-css-filters.html\n\n  - http://www.w3cplus.com/css3/ten-effects-with-css3-filter","slug":"css-1","published":1,"updated":"2020-12-02T06:49:34.112Z","layout":"post","photos":[],"link":"","_id":"cki71wak3000atl9kx6mb1qis","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>CSS3filter</code>主要是用来处理图片。<code>filter</code>兼容性目前不是很好，<code>IE11</code>及以下不兼容，<code>Edg</code>需要带上前缀。<code>chrome，Firefox，Opera</code>浏览器都兼容。实在想用它的话，就放弃兼容<code>IE</code>浏览器吧！</p>\n<h2 id=\"CSS3-filter应用\"><a href=\"#CSS3-filter应用\" class=\"headerlink\" title=\"CSS3-filter应用\"></a><code>CSS3-filter</code>应用</h2><p>  <img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/filter.png\" alt=\"左边为原图，右边是修改filter函数的取值\"></p>\n<h2 id=\"filter函数的取值\"><a href=\"#filter函数的取值\" class=\"headerlink\" title=\"filter函数的取值\"></a><code>filter</code>函数的取值</h2><p><code>grayscale</code>灰度<br><code>sepia</code>褐色（求专业指点翻译）<br><code>saturate</code>饱和度<br><code>hue-rotate</code>色相旋转<br><code>invert</code>反色<br><code>opacity</code>透明度<br><code>brightness</code>亮度<br><code>contrast</code>对比度<br><code>blur</code>模糊<br><code>drop-shadow</code>阴影</p>\n<p>下面一个一个测试这10个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;img&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img/car.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img/car.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: row nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">70%</span>); <span class=\"comment\">/*grayscale灰度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">grayscale</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（如果代码没有特殊说明均为此代码）</p>\n<p><code>CSS3-filter</code>应用<br>左边为原图，右边为改动</p>\n<h3 id=\"grayscale\"><a href=\"#grayscale\" class=\"headerlink\" title=\"grayscale\"></a><code>grayscale</code></h3><p>将图像转换为灰度图像，值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化，默认为0。<br><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/gray.png\" alt></p>\n<h3 id=\"sepia\"><a href=\"#sepia\" class=\"headerlink\" title=\"sepia\"></a><code>sepia</code></h3><p>将图像转换为深褐色，值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化，值默认是0</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*褐色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">sepia</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/sepia.png\" alt></p>\n<h3 id=\"saturate\"><a href=\"#saturate\" class=\"headerlink\" title=\"saturate\"></a><code>saturate</code></h3><p>转换图像饱和度，值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。其他值，超过100%的值是允许的，则有更高的饱和度，值默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*saturate饱和度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/saturate.png\" alt></p>\n<h3 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert\"></a><code>invert</code></h3><p>反转输入图像，值定义转换的比例。100%的价值是完全反转，值为0%则图像无变化。，值默认是0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*invert反色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/invert-1.png\" alt></p>\n<h3 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity`\"></a>opacity`</h3><p>转化图像的透明程度，值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。，值默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">opacity</span>(.<span class=\"number\">7</span>);<span class=\"comment\">/*opacity*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">opacity</span>(.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/opacity.png\" alt></p>\n<h3 id=\"hue-rotate\"><a href=\"#hue-rotate\" class=\"headerlink\" title=\"hue-rotate\"></a><code>hue-rotate</code></h3><p>给图像应用色相旋转，”angle”一值设定图像会被调整的色环角度值。值为0deg，则图像无变化，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">120deg</span>);<span class=\"comment\">/*hue-rotate色相旋转*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">120deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png\" alt></p>\n<h3 id=\"brightness\"><a href=\"#brightness\" class=\"headerlink\" title=\"brightness\"></a><code>brightness</code></h3><p>使图片看起来更亮或更暗。如果值是0%，图像会全黑。值是100%，则图像无变化。，值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">brightness</span>(<span class=\"number\">5</span>);<span class=\"comment\">/* brightness亮度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">brightness</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png\" alt></p>\n<h3 id=\"contrast\"><a href=\"#contrast\" class=\"headerlink\" title=\"contrast\"></a><code>contrast</code></h3><p>调整图像的对比度，值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">contrast</span>(<span class=\"number\">30%</span>);<span class=\"comment\">/* contrast对比度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">contrast</span>(<span class=\"number\">30%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/contrast.png\" alt></p>\n<h3 id=\"blur\"><a href=\"#blur\" class=\"headerlink\" title=\"blur\"></a><code>blur</code></h3><p>给图像设置高斯模糊， 所以值越大越模糊；如果没有设定值，则默认是0；这个参数可设置css长度值，但不接受百分比值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">blur</span>(<span class=\"number\">10px</span>);<span class=\"comment\">/*blur模糊*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">blur</span>(<span class=\"number\">10px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/blur.png\" alt></p>\n<h3 id=\"drop-shadow-h-shadow-v-shadow-blur-spread-color\"><a href=\"#drop-shadow-h-shadow-v-shadow-blur-spread-color\" class=\"headerlink\" title=\"drop-shadow(h-shadow v-shadow blur spread color)\"></a><code>drop-shadow(h-shadow v-shadow blur spread color)</code></h3><p>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了”inset”关键字是不允许的。</shadow></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">5px</span> #<span class=\"number\">000</span>);<span class=\"comment\">/*drop-shadow阴影*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">5px</span> #<span class=\"number\">000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/shadow.png\" alt></p>\n<p>参考资料：</p>\n<ul>\n<li><p><a href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/cssref/css3-pr-filter.html</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/css3/advanced-css-filters.html\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/css3/advanced-css-filters.html</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/css3/ten-effects-with-css3-filter</a></p>\n</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>CSS3filter</code>主要是用来处理图片。<code>filter</code>兼容性目前不是很好，<code>IE11</code>及以下不兼容，<code>Edg</code>需要带上前缀。<code>chrome，Firefox，Opera</code>浏览器都兼容。实在想用它的话，就放弃兼容<code>IE</code>浏览器吧！</p>\n<h2 id=\"CSS3-filter应用\"><a href=\"#CSS3-filter应用\" class=\"headerlink\" title=\"CSS3-filter应用\"></a><code>CSS3-filter</code>应用</h2><p>  <img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/filter.png\" alt=\"左边为原图，右边是修改filter函数的取值\"></p>\n<h2 id=\"filter函数的取值\"><a href=\"#filter函数的取值\" class=\"headerlink\" title=\"filter函数的取值\"></a><code>filter</code>函数的取值</h2><p><code>grayscale</code>灰度<br><code>sepia</code>褐色（求专业指点翻译）<br><code>saturate</code>饱和度<br><code>hue-rotate</code>色相旋转<br><code>invert</code>反色<br><code>opacity</code>透明度<br><code>brightness</code>亮度<br><code>contrast</code>对比度<br><code>blur</code>模糊<br><code>drop-shadow</code>阴影</p>\n<p>下面一个一个测试这10个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;img&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img/car.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img/car.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: row nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">70%</span>); <span class=\"comment\">/*grayscale灰度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">grayscale</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（如果代码没有特殊说明均为此代码）</p>\n<p><code>CSS3-filter</code>应用<br>左边为原图，右边为改动</p>\n<h3 id=\"grayscale\"><a href=\"#grayscale\" class=\"headerlink\" title=\"grayscale\"></a><code>grayscale</code></h3><p>将图像转换为灰度图像，值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化，默认为0。<br><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/gray.png\" alt></p>\n<h3 id=\"sepia\"><a href=\"#sepia\" class=\"headerlink\" title=\"sepia\"></a><code>sepia</code></h3><p>将图像转换为深褐色，值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化，值默认是0</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">sepia</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*褐色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">sepia</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/sepia.png\" alt></p>\n<h3 id=\"saturate\"><a href=\"#saturate\" class=\"headerlink\" title=\"saturate\"></a><code>saturate</code></h3><p>转换图像饱和度，值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。其他值，超过100%的值是允许的，则有更高的饱和度，值默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*saturate饱和度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">saturate</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/saturate.png\" alt></p>\n<h3 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert\"></a><code>invert</code></h3><p>反转输入图像，值定义转换的比例。100%的价值是完全反转，值为0%则图像无变化。，值默认是0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">70%</span>);<span class=\"comment\">/*invert反色*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">invert</span>(<span class=\"number\">70%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/invert-1.png\" alt></p>\n<h3 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity`\"></a>opacity`</h3><p>转化图像的透明程度，值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。，值默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">opacity</span>(.<span class=\"number\">7</span>);<span class=\"comment\">/*opacity*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">opacity</span>(.<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/opacity.png\" alt></p>\n<h3 id=\"hue-rotate\"><a href=\"#hue-rotate\" class=\"headerlink\" title=\"hue-rotate\"></a><code>hue-rotate</code></h3><p>给图像应用色相旋转，”angle”一值设定图像会被调整的色环角度值。值为0deg，则图像无变化，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">120deg</span>);<span class=\"comment\">/*hue-rotate色相旋转*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">hue-rotate</span>(<span class=\"number\">120deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png\" alt></p>\n<h3 id=\"brightness\"><a href=\"#brightness\" class=\"headerlink\" title=\"brightness\"></a><code>brightness</code></h3><p>使图片看起来更亮或更暗。如果值是0%，图像会全黑。值是100%，则图像无变化。，值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">brightness</span>(<span class=\"number\">5</span>);<span class=\"comment\">/* brightness亮度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">brightness</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/brightness.png\" alt></p>\n<h3 id=\"contrast\"><a href=\"#contrast\" class=\"headerlink\" title=\"contrast\"></a><code>contrast</code></h3><p>调整图像的对比度，值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，默认是1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">contrast</span>(<span class=\"number\">30%</span>);<span class=\"comment\">/* contrast对比度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">contrast</span>(<span class=\"number\">30%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/contrast.png\" alt></p>\n<h3 id=\"blur\"><a href=\"#blur\" class=\"headerlink\" title=\"blur\"></a><code>blur</code></h3><p>给图像设置高斯模糊， 所以值越大越模糊；如果没有设定值，则默认是0；这个参数可设置css长度值，但不接受百分比值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">blur</span>(<span class=\"number\">10px</span>);<span class=\"comment\">/*blur模糊*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">blur</span>(<span class=\"number\">10px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/blur.png\" alt></p>\n<h3 id=\"drop-shadow-h-shadow-v-shadow-blur-spread-color\"><a href=\"#drop-shadow-h-shadow-v-shadow-blur-spread-color\" class=\"headerlink\" title=\"drop-shadow(h-shadow v-shadow blur spread color)\"></a><code>drop-shadow(h-shadow v-shadow blur spread color)</code></h3><p>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了”inset”关键字是不允许的。</shadow></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> <span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-filter</span>:<span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">5px</span> #<span class=\"number\">000</span>);<span class=\"comment\">/*drop-shadow阴影*/</span></span><br><span class=\"line\">  <span class=\"attribute\">filter</span>:<span class=\"built_in\">drop-shadow</span>(<span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">5px</span> #<span class=\"number\">000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/shadow.png\" alt></p>\n<p>参考资料：</p>\n<ul>\n<li><p><a href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/cssref/css3-pr-filter.html</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/css3/advanced-css-filters.html\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/css3/advanced-css-filters.html</a></p>\n</li>\n<li><p><a href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/css3/ten-effects-with-css3-filter</a></p>\n</li>\n</ul>\n"},{"title":"Flex 布局练习","comments":1,"description":"Flex 布局练习, position, float, display","date":"2016-04-01T13:14:10.000Z","keywords":"flex, css, position, float, display","_content":"\n在学flex布局时候，写的一个容器的属性练习：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/flex.png)\n\n 示例： [**点击查看**](http://www.hbbaly.com/wp-content/themes/blog/case/flex.html)","source":"_posts/css-3.md","raw":"---\ntitle: Flex 布局练习\ncomments: true\ndescription: Flex 布局练习, position, float, display\ntags: \"css\"\ndate: 2016-04-1 21:14:10\ncategories: \"css\"\nkeywords: flex, css, position, float, display\n---\n\n在学flex布局时候，写的一个容器的属性练习：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/flex.png)\n\n 示例： [**点击查看**](http://www.hbbaly.com/wp-content/themes/blog/case/flex.html)","slug":"css-3","published":1,"updated":"2020-12-02T06:49:34.113Z","layout":"post","photos":[],"link":"","_id":"cki71wak5000etl9kzmeolc7r","content":"<p>在学flex布局时候，写的一个容器的属性练习：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/flex.png\" alt></p>\n<p> 示例： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/flex.html\" target=\"_blank\" rel=\"noopener\"><strong>点击查看</strong></a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在学flex布局时候，写的一个容器的属性练习：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/flex.png\" alt></p>\n<p> 示例： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/flex.html\" target=\"_blank\" rel=\"noopener\"><strong>点击查看</strong></a></p>\n"},{"title":"Class 的继承","comments":1,"description":"Class 的继承","date":"2017-09-08T07:45:23.000Z","keywords":"ES6, Class,继承","_content":"\nclass 可以通过`extends`关键字实现继承。\n\n```js\nclass Point{}\nclass point extends Point{}\n```\n\n上面代码定义了一个`point`类，该类通过`extends`关键字，继承了`Point`类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个`Point`类。下面，我们在`point`内部加上代码。\n\n```js\nclass Point{\n    constructor(x,y,color){\n      this.x = x\n      this.y = y\n      this.color = color\n    }\n    toString(){\n      return this.color\n    }\n}\nclass point extends Point{\n    constructor(x,y,color){\n      super(x,y)  //调用父类的constructor(x, y)\n      this.color = color\n    }\n    toString(){\n      return this.color +' ' +super.toString()\n    }\n}\nconst p = new point(1,2,'red')\nconsole.log(p.toString())  //red,red\n```\n\n\n上面代码中，`constructor`方法和`toString`方法之中，都出现了`super`关键字，它在这里表示父类的构造函数，用来新建父类的`this`对象。\n\n子类必须在`constructor`方法中调用`super`方法，否则新建实例时会报错。这是因为子类没有自己的`this`对象，而是继承父类的`this`对象，然后对其进行加工。如果不调用`super`方法，子类就得不到`this`对象。在子类的构造函数中，只有调用`super`之后，才可以使用`this`关键字，否则会报错。\n\n`ES5` 的继承，实质是先创造子类的实例对象`this`，然后再将父类的方法添加到`this`上面（Parent.apply(this)）。`ES6` 的继承机制完全不同，实质是先创造父类的实例对象`this`（所以必须先调用super方法），然后再用子类的构造函数修改`this`。\n\n## super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。\n\n```js\nclass point extends Point{\n    constructor(x,y,color){\n//作为函数调用\n       super(x,y)  //调用父类的constructor(x, y)\n        this.color = color\n    }\n    toString(){\n        return this.color +' ' +super.toString()\n    }\n}\n```\n\nsuper虽然代表了父类`Point`的构造函数，但是返回的是子类`point`的实例，即`super`内部的`this`指的是 `point`，因此`super()`在这里相当于\n`Point.prototype.constructor.call(this)`。\n\n```js \nclass A{\n    constructor(){\n        console.log(new.target.name)\n    }\n}\nclass B extends A{\n    constructor(){\n      super()\n    }\n}\nconsole.log(new A())  //A\nconsole.log(new B())  //B\n```\n\n上面代码中，`new.target`指向当前正在执行的函数。可以看到，在`super()`执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，`super()`内部的this指向的是B。\n\n```js\nclass A{\n    constructor(){\n        this.x = 1\n    }\n    toString(){\n        console.log(this.x)\n    }\n}\nclass B extends A{\n    constructor(){\n        super()\n        this.x = 2\n    }\n    m(){\n        console.log(this.toString())\n    }\n}\nconst b = new B()\nconsole.log(b.m())   //2\n```\n\n上面代码中，`super.m()`虽然调用的是`A.prototype.toString()`，但是`A.prototype.toString()`内部的`this`指向子类B，导致输出的是2，而不是1。也就是说，实际上执行的是`super.toString.call(this)`。\n\n作为函数时，`super()`只能用在子类的构造函数之中，用在其他地方就会报错。\n\n第二种情况，`super`作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n\n这里的`return this.color +' ' +super.toString()`之中的`super.toString()`就是把super当做对象来使用的，指向父类的原型对象（也就是`Point.prototype`）,`super.toString()`也就是指向`Point.prototype.toString()`。\n\n```js\nclass A{\n    constructor(){\n        this.x = 1\n    }\n}\nclass B extends A{\n    constructor(){\n         super()\n         this.x = 2\n         super.x = 3\n         console.log(this.x)  //3\n         console.log(super.x)  //undefined\n    }\n}\nconst b = new B()\n```\n\n`super.x`赋值为3，这时等同于对`this.x`赋值为3。\n\n而当读取`super.x`的时候，读的是`A.prototype.x`，所以返回`undefined`。\n\n## Object.getPrototypeOf()\n\n`Object.getPrototypeOf`方法可以用来从子类上获取父类。\n\n```js\nclass A{}\nclass B extends A{}\nconsole.log(Object.getPrototypeOf(B))   //class A{}\nconsole.log(Object.getPrototypeOf(B) === A)   //true\n```\n\n## 类的 prototype 属性和__proto__属性\n\n大多数浏览器的 ES5 实现之中，每一个对象都有`__proto__`属性，指向对应的构造函数的`prototype`属性。`Class` 作为构造函数的语法糖，同时有`prototype`属性和`__proto__`属性，因此同时存在两条继承链。\n\n（1）子类的`__proto__`属性，表示构造函数的继承，总是指向父类。\n\n（2）子类`prototype`属性的`__proto__`属性，表示方法的继承，总是指向父类的`prototype`属性。\n\n```js\nclass A{}\nclass B extends A{}\nconsole.log(B.__proto__ === A)   //true\nconsole.log(B.prototype.__proto__ ==A.prototype)   //true\n```\n\n上面代码中，子类B的`__proto__`属性指向父类A，子类B的`prototype`属性的`__proto__`属性指向父类A的`prototype`属性。\n\n类的继承是按照下面的模式实现的。\n\n  `Object.setPrototypeOf(obj, prototype)` \n  obj要设置其原型的对象。`.prototype`该对象的新原型(一个对象 或 null).\n\n```js\nclass A{}\nclass B extends A{}\nObject.setPrototypeOf(B,A)\nObject.setPrototypeOf(B.prototype,A.prototype)\n```\n\n## 实例的 __proto__ 属性\n\n\n子类的原型的原型，是父类的原型。\n\n```js\nclass A{}\nclass B extends A{}\nb.__proto__.__proto__ ===A.__proto__    //true\n \n\nclass A{}\nclass B extends A{}\nconsole.log(B.__proto__.__proto__ ===A.__proto__)    //true\nB.__proto__.__proto__.m = function(){\n    console.log(1)\n}\nA.m()  //1\n````\n\n上面代码可以看出，通过子类实例的`__proto__.__proto__`属性，可以修改父类实例的行为。","source":"_posts/es6-11.md","raw":"---\ntitle: Class 的继承\ncomments: true\ndescription: Class 的继承\ntags: \"ES6\"\ndate: 2017-09-08 15:45:23\ncategories: \"ES6\"\nkeywords: ES6, Class,继承\n---\n\nclass 可以通过`extends`关键字实现继承。\n\n```js\nclass Point{}\nclass point extends Point{}\n```\n\n上面代码定义了一个`point`类，该类通过`extends`关键字，继承了`Point`类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个`Point`类。下面，我们在`point`内部加上代码。\n\n```js\nclass Point{\n    constructor(x,y,color){\n      this.x = x\n      this.y = y\n      this.color = color\n    }\n    toString(){\n      return this.color\n    }\n}\nclass point extends Point{\n    constructor(x,y,color){\n      super(x,y)  //调用父类的constructor(x, y)\n      this.color = color\n    }\n    toString(){\n      return this.color +' ' +super.toString()\n    }\n}\nconst p = new point(1,2,'red')\nconsole.log(p.toString())  //red,red\n```\n\n\n上面代码中，`constructor`方法和`toString`方法之中，都出现了`super`关键字，它在这里表示父类的构造函数，用来新建父类的`this`对象。\n\n子类必须在`constructor`方法中调用`super`方法，否则新建实例时会报错。这是因为子类没有自己的`this`对象，而是继承父类的`this`对象，然后对其进行加工。如果不调用`super`方法，子类就得不到`this`对象。在子类的构造函数中，只有调用`super`之后，才可以使用`this`关键字，否则会报错。\n\n`ES5` 的继承，实质是先创造子类的实例对象`this`，然后再将父类的方法添加到`this`上面（Parent.apply(this)）。`ES6` 的继承机制完全不同，实质是先创造父类的实例对象`this`（所以必须先调用super方法），然后再用子类的构造函数修改`this`。\n\n## super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。\n\n```js\nclass point extends Point{\n    constructor(x,y,color){\n//作为函数调用\n       super(x,y)  //调用父类的constructor(x, y)\n        this.color = color\n    }\n    toString(){\n        return this.color +' ' +super.toString()\n    }\n}\n```\n\nsuper虽然代表了父类`Point`的构造函数，但是返回的是子类`point`的实例，即`super`内部的`this`指的是 `point`，因此`super()`在这里相当于\n`Point.prototype.constructor.call(this)`。\n\n```js \nclass A{\n    constructor(){\n        console.log(new.target.name)\n    }\n}\nclass B extends A{\n    constructor(){\n      super()\n    }\n}\nconsole.log(new A())  //A\nconsole.log(new B())  //B\n```\n\n上面代码中，`new.target`指向当前正在执行的函数。可以看到，在`super()`执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，`super()`内部的this指向的是B。\n\n```js\nclass A{\n    constructor(){\n        this.x = 1\n    }\n    toString(){\n        console.log(this.x)\n    }\n}\nclass B extends A{\n    constructor(){\n        super()\n        this.x = 2\n    }\n    m(){\n        console.log(this.toString())\n    }\n}\nconst b = new B()\nconsole.log(b.m())   //2\n```\n\n上面代码中，`super.m()`虽然调用的是`A.prototype.toString()`，但是`A.prototype.toString()`内部的`this`指向子类B，导致输出的是2，而不是1。也就是说，实际上执行的是`super.toString.call(this)`。\n\n作为函数时，`super()`只能用在子类的构造函数之中，用在其他地方就会报错。\n\n第二种情况，`super`作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n\n这里的`return this.color +' ' +super.toString()`之中的`super.toString()`就是把super当做对象来使用的，指向父类的原型对象（也就是`Point.prototype`）,`super.toString()`也就是指向`Point.prototype.toString()`。\n\n```js\nclass A{\n    constructor(){\n        this.x = 1\n    }\n}\nclass B extends A{\n    constructor(){\n         super()\n         this.x = 2\n         super.x = 3\n         console.log(this.x)  //3\n         console.log(super.x)  //undefined\n    }\n}\nconst b = new B()\n```\n\n`super.x`赋值为3，这时等同于对`this.x`赋值为3。\n\n而当读取`super.x`的时候，读的是`A.prototype.x`，所以返回`undefined`。\n\n## Object.getPrototypeOf()\n\n`Object.getPrototypeOf`方法可以用来从子类上获取父类。\n\n```js\nclass A{}\nclass B extends A{}\nconsole.log(Object.getPrototypeOf(B))   //class A{}\nconsole.log(Object.getPrototypeOf(B) === A)   //true\n```\n\n## 类的 prototype 属性和__proto__属性\n\n大多数浏览器的 ES5 实现之中，每一个对象都有`__proto__`属性，指向对应的构造函数的`prototype`属性。`Class` 作为构造函数的语法糖，同时有`prototype`属性和`__proto__`属性，因此同时存在两条继承链。\n\n（1）子类的`__proto__`属性，表示构造函数的继承，总是指向父类。\n\n（2）子类`prototype`属性的`__proto__`属性，表示方法的继承，总是指向父类的`prototype`属性。\n\n```js\nclass A{}\nclass B extends A{}\nconsole.log(B.__proto__ === A)   //true\nconsole.log(B.prototype.__proto__ ==A.prototype)   //true\n```\n\n上面代码中，子类B的`__proto__`属性指向父类A，子类B的`prototype`属性的`__proto__`属性指向父类A的`prototype`属性。\n\n类的继承是按照下面的模式实现的。\n\n  `Object.setPrototypeOf(obj, prototype)` \n  obj要设置其原型的对象。`.prototype`该对象的新原型(一个对象 或 null).\n\n```js\nclass A{}\nclass B extends A{}\nObject.setPrototypeOf(B,A)\nObject.setPrototypeOf(B.prototype,A.prototype)\n```\n\n## 实例的 __proto__ 属性\n\n\n子类的原型的原型，是父类的原型。\n\n```js\nclass A{}\nclass B extends A{}\nb.__proto__.__proto__ ===A.__proto__    //true\n \n\nclass A{}\nclass B extends A{}\nconsole.log(B.__proto__.__proto__ ===A.__proto__)    //true\nB.__proto__.__proto__.m = function(){\n    console.log(1)\n}\nA.m()  //1\n````\n\n上面代码可以看出，通过子类实例的`__proto__.__proto__`属性，可以修改父类实例的行为。","slug":"es6-11","published":1,"updated":"2020-12-02T06:49:34.115Z","layout":"post","photos":[],"link":"","_id":"cki71wak7000ftl9klyoa45xp","content":"<p>class 可以通过<code>extends</code>关键字实现继承。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码定义了一个<code>point</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>point</code>内部加上代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(x,y)  <span class=\"comment\">//调用父类的constructor(x, y)</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color +<span class=\"string\">' '</span> +<span class=\"keyword\">super</span>.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> point(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'red'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.toString())  <span class=\"comment\">//red,red</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的<code>this</code>对象。</p>\n<p>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。</p>\n<p><code>ES5</code> 的继承，实质是先创造子类的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（Parent.apply(this)）。<code>ES6</code> 的继承机制完全不同，实质是先创造父类的实例对象<code>this</code>（所以必须先调用super方法），然后再用子类的构造函数修改<code>this</code>。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>\n<p>第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\"><span class=\"comment\">//作为函数调用</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(x,y)  <span class=\"comment\">//调用父类的constructor(x, y)</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color +<span class=\"string\">' '</span> +<span class=\"keyword\">super</span>.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>super虽然代表了父类<code>Point</code>的构造函数，但是返回的是子类<code>point</code>的实例，即<code>super</code>内部的<code>this</code>指的是 <code>point</code>，因此<code>super()</code>在这里相当于<br><code>Point.prototype.constructor.call(this)</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> A())  <span class=\"comment\">//A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> B())  <span class=\"comment\">//B</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>new.target</code>指向当前正在执行的函数。可以看到，在<code>super()</code>执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，<code>super()</code>内部的this指向的是B。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> B()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.m())   <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>super.m()</code>虽然调用的是<code>A.prototype.toString()</code>，但是<code>A.prototype.toString()</code>内部的<code>this</code>指向子类B，导致输出的是2，而不是1。也就是说，实际上执行的是<code>super.toString.call(this)</code>。</p>\n<p>作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p>\n<p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>\n<p>这里的<code>return this.color +&#39; &#39; +super.toString()</code>之中的<code>super.toString()</code>就是把super当做对象来使用的，指向父类的原型对象（也就是<code>Point.prototype</code>）,<code>super.toString()</code>也就是指向<code>Point.prototype.toString()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">         <span class=\"keyword\">super</span>()</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span></span><br><span class=\"line\">         <span class=\"keyword\">super</span>.x = <span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)  <span class=\"comment\">//3</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> B()</span><br></pre></td></tr></table></figure>\n\n<p><code>super.x</code>赋值为3，这时等同于对<code>this.x</code>赋值为3。</p>\n<p>而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p>\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf()\"></a>Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(B))   <span class=\"comment\">//class A&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(B) === A)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的-prototype-属性和proto属性\"><a href=\"#类的-prototype-属性和proto属性\" class=\"headerlink\" title=\"类的 prototype 属性和proto属性\"></a>类的 prototype 属性和<strong>proto</strong>属性</h2><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。<code>Class</code> 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p>\n<p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p>\n<p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.__proto__ === A)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.prototype.__proto__ ==A.prototype)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，子类B的<code>__proto__</code>属性指向父类A，子类B的<code>prototype</code>属性的<code>__proto__</code>属性指向父类A的<code>prototype</code>属性。</p>\n<p>类的继承是按照下面的模式实现的。</p>\n<p>  <code>Object.setPrototypeOf(obj, prototype)</code><br>  obj要设置其原型的对象。<code>.prototype</code>该对象的新原型(一个对象 或 null).</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(B,A)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(B.prototype,A.prototype)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例的-proto-属性\"><a href=\"#实例的-proto-属性\" class=\"headerlink\" title=\"实例的 proto 属性\"></a>实例的 <strong>proto</strong> 属性</h2><p>子类的原型的原型，是父类的原型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\">b.__proto__.__proto__ ===A.__proto__    <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.__proto__.__proto__ ===A.__proto__)    <span class=\"comment\">//true</span></span><br><span class=\"line\">B.__proto__.__proto__.m = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.m()  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以看出，通过子类实例的<code>__proto__.__proto__</code>属性，可以修改父类实例的行为。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>class 可以通过<code>extends</code>关键字实现继承。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码定义了一个<code>point</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>point</code>内部加上代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(x,y)  <span class=\"comment\">//调用父类的constructor(x, y)</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color +<span class=\"string\">' '</span> +<span class=\"keyword\">super</span>.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> point(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'red'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.toString())  <span class=\"comment\">//red,red</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的<code>this</code>对象。</p>\n<p>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。</p>\n<p><code>ES5</code> 的继承，实质是先创造子类的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（Parent.apply(this)）。<code>ES6</code> 的继承机制完全不同，实质是先创造父类的实例对象<code>this</code>（所以必须先调用super方法），然后再用子类的构造函数修改<code>this</code>。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>\n<p>第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">point</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(x,y,color)&#123;</span><br><span class=\"line\"><span class=\"comment\">//作为函数调用</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>(x,y)  <span class=\"comment\">//调用父类的constructor(x, y)</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color +<span class=\"string\">' '</span> +<span class=\"keyword\">super</span>.toString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>super虽然代表了父类<code>Point</code>的构造函数，但是返回的是子类<code>point</code>的实例，即<code>super</code>内部的<code>this</code>指的是 <code>point</code>，因此<code>super()</code>在这里相当于<br><code>Point.prototype.constructor.call(this)</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> A())  <span class=\"comment\">//A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> B())  <span class=\"comment\">//B</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>new.target</code>指向当前正在执行的函数。可以看到，在<code>super()</code>执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，<code>super()</code>内部的this指向的是B。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> B()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.m())   <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>super.m()</code>虽然调用的是<code>A.prototype.toString()</code>，但是<code>A.prototype.toString()</code>内部的<code>this</code>指向子类B，导致输出的是2，而不是1。也就是说，实际上执行的是<code>super.toString.call(this)</code>。</p>\n<p>作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p>\n<p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>\n<p>这里的<code>return this.color +&#39; &#39; +super.toString()</code>之中的<code>super.toString()</code>就是把super当做对象来使用的，指向父类的原型对象（也就是<code>Point.prototype</code>）,<code>super.toString()</code>也就是指向<code>Point.prototype.toString()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">         <span class=\"keyword\">super</span>()</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span></span><br><span class=\"line\">         <span class=\"keyword\">super</span>.x = <span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)  <span class=\"comment\">//3</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> B()</span><br></pre></td></tr></table></figure>\n\n<p><code>super.x</code>赋值为3，这时等同于对<code>this.x</code>赋值为3。</p>\n<p>而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p>\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf()\"></a>Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(B))   <span class=\"comment\">//class A&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(B) === A)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的-prototype-属性和proto属性\"><a href=\"#类的-prototype-属性和proto属性\" class=\"headerlink\" title=\"类的 prototype 属性和proto属性\"></a>类的 prototype 属性和<strong>proto</strong>属性</h2><p>大多数浏览器的 ES5 实现之中，每一个对象都有<code>__proto__</code>属性，指向对应的构造函数的<code>prototype</code>属性。<code>Class</code> 作为构造函数的语法糖，同时有<code>prototype</code>属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p>\n<p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</p>\n<p>（2）子类<code>prototype</code>属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.__proto__ === A)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.prototype.__proto__ ==A.prototype)   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，子类B的<code>__proto__</code>属性指向父类A，子类B的<code>prototype</code>属性的<code>__proto__</code>属性指向父类A的<code>prototype</code>属性。</p>\n<p>类的继承是按照下面的模式实现的。</p>\n<p>  <code>Object.setPrototypeOf(obj, prototype)</code><br>  obj要设置其原型的对象。<code>.prototype</code>该对象的新原型(一个对象 或 null).</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(B,A)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(B.prototype,A.prototype)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例的-proto-属性\"><a href=\"#实例的-proto-属性\" class=\"headerlink\" title=\"实例的 proto 属性\"></a>实例的 <strong>proto</strong> 属性</h2><p>子类的原型的原型，是父类的原型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\">b.__proto__.__proto__ ===A.__proto__    <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B.__proto__.__proto__ ===A.__proto__)    <span class=\"comment\">//true</span></span><br><span class=\"line\">B.__proto__.__proto__.m = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.m()  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以看出，通过子类实例的<code>__proto__.__proto__</code>属性，可以修改父类实例的行为。</p>\n"},{"title":"Module 的语法","comments":1,"description":"Module 的语法","date":"2017-09-28T02:45:23.000Z","keywords":"ES6, Module","_content":"\nES6 的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\";。\n\n严格模式主要有以下限制。\n\n变量必须声明后再使用函数的参数不能有同名属性，否则报错\n\n不能使用with语句不能对只读属性赋值，否则报错\n\n不能使用前缀 0 表示八进制数，否则报错\n\n不能删除不可删除的属性，否则报错\n\n不能删除变量`delete prop`，会报错，只能删除属性`delete global[prop]eval`不会在它的外层作用域引入变量\n\n`eval`和`arguments`不能被重新赋值\n\n`arguments`不会自动反映函数参数的变化\n\n不能使用`arguments.callee`\n\n不能使用`arguments.caller`\n\n禁止`this`指向全局对象\n\n不能使用`fn.caller`和`fn.arguments`获取函数调用的堆栈增加了保留字（比如`protected、static`和`interface`）\n\n## export 命令\n\n模块的功能主要由两个命令构成，`export`与`import`。`export`用于规定模块的对外接口，import命令用于输入其他模块提供功能。\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用`export`关键字输出该变量。下面是一个 JS 文件，里面使用`export`命令输出变量。\n\n```js\n// util.js\nexport const name = 'hbb';\nexport const age = 20;\n//也可以这样写：\nconst[name,age] = ['hbb',20];\nexport  {name,age};\n```\n\n上面代码用`export`命令输出两个变量，后面哪一种情况，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。\n\n`export`命令除了输出变量，还可以输出函数或类（class）。\n\n`export`输出的变量就是本来的名字，但是可以使用as关键字重命名。\n\n```js\nfunction name(){}\nfunction age(){}\nexport  {\n    name as NAME,\n    age as AGE\n};\n```\n\n上面代码中，使用as对`name`函数与`age`函数进行了重命名，重命名后，可以用不同的名字输出两次。\n\n`export`写法\n\n```js\n//第一种写法：\nconst a = 'name'\nfunction name(){}\nexport {a,name}\n//第二种写法：\nexport const a = 'name'\nexport function name(){}\n//第三种写法：\nexport {\n    a as b,\n    name as NAME\n}\n```\n\n`export`命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，`import`命令也是如此。\n\n## import 命令\n\n使用`export`命令定义了模块的对外接口以后，其他 JS 文件就可以通过`import`命令加载这个模块。\n\n```js\n//index.js\nimport {name,age} from './util.js'\nconsole.log(name,age)\n```\n\n`import`命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（`util.js`）对外接口的名称相同。\n\n`import`命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。\n\n```js\nimport {name,age} from './util.js'\nname = 'ly'  //Syntax Error : 'name' is read-only;\n```\n\n上面代码中那么不能被改写，会报错。如果`name`是一个对象，改写`name`的属性是允许的。\n\n`import`后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。\n\n`import`命令具有提升效果，会提升到整个模块的头部，首先执行。\n\n```js\nconsole.log(name,age)\nimport {name,age} from './util.js'\n```\n上面代码不会报错，因为`console.log（name，age）`会在`import`之后执行。\n\n如果多次重复执行同一句`import`语句，那么只会执行一次，而不会执行多次。\n\n## 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n```js\n//util.js\nfunction name(){console.log('name')}\nfunction age(){console.log('age')}\nexport  {\n    name ,\n    age\n};\n//index.js\nimport * as fun from './util.js'\nconsole.log(fun.name(),fun.age())\n```\n\n## export default 命令\n\n`export default`命令，为模块指定默认输出。\n\n```js\nfunction name(){console.log('name')}\n//huo这些成\nconst name = function(){\n    console.log('name')\n}\nexport default name\n//index.js\nimport fun from './util.js'\nfun()  //'name'\n```\n\n上面代码的`import`命令，可以用任意名称指向`util.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n`export default`时，对应的`import`语句不需要使用大括号,`export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。\n\n5.export 与 import 的复合写法\n如果在一个模块之中，先输入后输出同一个模块，`import`语句可以与`export`语句写在一起。\n\n```js\nexport {name,age} from './util.js'\n//可以这样理解：\nimport {name,age} from './util.js'\nexport {name,age}\n```\n\n`export`和`import`语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用name和age。\n\n模块的接口改名和整体输出，也可以采用这种写法。\n\n```js\n//借口改名\nexport {name as NAME,age as AGE} from './util.js'\n//整体输出：\nexport * from './util.js'\n```\n","source":"_posts/es6-12.md","raw":"---\ntitle: Module 的语法\ncomments: true\ndescription: Module 的语法\ntags: \"ES6\"\ndate: 2017-09-28 10:45:23\ncategories: \"ES6\"\nkeywords: ES6, Module\n---\n\nES6 的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\";。\n\n严格模式主要有以下限制。\n\n变量必须声明后再使用函数的参数不能有同名属性，否则报错\n\n不能使用with语句不能对只读属性赋值，否则报错\n\n不能使用前缀 0 表示八进制数，否则报错\n\n不能删除不可删除的属性，否则报错\n\n不能删除变量`delete prop`，会报错，只能删除属性`delete global[prop]eval`不会在它的外层作用域引入变量\n\n`eval`和`arguments`不能被重新赋值\n\n`arguments`不会自动反映函数参数的变化\n\n不能使用`arguments.callee`\n\n不能使用`arguments.caller`\n\n禁止`this`指向全局对象\n\n不能使用`fn.caller`和`fn.arguments`获取函数调用的堆栈增加了保留字（比如`protected、static`和`interface`）\n\n## export 命令\n\n模块的功能主要由两个命令构成，`export`与`import`。`export`用于规定模块的对外接口，import命令用于输入其他模块提供功能。\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用`export`关键字输出该变量。下面是一个 JS 文件，里面使用`export`命令输出变量。\n\n```js\n// util.js\nexport const name = 'hbb';\nexport const age = 20;\n//也可以这样写：\nconst[name,age] = ['hbb',20];\nexport  {name,age};\n```\n\n上面代码用`export`命令输出两个变量，后面哪一种情况，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。\n\n`export`命令除了输出变量，还可以输出函数或类（class）。\n\n`export`输出的变量就是本来的名字，但是可以使用as关键字重命名。\n\n```js\nfunction name(){}\nfunction age(){}\nexport  {\n    name as NAME,\n    age as AGE\n};\n```\n\n上面代码中，使用as对`name`函数与`age`函数进行了重命名，重命名后，可以用不同的名字输出两次。\n\n`export`写法\n\n```js\n//第一种写法：\nconst a = 'name'\nfunction name(){}\nexport {a,name}\n//第二种写法：\nexport const a = 'name'\nexport function name(){}\n//第三种写法：\nexport {\n    a as b,\n    name as NAME\n}\n```\n\n`export`命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，`import`命令也是如此。\n\n## import 命令\n\n使用`export`命令定义了模块的对外接口以后，其他 JS 文件就可以通过`import`命令加载这个模块。\n\n```js\n//index.js\nimport {name,age} from './util.js'\nconsole.log(name,age)\n```\n\n`import`命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（`util.js`）对外接口的名称相同。\n\n`import`命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。\n\n```js\nimport {name,age} from './util.js'\nname = 'ly'  //Syntax Error : 'name' is read-only;\n```\n\n上面代码中那么不能被改写，会报错。如果`name`是一个对象，改写`name`的属性是允许的。\n\n`import`后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。\n\n`import`命令具有提升效果，会提升到整个模块的头部，首先执行。\n\n```js\nconsole.log(name,age)\nimport {name,age} from './util.js'\n```\n上面代码不会报错，因为`console.log（name，age）`会在`import`之后执行。\n\n如果多次重复执行同一句`import`语句，那么只会执行一次，而不会执行多次。\n\n## 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n```js\n//util.js\nfunction name(){console.log('name')}\nfunction age(){console.log('age')}\nexport  {\n    name ,\n    age\n};\n//index.js\nimport * as fun from './util.js'\nconsole.log(fun.name(),fun.age())\n```\n\n## export default 命令\n\n`export default`命令，为模块指定默认输出。\n\n```js\nfunction name(){console.log('name')}\n//huo这些成\nconst name = function(){\n    console.log('name')\n}\nexport default name\n//index.js\nimport fun from './util.js'\nfun()  //'name'\n```\n\n上面代码的`import`命令，可以用任意名称指向`util.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n`export default`时，对应的`import`语句不需要使用大括号,`export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。\n\n5.export 与 import 的复合写法\n如果在一个模块之中，先输入后输出同一个模块，`import`语句可以与`export`语句写在一起。\n\n```js\nexport {name,age} from './util.js'\n//可以这样理解：\nimport {name,age} from './util.js'\nexport {name,age}\n```\n\n`export`和`import`语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用name和age。\n\n模块的接口改名和整体输出，也可以采用这种写法。\n\n```js\n//借口改名\nexport {name as NAME,age as AGE} from './util.js'\n//整体输出：\nexport * from './util.js'\n```\n","slug":"es6-12","published":1,"updated":"2020-12-02T06:49:34.116Z","layout":"post","photos":[],"link":"","_id":"cki71wak8000jtl9k5soyziwi","content":"<p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p>\n<p>严格模式主要有以下限制。</p>\n<p>变量必须声明后再使用函数的参数不能有同名属性，否则报错</p>\n<p>不能使用with语句不能对只读属性赋值，否则报错</p>\n<p>不能使用前缀 0 表示八进制数，否则报错</p>\n<p>不能删除不可删除的属性，否则报错</p>\n<p>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]eval</code>不会在它的外层作用域引入变量</p>\n<p><code>eval</code>和<code>arguments</code>不能被重新赋值</p>\n<p><code>arguments</code>不会自动反映函数参数的变化</p>\n<p>不能使用<code>arguments.callee</code></p>\n<p>不能使用<code>arguments.caller</code></p>\n<p>禁止<code>this</code>指向全局对象</p>\n<p>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈增加了保留字（比如<code>protected、static</code>和<code>interface</code>）</p>\n<h2 id=\"export-命令\"><a href=\"#export-命令\" class=\"headerlink\" title=\"export 命令\"></a>export 命令</h2><p>模块的功能主要由两个命令构成，<code>export</code>与<code>import</code>。<code>export</code>用于规定模块的对外接口，import命令用于输入其他模块提供功能。</p>\n<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">//也可以这样写：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>[name,age] = [<span class=\"string\">'hbb'</span>,<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;name,age&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码用<code>export</code>命令输出两个变量，后面哪一种情况，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。</p>\n<p><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</p>\n<p><code>export</code>输出的变量就是本来的名字，但是可以使用as关键字重命名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">age</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">as</span> NAME,</span><br><span class=\"line\">    age <span class=\"keyword\">as</span> AGE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，使用as对<code>name</code>函数与<code>age</code>函数进行了重命名，重命名后，可以用不同的名字输出两次。</p>\n<p><code>export</code>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a,name&#125;</span><br><span class=\"line\"><span class=\"comment\">//第二种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//第三种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    a <span class=\"keyword\">as</span> b,</span><br><span class=\"line\">    name <span class=\"keyword\">as</span> NAME</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export</code>命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，<code>import</code>命令也是如此。</p>\n<h2 id=\"import-命令\"><a href=\"#import-命令\" class=\"headerlink\" title=\"import 命令\"></a>import 命令</h2><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name,age)</span><br></pre></td></tr></table></figure>\n\n<p><code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>util.js</code>）对外接口的名称相同。</p>\n<p><code>import</code>命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\">name = <span class=\"string\">'ly'</span>  <span class=\"comment\">//Syntax Error : 'name' is read-only;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中那么不能被改写，会报错。如果<code>name</code>是一个对象，改写<code>name</code>的属性是允许的。</p>\n<p><code>import</code>后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。</p>\n<p><code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(name,age)</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码不会报错，因为<code>console.log（name，age）</code>会在<code>import</code>之后执行。</p>\n<p>如果多次重复执行同一句<code>import</code>语句，那么只会执行一次，而不会执行多次。</p>\n<h2 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//util.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">age</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'age'</span>)&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;</span><br><span class=\"line\">    name ,</span><br><span class=\"line\">    age</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fun <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.name(),fun.age())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"export-default-命令\"><a href=\"#export-default-命令\" class=\"headerlink\" title=\"export default 命令\"></a>export default 命令</h2><p><code>export default</code>命令，为模块指定默认输出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)&#125;</span><br><span class=\"line\"><span class=\"comment\">//huo这些成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> name</span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fun <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\">fun()  <span class=\"comment\">//'name'</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>util.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p><code>export default</code>时，对应的<code>import</code>语句不需要使用大括号,<code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。</p>\n<p>5.export 与 import 的复合写法<br>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"comment\">//可以这样理解：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用name和age。</p>\n<p>模块的接口改名和整体输出，也可以采用这种写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//借口改名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name <span class=\"keyword\">as</span> NAME,age <span class=\"keyword\">as</span> AGE&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"comment\">//整体输出：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p>\n<p>严格模式主要有以下限制。</p>\n<p>变量必须声明后再使用函数的参数不能有同名属性，否则报错</p>\n<p>不能使用with语句不能对只读属性赋值，否则报错</p>\n<p>不能使用前缀 0 表示八进制数，否则报错</p>\n<p>不能删除不可删除的属性，否则报错</p>\n<p>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]eval</code>不会在它的外层作用域引入变量</p>\n<p><code>eval</code>和<code>arguments</code>不能被重新赋值</p>\n<p><code>arguments</code>不会自动反映函数参数的变化</p>\n<p>不能使用<code>arguments.callee</code></p>\n<p>不能使用<code>arguments.caller</code></p>\n<p>禁止<code>this</code>指向全局对象</p>\n<p>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈增加了保留字（比如<code>protected、static</code>和<code>interface</code>）</p>\n<h2 id=\"export-命令\"><a href=\"#export-命令\" class=\"headerlink\" title=\"export 命令\"></a>export 命令</h2><p>模块的功能主要由两个命令构成，<code>export</code>与<code>import</code>。<code>export</code>用于规定模块的对外接口，import命令用于输入其他模块提供功能。</p>\n<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">//也可以这样写：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>[name,age] = [<span class=\"string\">'hbb'</span>,<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;name,age&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码用<code>export</code>命令输出两个变量，后面哪一种情况，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。</p>\n<p><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</p>\n<p><code>export</code>输出的变量就是本来的名字，但是可以使用as关键字重命名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">age</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">as</span> NAME,</span><br><span class=\"line\">    age <span class=\"keyword\">as</span> AGE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，使用as对<code>name</code>函数与<code>age</code>函数进行了重命名，重命名后，可以用不同的名字输出两次。</p>\n<p><code>export</code>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a,name&#125;</span><br><span class=\"line\"><span class=\"comment\">//第二种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"string\">'name'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//第三种写法：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    a <span class=\"keyword\">as</span> b,</span><br><span class=\"line\">    name <span class=\"keyword\">as</span> NAME</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export</code>命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，<code>import</code>命令也是如此。</p>\n<h2 id=\"import-命令\"><a href=\"#import-命令\" class=\"headerlink\" title=\"import 命令\"></a>import 命令</h2><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name,age)</span><br></pre></td></tr></table></figure>\n\n<p><code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>util.js</code>）对外接口的名称相同。</p>\n<p><code>import</code>命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\">name = <span class=\"string\">'ly'</span>  <span class=\"comment\">//Syntax Error : 'name' is read-only;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中那么不能被改写，会报错。如果<code>name</code>是一个对象，改写<code>name</code>的属性是允许的。</p>\n<p><code>import</code>后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。</p>\n<p><code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(name,age)</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码不会报错，因为<code>console.log（name，age）</code>会在<code>import</code>之后执行。</p>\n<p>如果多次重复执行同一句<code>import</code>语句，那么只会执行一次，而不会执行多次。</p>\n<h2 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//util.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">age</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'age'</span>)&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  &#123;</span><br><span class=\"line\">    name ,</span><br><span class=\"line\">    age</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fun <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.name(),fun.age())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"export-default-命令\"><a href=\"#export-default-命令\" class=\"headerlink\" title=\"export default 命令\"></a>export default 命令</h2><p><code>export default</code>命令，为模块指定默认输出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)&#125;</span><br><span class=\"line\"><span class=\"comment\">//huo这些成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'name'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> name</span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fun <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\">fun()  <span class=\"comment\">//'name'</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>util.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p><code>export default</code>时，对应的<code>import</code>语句不需要使用大括号,<code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。</p>\n<p>5.export 与 import 的复合写法<br>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"comment\">//可以这样理解：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name,age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用name和age。</p>\n<p>模块的接口改名和整体输出，也可以采用这种写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//借口改名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name <span class=\"keyword\">as</span> NAME,age <span class=\"keyword\">as</span> AGE&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br><span class=\"line\"><span class=\"comment\">//整体输出：</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./util.js'</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"变量结构赋值","comments":1,"description":"结构赋值,ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。","date":"2017-04-03T11:12:20.000Z","keywords":"结构赋值, 对象, es6","_content":"\n## 结构赋值\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。\n\n比如在es5时候给多个变量赋值，我们这样：\n\n\n```js\nvar a = 1,\n    b = 2,\n    c = 3;\n```\n在es6中，我们可以这样：\n\n```js\nlet [a,b,c] = [1,2,3]\n```\n\n等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n```js\nlet [a, [b, c]] = [1, [2, 3]]\nconsole.log(a, b, c) //1,2,3\n\nlet [e, f, g] = [1, 2, 3, 4]\nconsole.log(e, f, g) //1,2,3\n\nlet [h, ...arr] = [1, 2, 3, 4]\nconsole.log(h, arr) //1,[2, 3, 4]\n\nlet [foo, bar, str] = ['a']\nconsole.log(foo, bar, str) //a,undefined,undefined\n//结构不成功，变量的值就为undefined。\n```\n## 允许使用默认值：\n\n```js\nlet [a, b = 1, c = 2] = [1, 4, 5]\nconsole.log(a, b, c) ///1,4,5\n\n//值得注意的是：undefined，null\nlet [d, e = 2] = [1, undefined]\nconsole.log(d, e) //1,2\n\nlet [f, g = 2] = [1, null]\nconsole.log(f, g) //1,null\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\nlet [a = 1, b = a] = []\nconsole.log(a, b) //1,1\n\nlet [c = 1, d = c] = [2]\nconsole.log(c, d) //2,2\n\nlet [e = 4, f = e] = [1, 2]\nconsole.log(e, f) //1,2\n```\n\n## 对象的解构赋值\n\n上面基本讲的都是数组，对象也可以使用解构赋值。\n\n```js\nlet { a, b } = { a: 'hbb', b: 'ly' }\nconsole.log(a, b) //'hbb,'ly'\n```\n\n数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。\n\n```js\nlet { a: c, b: d } = { a: 'hbb', b: 'ly' }\nconsole.log(c, d) //'hbb,'ly'\n```\n\n在上例中，变量是c与d,而a与b是属性。\n\n对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n对象也可以用于嵌套结构的对象和使用默认值，解构不成功为`undefined`\n\n```js\nlet x;\n{ x } = { x: 1 };  //Uncaught SyntaxError: Unexpected token =\n```\n\n`JavaScript` 引擎会将{x}理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 `JavaScript` 将其解释为代码块。\n\n```js\nlet x;\n({ x } = { x: 1 });    //不会报错\n```\n\n## 字符串的解构赋值。\n\n```js\nlet [a, b, c, d] = 'string'\nconsole.log(a, b, c, d)  //s,t,r,i\n```\n\n## 函数参数的解构赋值\n\n```js\nfunction add([x, y]) {\n    console.log(x, y)\n}\nadd([1, 2])  //1,2\n```\n\n函数参数的解构也可以使用默认值。\n\n```js\nfunction add([x = 3, y = 4]) {\n    console.log(x, y)\n}\nadd([1]) //1,4\n```\n\n\n推荐一本很好的书，对于ES6的学习很有帮助：[《ES6标准入门（第三版）》](http://es6.ruanyifeng.com/)","source":"_posts/es6-2.md","raw":"---\ntitle: 变量结构赋值\ncomments: true\ndescription: 结构赋值,ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。\ntags: \"ES6\"\ndate: 2017-04-3 19:12:20\ncategories: \"ES6\"\nkeywords: 结构赋值, 对象, es6\n---\n\n## 结构赋值\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。\n\n比如在es5时候给多个变量赋值，我们这样：\n\n\n```js\nvar a = 1,\n    b = 2,\n    c = 3;\n```\n在es6中，我们可以这样：\n\n```js\nlet [a,b,c] = [1,2,3]\n```\n\n等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n```js\nlet [a, [b, c]] = [1, [2, 3]]\nconsole.log(a, b, c) //1,2,3\n\nlet [e, f, g] = [1, 2, 3, 4]\nconsole.log(e, f, g) //1,2,3\n\nlet [h, ...arr] = [1, 2, 3, 4]\nconsole.log(h, arr) //1,[2, 3, 4]\n\nlet [foo, bar, str] = ['a']\nconsole.log(foo, bar, str) //a,undefined,undefined\n//结构不成功，变量的值就为undefined。\n```\n## 允许使用默认值：\n\n```js\nlet [a, b = 1, c = 2] = [1, 4, 5]\nconsole.log(a, b, c) ///1,4,5\n\n//值得注意的是：undefined，null\nlet [d, e = 2] = [1, undefined]\nconsole.log(d, e) //1,2\n\nlet [f, g = 2] = [1, null]\nconsole.log(f, g) //1,null\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\nlet [a = 1, b = a] = []\nconsole.log(a, b) //1,1\n\nlet [c = 1, d = c] = [2]\nconsole.log(c, d) //2,2\n\nlet [e = 4, f = e] = [1, 2]\nconsole.log(e, f) //1,2\n```\n\n## 对象的解构赋值\n\n上面基本讲的都是数组，对象也可以使用解构赋值。\n\n```js\nlet { a, b } = { a: 'hbb', b: 'ly' }\nconsole.log(a, b) //'hbb,'ly'\n```\n\n数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。\n\n```js\nlet { a: c, b: d } = { a: 'hbb', b: 'ly' }\nconsole.log(c, d) //'hbb,'ly'\n```\n\n在上例中，变量是c与d,而a与b是属性。\n\n对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n对象也可以用于嵌套结构的对象和使用默认值，解构不成功为`undefined`\n\n```js\nlet x;\n{ x } = { x: 1 };  //Uncaught SyntaxError: Unexpected token =\n```\n\n`JavaScript` 引擎会将{x}理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 `JavaScript` 将其解释为代码块。\n\n```js\nlet x;\n({ x } = { x: 1 });    //不会报错\n```\n\n## 字符串的解构赋值。\n\n```js\nlet [a, b, c, d] = 'string'\nconsole.log(a, b, c, d)  //s,t,r,i\n```\n\n## 函数参数的解构赋值\n\n```js\nfunction add([x, y]) {\n    console.log(x, y)\n}\nadd([1, 2])  //1,2\n```\n\n函数参数的解构也可以使用默认值。\n\n```js\nfunction add([x = 3, y = 4]) {\n    console.log(x, y)\n}\nadd([1]) //1,4\n```\n\n\n推荐一本很好的书，对于ES6的学习很有帮助：[《ES6标准入门（第三版）》](http://es6.ruanyifeng.com/)","slug":"es6-2","published":1,"updated":"2020-12-02T06:49:34.117Z","layout":"post","photos":[],"link":"","_id":"cki71waka000ltl9kakiidxb0","content":"<h2 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。</p>\n<p>比如在es5时候给多个变量赋值，我们这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"number\">2</span>,</span><br><span class=\"line\">    c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在es6中，我们可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, c]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e, f, g] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f, g) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [h, ...arr] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h, arr) <span class=\"comment\">//1,[2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar, str] = [<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, str) <span class=\"comment\">//a,undefined,undefined</span></span><br><span class=\"line\"><span class=\"comment\">//结构不成功，变量的值就为undefined。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许使用默认值：\"><a href=\"#允许使用默认值：\" class=\"headerlink\" title=\"允许使用默认值：\"></a>允许使用默认值：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">///1,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值得注意的是：undefined，null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [d, e = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d, e) <span class=\"comment\">//1,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [f, g = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f, g) <span class=\"comment\">//1,null</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b = a] = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//1,1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [c = <span class=\"number\">1</span>, d = c] = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//2,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e = <span class=\"number\">4</span>, f = e] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f) <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h2><p>上面基本讲的都是数组，对象也可以使用解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">a</span>: c, <span class=\"attr\">b</span>: d &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，变量是c与d,而a与b是属性。</p>\n<p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<p>对象也可以用于嵌套结构的对象和使用默认值，解构不成功为<code>undefined</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;;  <span class=\"comment\">//Uncaught SyntaxError: Unexpected token =</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JavaScript</code> 引擎会将{x}理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 <code>JavaScript</code> 将其解释为代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;);    <span class=\"comment\">//不会报错</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的解构赋值。\"><a href=\"#字符串的解构赋值。\" class=\"headerlink\" title=\"字符串的解构赋值。\"></a>字符串的解构赋值。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d)  <span class=\"comment\">//s,t,r,i</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x = <span class=\"number\">3</span>, y = <span class=\"number\">4</span>]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>]) <span class=\"comment\">//1,4</span></span><br></pre></td></tr></table></figure>\n\n<p>推荐一本很好的书，对于ES6的学习很有帮助：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ES6标准入门（第三版）》</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。</p>\n<p>比如在es5时候给多个变量赋值，我们这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"number\">2</span>,</span><br><span class=\"line\">    c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在es6中，我们可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, c]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e, f, g] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f, g) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [h, ...arr] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h, arr) <span class=\"comment\">//1,[2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar, str] = [<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, str) <span class=\"comment\">//a,undefined,undefined</span></span><br><span class=\"line\"><span class=\"comment\">//结构不成功，变量的值就为undefined。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许使用默认值：\"><a href=\"#允许使用默认值：\" class=\"headerlink\" title=\"允许使用默认值：\"></a>允许使用默认值：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">///1,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值得注意的是：undefined，null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [d, e = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d, e) <span class=\"comment\">//1,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [f, g = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f, g) <span class=\"comment\">//1,null</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b = a] = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//1,1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [c = <span class=\"number\">1</span>, d = c] = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//2,2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e = <span class=\"number\">4</span>, f = e] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f) <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h2><p>上面基本讲的都是数组，对象也可以使用解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">a</span>: c, <span class=\"attr\">b</span>: d &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，变量是c与d,而a与b是属性。</p>\n<p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<p>对象也可以用于嵌套结构的对象和使用默认值，解构不成功为<code>undefined</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;;  <span class=\"comment\">//Uncaught SyntaxError: Unexpected token =</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JavaScript</code> 引擎会将{x}理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 <code>JavaScript</code> 将其解释为代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;);    <span class=\"comment\">//不会报错</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的解构赋值。\"><a href=\"#字符串的解构赋值。\" class=\"headerlink\" title=\"字符串的解构赋值。\"></a>字符串的解构赋值。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d)  <span class=\"comment\">//s,t,r,i</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x = <span class=\"number\">3</span>, y = <span class=\"number\">4</span>]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>]) <span class=\"comment\">//1,4</span></span><br></pre></td></tr></table></figure>\n\n<p>推荐一本很好的书，对于ES6的学习很有帮助：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ES6标准入门（第三版）》</a></p>\n"},{"title":"数值的扩展","comments":1,"description":"数值的扩展","date":"2017-04-07T15:11:34.000Z","keywords":"数值的扩展","_content":"\n## 二进制和八进制表示法\n\n二进制与八进制分别用前缀0b（或0B）和0o（或0O）表示。\n\n```js\nconsole.log(0b101)   //5\nconsole.log(0o101)  //65\n```\n\n如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。\n\n```js\nconsole.log(Number(0b101))  //5\nconsole.log(Number(0o101))  //65\n```\n\n## Number.isFinite()\n\n`Number.isFinite()`用来检查一个数值是否为有限的（`finite`），即不是`Infinity`,只对数值有效，非数值一律返回`false`\n\n```js\nconsole.log(Number.isFinite(5.22222))  //true\nconsole.log(Number.isFinite(5))   //true\nconsole.log(Number.isFinite(null))  //false\nconsole.log(Number.isFinite(undefined))   //false\nconsole.log(Number.isFinite(-0))  //true\nconsole.log(Number.isFinite(+0))  //true\nconsole.log(Number.isFinite(Math.PI)) //true\nconsole.log(Number.isFinite(Math.pow(2)))  //false\n```\n\n## Number.isNaN()\n\n`Number.isNaN()`用来检查一个值是否为NaN。只有对于`NaN`才返回`true`，非`NaN`一律返回`false`。\n\n```js\nconsole.log(Number.isNaN(1))  //false\nconsole.log(Number.isNaN(NaN))  //true\nconsole.log(Number.isNaN(null))  //false\nconsole.log(Number.isNaN(undefined))  //false\nconsole.log(Number.isNaN('hbb'))  //false\nconsole.log(Number.isNaN(true))   //false\nconsole.log(Number.isNaN(9 * NaN))  //true\n4.Number.parseInt(), Number.parseFloat()\nconsole.log(parseFloat('12.123$'))   //12.123\nconsole.log(parseInt('12.123'))   //12\nconsole.log(Number.parseInt('12.123'))  //12\nconsole.log(Number.parseFloat('12.123$'))  //12.123\n```\n\nES6 将全局方法`parseInt()`和`parseFloat()`，移植到`Number`对象上面，减少全局性方法，使得语言逐步模块化。\n\n## Number.isInteger()\n\n```js\nconsole.log(Number.isSafeInteger(25)) //true\nconsole.log(Number.isSafeInteger(25.1)) //false\nconsole.log(Number.isSafeInteger(25.000000000000001)) //false\nconsole.log(Number.isSafeInteger(25.00000000000001)) //true\n```\n\n上面最后两个为什么会出现不一样的结果：`JavaScript` 采用 `IEEE 754` 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，`Number.isInteger`可能会误判。所以对数值精度要求高的，不建议使用`Number.isInteger()`。\n\n## Math.trunc()\n\n`Math.trunc`方法用于去除一个数的小数部分，返回整数部分。\n\n```js\nconsole.log(Math.trunc(12.123))  //12\nconsole.log(Math.trunc(-12.123))  //-12\n```\n\n对于非数值，`Math.trunc`内部使用`Number`方法将其先转为数值。\n\n```js\nconsole.log(Math.trunc('12.123')) //12\nconsole.log(Math.trunc(true)) //1\nconsole.log(Math.trunc(null)) //0 \n```\n\n对于空值和无法截取整数的值，返回`NaN`。\n\n```js\nconsole.log(Math.trunc(undefined)) //NaN\nconsole.log(Math.trunc(NaN))  //NaN\nconsole.log(Math.trunc())  //NaN\n```\n\n## Math.sign()\n\n`Math.sign`方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。\n\n它会返回五种值。\n\n参数为正数，返回+1；\n参数为负数，返回-1；\n参数为 0，返回0；\n参数为-0，返回-0;\n其他值，返回NaN。\n\n```js\nconsole.log(Math.sign(1))   //1\nconsole.log(Math.sign(-1))  //-1\nconsole.log(Math.sign(0))  //0\nconsole.log(Math.sign('1'))  //1 \nconsole.log(Math.sign('-1'))  //-1\nconsole.log(Math.sign(-'1'))  //-1\nconsole.log(Math.sign(undefined))  //NaN\nconsole.log(Math.sign(null))  //0\nconsole.log(Math.sign(NaN))  //NaN\nconsole.log(Math.sign('foo'))  //NaN\nconsole.log(Math.sign(true))  //1\nconsole.log(Math.sign(false))  //0\n```\n","source":"_posts/es6-4.md","raw":"---\ntitle: 数值的扩展\ncomments: true\ndescription: 数值的扩展\ntags: \"ES6\"\ndate: 2017-04-7 23:11:34\ncategories: \"ES6\"\nkeywords: 数值的扩展\n---\n\n## 二进制和八进制表示法\n\n二进制与八进制分别用前缀0b（或0B）和0o（或0O）表示。\n\n```js\nconsole.log(0b101)   //5\nconsole.log(0o101)  //65\n```\n\n如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。\n\n```js\nconsole.log(Number(0b101))  //5\nconsole.log(Number(0o101))  //65\n```\n\n## Number.isFinite()\n\n`Number.isFinite()`用来检查一个数值是否为有限的（`finite`），即不是`Infinity`,只对数值有效，非数值一律返回`false`\n\n```js\nconsole.log(Number.isFinite(5.22222))  //true\nconsole.log(Number.isFinite(5))   //true\nconsole.log(Number.isFinite(null))  //false\nconsole.log(Number.isFinite(undefined))   //false\nconsole.log(Number.isFinite(-0))  //true\nconsole.log(Number.isFinite(+0))  //true\nconsole.log(Number.isFinite(Math.PI)) //true\nconsole.log(Number.isFinite(Math.pow(2)))  //false\n```\n\n## Number.isNaN()\n\n`Number.isNaN()`用来检查一个值是否为NaN。只有对于`NaN`才返回`true`，非`NaN`一律返回`false`。\n\n```js\nconsole.log(Number.isNaN(1))  //false\nconsole.log(Number.isNaN(NaN))  //true\nconsole.log(Number.isNaN(null))  //false\nconsole.log(Number.isNaN(undefined))  //false\nconsole.log(Number.isNaN('hbb'))  //false\nconsole.log(Number.isNaN(true))   //false\nconsole.log(Number.isNaN(9 * NaN))  //true\n4.Number.parseInt(), Number.parseFloat()\nconsole.log(parseFloat('12.123$'))   //12.123\nconsole.log(parseInt('12.123'))   //12\nconsole.log(Number.parseInt('12.123'))  //12\nconsole.log(Number.parseFloat('12.123$'))  //12.123\n```\n\nES6 将全局方法`parseInt()`和`parseFloat()`，移植到`Number`对象上面，减少全局性方法，使得语言逐步模块化。\n\n## Number.isInteger()\n\n```js\nconsole.log(Number.isSafeInteger(25)) //true\nconsole.log(Number.isSafeInteger(25.1)) //false\nconsole.log(Number.isSafeInteger(25.000000000000001)) //false\nconsole.log(Number.isSafeInteger(25.00000000000001)) //true\n```\n\n上面最后两个为什么会出现不一样的结果：`JavaScript` 采用 `IEEE 754` 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，`Number.isInteger`可能会误判。所以对数值精度要求高的，不建议使用`Number.isInteger()`。\n\n## Math.trunc()\n\n`Math.trunc`方法用于去除一个数的小数部分，返回整数部分。\n\n```js\nconsole.log(Math.trunc(12.123))  //12\nconsole.log(Math.trunc(-12.123))  //-12\n```\n\n对于非数值，`Math.trunc`内部使用`Number`方法将其先转为数值。\n\n```js\nconsole.log(Math.trunc('12.123')) //12\nconsole.log(Math.trunc(true)) //1\nconsole.log(Math.trunc(null)) //0 \n```\n\n对于空值和无法截取整数的值，返回`NaN`。\n\n```js\nconsole.log(Math.trunc(undefined)) //NaN\nconsole.log(Math.trunc(NaN))  //NaN\nconsole.log(Math.trunc())  //NaN\n```\n\n## Math.sign()\n\n`Math.sign`方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。\n\n它会返回五种值。\n\n参数为正数，返回+1；\n参数为负数，返回-1；\n参数为 0，返回0；\n参数为-0，返回-0;\n其他值，返回NaN。\n\n```js\nconsole.log(Math.sign(1))   //1\nconsole.log(Math.sign(-1))  //-1\nconsole.log(Math.sign(0))  //0\nconsole.log(Math.sign('1'))  //1 \nconsole.log(Math.sign('-1'))  //-1\nconsole.log(Math.sign(-'1'))  //-1\nconsole.log(Math.sign(undefined))  //NaN\nconsole.log(Math.sign(null))  //0\nconsole.log(Math.sign(NaN))  //NaN\nconsole.log(Math.sign('foo'))  //NaN\nconsole.log(Math.sign(true))  //1\nconsole.log(Math.sign(false))  //0\n```\n","slug":"es6-4","published":1,"updated":"2020-12-02T06:49:34.118Z","layout":"post","photos":[],"link":"","_id":"cki71wakc000qtl9kbde291yx","content":"<h2 id=\"二进制和八进制表示法\"><a href=\"#二进制和八进制表示法\" class=\"headerlink\" title=\"二进制和八进制表示法\"></a>二进制和八进制表示法</h2><p>二进制与八进制分别用前缀0b（或0B）和0o（或0O）表示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0b101</span>)   <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0o101</span>)  <span class=\"comment\">//65</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"number\">0b101</span>))  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"number\">0o101</span>))  <span class=\"comment\">//65</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isFinite\"><a href=\"#Number-isFinite\" class=\"headerlink\" title=\"Number.isFinite()\"></a>Number.isFinite()</h2><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（<code>finite</code>），即不是<code>Infinity</code>,只对数值有效，非数值一律返回<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">5.22222</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">5</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">null</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">undefined</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">-0</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(+<span class=\"number\">0</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"built_in\">Math</span>.PI)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>)))  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isNaN\"><a href=\"#Number-isNaN\" class=\"headerlink\" title=\"Number.isNaN()\"></a>Number.isNaN()</h2><p><code>Number.isNaN()</code>用来检查一个值是否为NaN。只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">1</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">null</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'hbb'</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">true</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">9</span> * <span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"built_in\">Number</span>.parseInt(), <span class=\"built_in\">Number</span>.parseFloat()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.123$'</span>))   <span class=\"comment\">//12.123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.123'</span>))   <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"string\">'12.123'</span>))  <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseFloat(<span class=\"string\">'12.123$'</span>))  <span class=\"comment\">//12.123</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到<code>Number</code>对象上面，减少全局性方法，使得语言逐步模块化。</p>\n<h2 id=\"Number-isInteger\"><a href=\"#Number-isInteger\" class=\"headerlink\" title=\"Number.isInteger()\"></a>Number.isInteger()</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.1</span>)) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.000000000000001</span>)) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.00000000000001</span>)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后两个为什么会出现不一样的结果：<code>JavaScript</code> 采用 <code>IEEE 754</code> 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判。所以对数值精度要求高的，不建议使用<code>Number.isInteger()</code>。</p>\n<h2 id=\"Math-trunc\"><a href=\"#Math-trunc\" class=\"headerlink\" title=\"Math.trunc()\"></a>Math.trunc()</h2><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">12.123</span>))  <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">-12.123</span>))  <span class=\"comment\">//-12</span></span><br></pre></td></tr></table></figure>\n\n<p>对于非数值，<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"string\">'12.123'</span>)) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">true</span>)) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">null</span>)) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>对于空值和无法截取整数的值，返回<code>NaN</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">undefined</span>)) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc())  <span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-sign\"><a href=\"#Math-sign\" class=\"headerlink\" title=\"Math.sign()\"></a>Math.sign()</h2><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p>\n<p>它会返回五种值。</p>\n<p>参数为正数，返回+1；<br>参数为负数，返回-1；<br>参数为 0，返回0；<br>参数为-0，返回-0;<br>其他值，返回NaN。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">1</span>))   <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">-1</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>))  <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'1'</span>))  <span class=\"comment\">//1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'-1'</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(-<span class=\"string\">'1'</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">null</span>))  <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'foo'</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">true</span>))  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">false</span>))  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"二进制和八进制表示法\"><a href=\"#二进制和八进制表示法\" class=\"headerlink\" title=\"二进制和八进制表示法\"></a>二进制和八进制表示法</h2><p>二进制与八进制分别用前缀0b（或0B）和0o（或0O）表示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0b101</span>)   <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0o101</span>)  <span class=\"comment\">//65</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"number\">0b101</span>))  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"number\">0o101</span>))  <span class=\"comment\">//65</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isFinite\"><a href=\"#Number-isFinite\" class=\"headerlink\" title=\"Number.isFinite()\"></a>Number.isFinite()</h2><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（<code>finite</code>），即不是<code>Infinity</code>,只对数值有效，非数值一律返回<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">5.22222</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">5</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">null</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">undefined</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">-0</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(+<span class=\"number\">0</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"built_in\">Math</span>.PI)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>)))  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isNaN\"><a href=\"#Number-isNaN\" class=\"headerlink\" title=\"Number.isNaN()\"></a>Number.isNaN()</h2><p><code>Number.isNaN()</code>用来检查一个值是否为NaN。只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">1</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">null</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">'hbb'</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">true</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">9</span> * <span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"built_in\">Number</span>.parseInt(), <span class=\"built_in\">Number</span>.parseFloat()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.123$'</span>))   <span class=\"comment\">//12.123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.123'</span>))   <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"string\">'12.123'</span>))  <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseFloat(<span class=\"string\">'12.123$'</span>))  <span class=\"comment\">//12.123</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到<code>Number</code>对象上面，减少全局性方法，使得语言逐步模块化。</p>\n<h2 id=\"Number-isInteger\"><a href=\"#Number-isInteger\" class=\"headerlink\" title=\"Number.isInteger()\"></a>Number.isInteger()</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.1</span>)) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.000000000000001</span>)) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">25.00000000000001</span>)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后两个为什么会出现不一样的结果：<code>JavaScript</code> 采用 <code>IEEE 754</code> 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判。所以对数值精度要求高的，不建议使用<code>Number.isInteger()</code>。</p>\n<h2 id=\"Math-trunc\"><a href=\"#Math-trunc\" class=\"headerlink\" title=\"Math.trunc()\"></a>Math.trunc()</h2><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">12.123</span>))  <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">-12.123</span>))  <span class=\"comment\">//-12</span></span><br></pre></td></tr></table></figure>\n\n<p>对于非数值，<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"string\">'12.123'</span>)) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">true</span>)) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">null</span>)) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>对于空值和无法截取整数的值，返回<code>NaN</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">undefined</span>)) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc())  <span class=\"comment\">//NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-sign\"><a href=\"#Math-sign\" class=\"headerlink\" title=\"Math.sign()\"></a>Math.sign()</h2><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p>\n<p>它会返回五种值。</p>\n<p>参数为正数，返回+1；<br>参数为负数，返回-1；<br>参数为 0，返回0；<br>参数为-0，返回-0;<br>其他值，返回NaN。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">1</span>))   <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">-1</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>))  <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'1'</span>))  <span class=\"comment\">//1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'-1'</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(-<span class=\"string\">'1'</span>))  <span class=\"comment\">//-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">null</span>))  <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">NaN</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">'foo'</span>))  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">true</span>))  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"literal\">false</span>))  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Module 的加载实现","comments":1,"description":"Module 的加载实现","date":"2017-09-29T04:25:23.000Z","keywords":"ES6, Module,Module 的加载实现","_content":"\n## 传统方法\n\nHTML 网页中，浏览器通过`<script>`标签加载 JavaScript 脚本。浏览器允许脚本异步加载，下面就是两种异步加载的语法。\n\n```js\n<script src=\"./index.js\" defer></script>\n<script src=\"./index.js\" async></script>\n```\n\n`<script>`标签打开`defer`或`async`属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。\n\n`defer`要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；`async`一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。\n\n## 加载规则\n\n浏览器加载 ES6 模块，也使用`<script>`标签，但是要加入`type=\"module\"`属性。\n\n浏览器对于带有`type=\"module\"`的`<script>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了`<script>`标签的defer属性。\n\n```js\n<script type=\"module\" src=\"./index.js\"></script>\n```\n\n如果网页有多个`<script type=\"module\">`，它们会按照在页面出现的顺序依次执行。\n\n`<script>`标签的`async`属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。\n\n```js\n<script src=\"./index.js\" type=\"module\" async></script>\n```\n\n一旦使用了`async`属性，`<script type=\"module\">`就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。\n\nES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。\n\n对于外部的模块脚本（上例是utils.js），有几点需要注意。\n\n代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。\n模块脚本自动采用严格模式，不管有没有声明use strict。\n\n模块之中，可以使用`import`命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用`export`命令输出对外接口。\n\n模块之中，顶层的`this`关键字返回`undefined`，而不是指向`window`。也就是说，在模块顶层使用this关键字，是无意义的。\n同一个模块如果加载多次，将只执行一次。\n尤其是this要注意。\n\n```js\n<script type=\"module\">\nconst a = 1\nconsole.log(this,window.a)   //undefined  undefined\nconsole.log(this.a === window.a)  //Uncaught TypeError: Cannot read property 'a' of undefined\n</script>\n```\n\n## ES6 模块与 CommonJS 模块的差异\n\n它们有两个重大差异。\n\n- CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n\n- CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n- CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\n\n```js\n//lib.js\nlet counter = 3\nfunction add(){\n  counter++\n}\nmodule.exports = {\n  counter,\n  add\n}\n```\n\n```js\n//index.js\nconst lib require( './lib.js')\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //3  \n```\n\n`lib.js`模块加载以后，它的内部变化就影响不到输出的`lib.counter`了。这是因为`mod.counter`是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。\n\n```js\n//lib.js\nlet counter = 3\nfunction add(){\n  counter++\n}\nmodule.exports = {\n  get counter(){\n    return counter\n  },\n  add\n}\n```\n \n```js\n//index.js\nconst lib require('./lib.js')\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //4  \n```\n\nES6 模块的运行机制与 `CommonJS` 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n\n```js\n//lib.js\nexport let counter = 3\nexport function add(){ counter++  }\n```\n\n```js\n//index.js\nimport {counter,add} from './lib.js'\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //4   \n```","source":"_posts/es6-13.md","raw":"---\ntitle: Module 的加载实现\ncomments: true\ndescription: Module 的加载实现\ntags: \"ES6\"\ndate: 2017-09-29 12:25:23\ncategories: \"ES6\"\nkeywords: ES6, Module,Module 的加载实现\n---\n\n## 传统方法\n\nHTML 网页中，浏览器通过`<script>`标签加载 JavaScript 脚本。浏览器允许脚本异步加载，下面就是两种异步加载的语法。\n\n```js\n<script src=\"./index.js\" defer></script>\n<script src=\"./index.js\" async></script>\n```\n\n`<script>`标签打开`defer`或`async`属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。\n\n`defer`要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；`async`一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。\n\n## 加载规则\n\n浏览器加载 ES6 模块，也使用`<script>`标签，但是要加入`type=\"module\"`属性。\n\n浏览器对于带有`type=\"module\"`的`<script>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了`<script>`标签的defer属性。\n\n```js\n<script type=\"module\" src=\"./index.js\"></script>\n```\n\n如果网页有多个`<script type=\"module\">`，它们会按照在页面出现的顺序依次执行。\n\n`<script>`标签的`async`属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。\n\n```js\n<script src=\"./index.js\" type=\"module\" async></script>\n```\n\n一旦使用了`async`属性，`<script type=\"module\">`就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。\n\nES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。\n\n对于外部的模块脚本（上例是utils.js），有几点需要注意。\n\n代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。\n模块脚本自动采用严格模式，不管有没有声明use strict。\n\n模块之中，可以使用`import`命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用`export`命令输出对外接口。\n\n模块之中，顶层的`this`关键字返回`undefined`，而不是指向`window`。也就是说，在模块顶层使用this关键字，是无意义的。\n同一个模块如果加载多次，将只执行一次。\n尤其是this要注意。\n\n```js\n<script type=\"module\">\nconst a = 1\nconsole.log(this,window.a)   //undefined  undefined\nconsole.log(this.a === window.a)  //Uncaught TypeError: Cannot read property 'a' of undefined\n</script>\n```\n\n## ES6 模块与 CommonJS 模块的差异\n\n它们有两个重大差异。\n\n- CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n\n- CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n- CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\n\n```js\n//lib.js\nlet counter = 3\nfunction add(){\n  counter++\n}\nmodule.exports = {\n  counter,\n  add\n}\n```\n\n```js\n//index.js\nconst lib require( './lib.js')\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //3  \n```\n\n`lib.js`模块加载以后，它的内部变化就影响不到输出的`lib.counter`了。这是因为`mod.counter`是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。\n\n```js\n//lib.js\nlet counter = 3\nfunction add(){\n  counter++\n}\nmodule.exports = {\n  get counter(){\n    return counter\n  },\n  add\n}\n```\n \n```js\n//index.js\nconst lib require('./lib.js')\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //4  \n```\n\nES6 模块的运行机制与 `CommonJS` 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n\n```js\n//lib.js\nexport let counter = 3\nexport function add(){ counter++  }\n```\n\n```js\n//index.js\nimport {counter,add} from './lib.js'\nconsole.log(lib.counter)  //3\nlib.add()\nconsole.log(lib.counter)  //4   \n```","slug":"es6-13","published":1,"updated":"2020-12-02T06:49:34.117Z","layout":"post","photos":[],"link":"","_id":"cki71wake000ttl9kybc4biiu","content":"<h2 id=\"传统方法\"><a href=\"#传统方法\" class=\"headerlink\" title=\"传统方法\"></a>传统方法</h2><p>HTML 网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JavaScript 脚本。浏览器允许脚本异步加载，下面就是两种异步加载的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./index.js\"</span> defer&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"./i</span>ndex.js<span class=\"string\">\" async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;script&gt;</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。</p>\n<p><code>defer</code>要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。</p>\n<h2 id=\"加载规则\"><a href=\"#加载规则\" class=\"headerlink\" title=\"加载规则\"></a>加载规则</h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p>\n<p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的defer属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"module\"</span> src=<span class=\"string\">\"./index.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的顺序依次执行。</p>\n<p><code>&lt;script&gt;</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./index.js\"</span> type=<span class=\"string\">\"module\"</span> <span class=\"keyword\">async</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一旦使用了<code>async</code>属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</p>\n<p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p>\n<p>对于外部的模块脚本（上例是utils.js），有几点需要注意。</p>\n<p>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。<br>模块脚本自动采用严格模式，不管有没有声明use strict。</p>\n<p>模块之中，可以使用<code>import</code>命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</p>\n<p>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用this关键字，是无意义的。<br>同一个模块如果加载多次，将只执行一次。<br>尤其是this要注意。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"module\"</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>,<span class=\"built_in\">window</span>.a)   <span class=\"comment\">//undefined  undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a === <span class=\"built_in\">window</span>.a)  <span class=\"comment\">//Uncaught TypeError: Cannot read property 'a' of undefined</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-模块与-CommonJS-模块的差异\"><a href=\"#ES6-模块与-CommonJS-模块的差异\" class=\"headerlink\" title=\"ES6 模块与 CommonJS 模块的差异\"></a>ES6 模块与 CommonJS 模块的差异</h2><p>它们有两个重大差异。</p>\n<ul>\n<li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p>\n</li>\n<li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p>\n</li>\n<li><p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  counter++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lib <span class=\"built_in\">require</span>( <span class=\"string\">'./lib.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>lib.js</code>模块加载以后，它的内部变化就影响不到输出的<code>lib.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  counter++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> counter()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lib <span class=\"built_in\">require</span>(<span class=\"string\">'./lib.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 模块的运行机制与 <code>CommonJS</code> 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123; counter++  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;counter,add&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"传统方法\"><a href=\"#传统方法\" class=\"headerlink\" title=\"传统方法\"></a>传统方法</h2><p>HTML 网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JavaScript 脚本。浏览器允许脚本异步加载，下面就是两种异步加载的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./index.js\"</span> defer&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"./i</span>ndex.js<span class=\"string\">\" async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;script&gt;</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。</p>\n<p><code>defer</code>要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。</p>\n<h2 id=\"加载规则\"><a href=\"#加载规则\" class=\"headerlink\" title=\"加载规则\"></a>加载规则</h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p>\n<p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的defer属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"module\"</span> src=<span class=\"string\">\"./index.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的顺序依次执行。</p>\n<p><code>&lt;script&gt;</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./index.js\"</span> type=<span class=\"string\">\"module\"</span> <span class=\"keyword\">async</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一旦使用了<code>async</code>属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</p>\n<p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p>\n<p>对于外部的模块脚本（上例是utils.js），有几点需要注意。</p>\n<p>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。<br>模块脚本自动采用严格模式，不管有没有声明use strict。</p>\n<p>模块之中，可以使用<code>import</code>命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</p>\n<p>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用this关键字，是无意义的。<br>同一个模块如果加载多次，将只执行一次。<br>尤其是this要注意。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"module\"</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>,<span class=\"built_in\">window</span>.a)   <span class=\"comment\">//undefined  undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a === <span class=\"built_in\">window</span>.a)  <span class=\"comment\">//Uncaught TypeError: Cannot read property 'a' of undefined</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-模块与-CommonJS-模块的差异\"><a href=\"#ES6-模块与-CommonJS-模块的差异\" class=\"headerlink\" title=\"ES6 模块与 CommonJS 模块的差异\"></a>ES6 模块与 CommonJS 模块的差异</h2><p>它们有两个重大差异。</p>\n<ul>\n<li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p>\n</li>\n<li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p>\n</li>\n<li><p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  counter++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  counter,</span><br><span class=\"line\">  add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lib <span class=\"built_in\">require</span>( <span class=\"string\">'./lib.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>lib.js</code>模块加载以后，它的内部变化就影响不到输出的<code>lib.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  counter++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> counter()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lib <span class=\"built_in\">require</span>(<span class=\"string\">'./lib.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 模块的运行机制与 <code>CommonJS</code> 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> counter = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123; counter++  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;counter,add&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//3</span></span><br><span class=\"line\">lib.add()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.counter)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>"},{"title":"字符串的扩展","comments":1,"description":"字符串的扩展","date":"2017-04-05T01:10:20.000Z","keywords":"字符串的扩展","_content":"\n## includes\n\n返回布尔值，表示是否找到了参数字符串。\n\n```js\nlet str = 'string'\nconsole.log(str.includes('i'))  //true\n```\n\n## startsWith\n\n返回布尔值，表示参数字符串是否在原字符串的头部。\n\n```js\nlet str = 'string'\nconsole.log(str.startsWith('s'))  //true\n```\n\n## endsWith\n\n返回布尔值，表示参数字符串是否在原字符串的尾部。\n\n```js\nlet str = 'string'\nconsole.log(str.startsWith('i'))  //false\n```\n\n## repeat\n\n方法返回一个新字符串，表示将原字符串重复n次\n\n```js\nlet str = 'string'\nconsole.log(str.repeat(3))  //stringstringstring\n```\npadStart(),padEnd()\n\n如果某个字符串不够指定长度，会在头部或尾部补全。`padStart()`用于头部补全，`padEnd()`用于尾部补全。\n\n```js\nconsole.log('a'.padStart(5,'cb'))//cbcba\nconsole.log('a'.padStart(4,'cb'))//cbca\nconsole.log('a'.padEnd(5,'cb'))//acbcb\nconsole.log('a'.padEnd(4,'cb'))//acbc\n```\n\n## 字符串模板\n\n```js\nlet a = 'hbb'\nlet http = `www.${a}aly.com`\nlet http1 = `<p>www.${a}aly.com</p>`\nconsole.log(http,http1) //www.hbbaly.com <p>www.hbbaly.com</p>\n```\n\n用反引号（`）标识。","source":"_posts/es6-3.md","raw":"---\ntitle: 字符串的扩展\ncomments: true\ndescription: 字符串的扩展\ntags: \"ES6\"\ndate: 2017-04-5 09:10:20\ncategories: \"ES6\"\nkeywords: 字符串的扩展\n---\n\n## includes\n\n返回布尔值，表示是否找到了参数字符串。\n\n```js\nlet str = 'string'\nconsole.log(str.includes('i'))  //true\n```\n\n## startsWith\n\n返回布尔值，表示参数字符串是否在原字符串的头部。\n\n```js\nlet str = 'string'\nconsole.log(str.startsWith('s'))  //true\n```\n\n## endsWith\n\n返回布尔值，表示参数字符串是否在原字符串的尾部。\n\n```js\nlet str = 'string'\nconsole.log(str.startsWith('i'))  //false\n```\n\n## repeat\n\n方法返回一个新字符串，表示将原字符串重复n次\n\n```js\nlet str = 'string'\nconsole.log(str.repeat(3))  //stringstringstring\n```\npadStart(),padEnd()\n\n如果某个字符串不够指定长度，会在头部或尾部补全。`padStart()`用于头部补全，`padEnd()`用于尾部补全。\n\n```js\nconsole.log('a'.padStart(5,'cb'))//cbcba\nconsole.log('a'.padStart(4,'cb'))//cbca\nconsole.log('a'.padEnd(5,'cb'))//acbcb\nconsole.log('a'.padEnd(4,'cb'))//acbc\n```\n\n## 字符串模板\n\n```js\nlet a = 'hbb'\nlet http = `www.${a}aly.com`\nlet http1 = `<p>www.${a}aly.com</p>`\nconsole.log(http,http1) //www.hbbaly.com <p>www.hbbaly.com</p>\n```\n\n用反引号（`）标识。","slug":"es6-3","published":1,"updated":"2020-12-02T06:49:34.118Z","layout":"post","photos":[],"link":"","_id":"cki71wakg000ytl9kxgot4g0u","content":"<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>返回布尔值，表示是否找到了参数字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'i'</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"startsWith\"><a href=\"#startsWith\" class=\"headerlink\" title=\"startsWith\"></a>startsWith</h2><p>返回布尔值，表示参数字符串是否在原字符串的头部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'s'</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWith\"><a href=\"#endsWith\" class=\"headerlink\" title=\"endsWith\"></a>endsWith</h2><p>返回布尔值，表示参数字符串是否在原字符串的尾部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'i'</span>))  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h2><p>方法返回一个新字符串，表示将原字符串重复n次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">3</span>))  <span class=\"comment\">//stringstringstring</span></span><br></pre></td></tr></table></figure>\n\n<p>padStart(),padEnd()</p>\n<p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padStart(<span class=\"number\">5</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//cbcba</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padStart(<span class=\"number\">4</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//cbca</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padEnd(<span class=\"number\">5</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//acbcb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padEnd(<span class=\"number\">4</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//acbc</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'hbb'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"string\">`www.<span class=\"subst\">$&#123;a&#125;</span>aly.com`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http1 = <span class=\"string\">`&lt;p&gt;www.<span class=\"subst\">$&#123;a&#125;</span>aly.com&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(http,http1) <span class=\"comment\">//www.hbbaly.com &lt;p&gt;www.hbbaly.com&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用反引号（`）标识。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>返回布尔值，表示是否找到了参数字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'i'</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"startsWith\"><a href=\"#startsWith\" class=\"headerlink\" title=\"startsWith\"></a>startsWith</h2><p>返回布尔值，表示参数字符串是否在原字符串的头部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'s'</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWith\"><a href=\"#endsWith\" class=\"headerlink\" title=\"endsWith\"></a>endsWith</h2><p>返回布尔值，表示参数字符串是否在原字符串的尾部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">'i'</span>))  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h2><p>方法返回一个新字符串，表示将原字符串重复n次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">3</span>))  <span class=\"comment\">//stringstringstring</span></span><br></pre></td></tr></table></figure>\n\n<p>padStart(),padEnd()</p>\n<p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padStart(<span class=\"number\">5</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//cbcba</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padStart(<span class=\"number\">4</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//cbca</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padEnd(<span class=\"number\">5</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//acbcb</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>.padEnd(<span class=\"number\">4</span>,<span class=\"string\">'cb'</span>))<span class=\"comment\">//acbc</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'hbb'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"string\">`www.<span class=\"subst\">$&#123;a&#125;</span>aly.com`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http1 = <span class=\"string\">`&lt;p&gt;www.<span class=\"subst\">$&#123;a&#125;</span>aly.com&lt;/p&gt;`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(http,http1) <span class=\"comment\">//www.hbbaly.com &lt;p&gt;www.hbbaly.com&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用反引号（`）标识。</p>\n"},{"title":"数组的扩展","comments":1,"description":"数组的扩展","date":"2017-04-05T04:08:34.000Z","keywords":"数组的扩展","_content":"\n## 扩展运算符（spread）\n\n是三个点（...）。将一个数组转为用逗号分隔的参数序列。\n\n```js\nconsole.log(...[1,2,3])  //1 2 3\n```\n\n主要用于函数的调用：\n\n```js\nfunction add(a,b){\nreturn a+b\n}\nconsole.log(add(...[1,2]))  //3\nfunction add1(a,...arg){\nreturn [a,...arg]\n}\nconsole.log(add1(1,2,3,4)) //[1, 2, 3, 4]\n```\n\n## 复制数组\n\n数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = arr1;\narr2[0] = 4;\nconsole.log(arr1,arr2)  // [4, 2, 3] , [4, 2, 3]\n```\n\n上例可以看出`arr2`改变，`arr1`也跟着改变了。`ES5`中我们可以使用这种方法：\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = arr1.concat();\n arr2[0] = 4;\n console.log(arr1,arr2) //[1, 2, 3] , [4, 2, 3]\n```\n\nES6中使用扩展运算符\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = [...arr1];\n arr2[0] = 4;\n console.log(arr1,arr2) //[1, 2, 3] , [4, 2, 3]\n```\n## 合并数组\n\nES5的方法：\n\n```js\nconst [arr1,arr2] = [[1,2,3],[4,5,6]];\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3) // [1, 2, 3, 4, 5, 6]\n```\n\nES6的方法：\n\n```js\nconst [arr1,arr2] = [[1,2,3],[4,5,6]];\nconst arr3 = [...arr1,...arr2];\nconsole.log(arr3) // [1, 2, 3, 4, 5, 6]\n```\n\n## 与解构赋值结合\n\n```js\nconst [a,...b]  = [1,2,3,4,5];\nconsole.log(a,b)  //1 ,[2, 3, 4, 5]\n\nconst [c,...d] = [];\nconsole.log(c,d)  //undefined, []\n\nconst [e,...f] = [undefined,null];\nconsole.log(e,f)  // undefined ,[null]\n\nconst [g,...h] = [null];\nconsole.log(g,h)  // null ,[]\n\nconst [q,w,...e,r] = [1,2,3,4,5,6,7]\nconsole.log(q,w,e,r)  //Rest element must be last element\n```\n\n上述最后一个例子中，将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\n## 字符串转为数组\n\n```js\nconsole.log([...'string'])  //[\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]\n```\n\n## Array.from\n\n方法用于将两类对象转为真正的数组：类似数组的对象（`array-like object`）和可遍历（`iterable`）的对象（包括 ES6 新增的数据结构 `Set` 和 `Map`）。\n\n```js\nlet arr = {\n    '0':'a',\n    '1':'b',\n    '2':'c',\n    length:3\n};\n\n//ES5写法：\nconsole.log([].slice.call(arr))  //[\"a\", \"b\", \"c\"]\n\n//ES6的写法：\nconsole.log(Array.from(arr))  //[\"a\", \"b\", \"c\"]\n```\n\n常见的类似数组的对象是 `DOM` 操作返回的 `NodeList` 集合，以及函数内部的`arguments`对象。`Array.from`都可以将它们转为真正的数组。\n\n`Array.from`还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组。\n\n```js\nlet arr = new Set([1,2,3]);\nconsole.log(Array.from(arr,x=>x>2?x:0))  //[0, 0, 3]\n```\n\n## Array.of()\n\n将一组值转化为数组。\n\n```js\nconsole.log(Array.of(1,2,3))   //[1,2,3]\nconsole.log(Array.of(1,2,3).length)   //3\n```\n\n`Array.of()`是弥补数组构造函数`Array()`的不足。因为参数个数的不同，会导致`Array()`的行为有差异。\n\n只有当参数个数不少于 2 个时，`Array()`才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。\n\n```js\nconsole.log(Array(5)); //[empty × 5]\nconsole.log(Array(5,3))   //[5, 3]\n```\n\n`Array.of()`实现的原理是利用`[].slice.call()`\n\n```js\nfunction ArrayOf(){\nreturn [].slice.call(arguments);\n}\n```\n\n## copyWithin()\n\n它接受三个参数。\n\n- target（必需）：从该位置开始替换数据。如果为负值，表示倒数。\n\n- start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。\n\n\n- end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\n\n\n这三个参数都应该是数值，如果不是，会自动转为数值。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\n console.log(arr.copyWithin(0,2,5))   //[3, 4, 5, 4, 5, 6, 7]\n```\n## find() 和 findIndex()\n\n数组实例的`find`方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为`true`的成员，然后返回该成员。如果没有符合条件的成员，则返回`undefined`。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\nconsole.log(arr.find(x=>x>3))   //4\nconsole.log(arr.find(x=>x>7))   //undefined\n```\n\nfind方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\nconsole.log(arr.find((val,index,arr)=>{\n    return val>2\n}))\n```\n\n数组实例的`findIndex`方法的用法与`find`方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n\n## fill()\n\n`fill`方法使用给定值，填充一个数组。\n\n```js\nconst arr = [1,2,3,4];\narr.fill(0)\nconsole.log(arr)  //[0, 0, 0, 0]\n```\n\n`fill`方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n\n`fill`方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n```js\nconst arr = [1,2,3,4];\narr.fill(0,1,3)\nconsole.log(arr)  //[1, 0, 0, 4]\n```\n\n## entries()，keys() 和 values()\n\n用于遍历数组，唯一的区别是`keys()`是对键名的遍历、`values()`是对键值的遍历，`entries()`是对键值对的遍历。\n\n## includes\n\n方法返回一个布尔值，表示某个数组是否包含给定的值。\n\n```js\nlet arr = ['a','b','c'];\narr.includes('a')  //true\narr.includes('d')  //false\n```\n\n该方法的第二个参数表示搜索的起始位置，默认为0。\n\n```js\nlet arr = ['a','b','c'];\narr.includes('a')  //true\narr.includes('a',1)  //false\n```\n\n","source":"_posts/es6-5.md","raw":"---\ntitle: 数组的扩展\ncomments: true\ndescription: 数组的扩展\ntags: \"ES6\"\ndate: 2017-04-5 12:08:34\ncategories: \"ES6\"\nkeywords: 数组的扩展\n---\n\n## 扩展运算符（spread）\n\n是三个点（...）。将一个数组转为用逗号分隔的参数序列。\n\n```js\nconsole.log(...[1,2,3])  //1 2 3\n```\n\n主要用于函数的调用：\n\n```js\nfunction add(a,b){\nreturn a+b\n}\nconsole.log(add(...[1,2]))  //3\nfunction add1(a,...arg){\nreturn [a,...arg]\n}\nconsole.log(add1(1,2,3,4)) //[1, 2, 3, 4]\n```\n\n## 复制数组\n\n数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = arr1;\narr2[0] = 4;\nconsole.log(arr1,arr2)  // [4, 2, 3] , [4, 2, 3]\n```\n\n上例可以看出`arr2`改变，`arr1`也跟着改变了。`ES5`中我们可以使用这种方法：\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = arr1.concat();\n arr2[0] = 4;\n console.log(arr1,arr2) //[1, 2, 3] , [4, 2, 3]\n```\n\nES6中使用扩展运算符\n\n```js\nconst arr1 = [1,2,3];\nconst arr2 = [...arr1];\n arr2[0] = 4;\n console.log(arr1,arr2) //[1, 2, 3] , [4, 2, 3]\n```\n## 合并数组\n\nES5的方法：\n\n```js\nconst [arr1,arr2] = [[1,2,3],[4,5,6]];\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3) // [1, 2, 3, 4, 5, 6]\n```\n\nES6的方法：\n\n```js\nconst [arr1,arr2] = [[1,2,3],[4,5,6]];\nconst arr3 = [...arr1,...arr2];\nconsole.log(arr3) // [1, 2, 3, 4, 5, 6]\n```\n\n## 与解构赋值结合\n\n```js\nconst [a,...b]  = [1,2,3,4,5];\nconsole.log(a,b)  //1 ,[2, 3, 4, 5]\n\nconst [c,...d] = [];\nconsole.log(c,d)  //undefined, []\n\nconst [e,...f] = [undefined,null];\nconsole.log(e,f)  // undefined ,[null]\n\nconst [g,...h] = [null];\nconsole.log(g,h)  // null ,[]\n\nconst [q,w,...e,r] = [1,2,3,4,5,6,7]\nconsole.log(q,w,e,r)  //Rest element must be last element\n```\n\n上述最后一个例子中，将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\n## 字符串转为数组\n\n```js\nconsole.log([...'string'])  //[\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]\n```\n\n## Array.from\n\n方法用于将两类对象转为真正的数组：类似数组的对象（`array-like object`）和可遍历（`iterable`）的对象（包括 ES6 新增的数据结构 `Set` 和 `Map`）。\n\n```js\nlet arr = {\n    '0':'a',\n    '1':'b',\n    '2':'c',\n    length:3\n};\n\n//ES5写法：\nconsole.log([].slice.call(arr))  //[\"a\", \"b\", \"c\"]\n\n//ES6的写法：\nconsole.log(Array.from(arr))  //[\"a\", \"b\", \"c\"]\n```\n\n常见的类似数组的对象是 `DOM` 操作返回的 `NodeList` 集合，以及函数内部的`arguments`对象。`Array.from`都可以将它们转为真正的数组。\n\n`Array.from`还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组。\n\n```js\nlet arr = new Set([1,2,3]);\nconsole.log(Array.from(arr,x=>x>2?x:0))  //[0, 0, 3]\n```\n\n## Array.of()\n\n将一组值转化为数组。\n\n```js\nconsole.log(Array.of(1,2,3))   //[1,2,3]\nconsole.log(Array.of(1,2,3).length)   //3\n```\n\n`Array.of()`是弥补数组构造函数`Array()`的不足。因为参数个数的不同，会导致`Array()`的行为有差异。\n\n只有当参数个数不少于 2 个时，`Array()`才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。\n\n```js\nconsole.log(Array(5)); //[empty × 5]\nconsole.log(Array(5,3))   //[5, 3]\n```\n\n`Array.of()`实现的原理是利用`[].slice.call()`\n\n```js\nfunction ArrayOf(){\nreturn [].slice.call(arguments);\n}\n```\n\n## copyWithin()\n\n它接受三个参数。\n\n- target（必需）：从该位置开始替换数据。如果为负值，表示倒数。\n\n- start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。\n\n\n- end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\n\n\n这三个参数都应该是数值，如果不是，会自动转为数值。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\n console.log(arr.copyWithin(0,2,5))   //[3, 4, 5, 4, 5, 6, 7]\n```\n## find() 和 findIndex()\n\n数组实例的`find`方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为`true`的成员，然后返回该成员。如果没有符合条件的成员，则返回`undefined`。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\nconsole.log(arr.find(x=>x>3))   //4\nconsole.log(arr.find(x=>x>7))   //undefined\n```\n\nfind方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。\n\n```js\nlet arr = [1,2,3,4,5,6,7];\nconsole.log(arr.find((val,index,arr)=>{\n    return val>2\n}))\n```\n\n数组实例的`findIndex`方法的用法与`find`方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n\n## fill()\n\n`fill`方法使用给定值，填充一个数组。\n\n```js\nconst arr = [1,2,3,4];\narr.fill(0)\nconsole.log(arr)  //[0, 0, 0, 0]\n```\n\n`fill`方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n\n`fill`方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n```js\nconst arr = [1,2,3,4];\narr.fill(0,1,3)\nconsole.log(arr)  //[1, 0, 0, 4]\n```\n\n## entries()，keys() 和 values()\n\n用于遍历数组，唯一的区别是`keys()`是对键名的遍历、`values()`是对键值的遍历，`entries()`是对键值对的遍历。\n\n## includes\n\n方法返回一个布尔值，表示某个数组是否包含给定的值。\n\n```js\nlet arr = ['a','b','c'];\narr.includes('a')  //true\narr.includes('d')  //false\n```\n\n该方法的第二个参数表示搜索的起始位置，默认为0。\n\n```js\nlet arr = ['a','b','c'];\narr.includes('a')  //true\narr.includes('a',1)  //false\n```\n\n","slug":"es6-5","published":1,"updated":"2020-12-02T06:49:34.118Z","layout":"post","photos":[],"link":"","_id":"cki71waki0011tl9k9krl2r11","content":"<h2 id=\"扩展运算符（spread）\"><a href=\"#扩展运算符（spread）\" class=\"headerlink\" title=\"扩展运算符（spread）\"></a>扩展运算符（spread）</h2><p>是三个点（…）。将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])  <span class=\"comment\">//1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p>主要用于函数的调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>]))  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">a,...arg</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [a,...arg]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h2><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1;</span><br><span class=\"line\">arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr2)  <span class=\"comment\">// [4, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出<code>arr2</code>改变，<code>arr1</code>也跟着改变了。<code>ES5</code>中我们可以使用这种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.concat();</span><br><span class=\"line\"> arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1,arr2) <span class=\"comment\">//[1, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6中使用扩展运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];</span><br><span class=\"line\"> arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1,arr2) <span class=\"comment\">//[1, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h2><p>ES5的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [...arr1,...arr2];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"与解构赋值结合\"><a href=\"#与解构赋值结合\" class=\"headerlink\" title=\"与解构赋值结合\"></a>与解构赋值结合</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,...b]  = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)  <span class=\"comment\">//1 ,[2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [c,...d] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,d)  <span class=\"comment\">//undefined, []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [e,...f] = [<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)  <span class=\"comment\">// undefined ,[null]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [g,...h] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g,h)  <span class=\"comment\">// null ,[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [q,w,...e,r] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q,w,e,r)  <span class=\"comment\">//Rest element must be last element</span></span><br></pre></td></tr></table></figure>\n\n<p>上述最后一个例子中，将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<h2 id=\"字符串转为数组\"><a href=\"#字符串转为数组\" class=\"headerlink\" title=\"字符串转为数组\"></a>字符串转为数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([...<span class=\"string\">'string'</span>])  <span class=\"comment\">//[\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from\"></a>Array.from</h2><p>方法用于将两类对象转为真正的数组：类似数组的对象（<code>array-like object</code>）和可遍历（<code>iterable</code>）的对象（包括 ES6 新增的数据结构 <code>Set</code> 和 <code>Map</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>:<span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>:<span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>:<span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5写法：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].slice.call(arr))  <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(arr))  <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>常见的类似数组的对象是 <code>DOM</code> 操作返回的 <code>NodeList</code> 集合，以及函数内部的<code>arguments</code>对象。<code>Array.from</code>都可以将它们转为真正的数组。</p>\n<p><code>Array.from</code>还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(arr,x=&gt;x&gt;<span class=\"number\">2</span>?x:<span class=\"number\">0</span>))  <span class=\"comment\">//[0, 0, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>将一组值转化为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>))   <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).length)   <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Array.of()</code>是弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，会导致<code>Array()</code>的行为有差异。</p>\n<p>只有当参数个数不少于 2 个时，<code>Array()</code>才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)); <span class=\"comment\">//[empty × 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>,<span class=\"number\">3</span>))   <span class=\"comment\">//[5, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Array.of()</code>实现的原理是利用<code>[].slice.call()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h2><p>它接受三个参数。</p>\n<ul>\n<li><p>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</p>\n</li>\n<li><p>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</p>\n</li>\n</ul>\n<ul>\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li>\n</ul>\n<p>这三个参数都应该是数值，如果不是，会自动转为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>))   <span class=\"comment\">//[3, 4, 5, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find-和-findIndex\"><a href=\"#find-和-findIndex\" class=\"headerlink\" title=\"find() 和 findIndex()\"></a>find() 和 findIndex()</h2><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x&gt;<span class=\"number\">3</span>))   <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x&gt;<span class=\"number\">7</span>))   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\">(<span class=\"params\">val,index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h2><p><code>fill</code>方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</p>\n<p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[1, 0, 0, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries-，keys-和-values\"><a href=\"#entries-，keys-和-values\" class=\"headerlink\" title=\"entries()，keys() 和 values()\"></a>entries()，keys() 和 values()</h2><p>用于遍历数组，唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>方法返回一个布尔值，表示某个数组是否包含给定的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">arr.includes(<span class=\"string\">'d'</span>)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法的第二个参数表示搜索的起始位置，默认为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>,<span class=\"number\">1</span>)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"扩展运算符（spread）\"><a href=\"#扩展运算符（spread）\" class=\"headerlink\" title=\"扩展运算符（spread）\"></a>扩展运算符（spread）</h2><p>是三个点（…）。将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])  <span class=\"comment\">//1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<p>主要用于函数的调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>]))  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add1</span>(<span class=\"params\">a,...arg</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [a,...arg]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h2><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1;</span><br><span class=\"line\">arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1,arr2)  <span class=\"comment\">// [4, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出<code>arr2</code>改变，<code>arr1</code>也跟着改变了。<code>ES5</code>中我们可以使用这种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.concat();</span><br><span class=\"line\"> arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1,arr2) <span class=\"comment\">//[1, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6中使用扩展运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];</span><br><span class=\"line\"> arr2[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr1,arr2) <span class=\"comment\">//[1, 2, 3] , [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h2><p>ES5的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [...arr1,...arr2];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"与解构赋值结合\"><a href=\"#与解构赋值结合\" class=\"headerlink\" title=\"与解构赋值结合\"></a>与解构赋值结合</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,...b]  = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)  <span class=\"comment\">//1 ,[2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [c,...d] = [];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c,d)  <span class=\"comment\">//undefined, []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [e,...f] = [<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e,f)  <span class=\"comment\">// undefined ,[null]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [g,...h] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g,h)  <span class=\"comment\">// null ,[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [q,w,...e,r] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q,w,e,r)  <span class=\"comment\">//Rest element must be last element</span></span><br></pre></td></tr></table></figure>\n\n<p>上述最后一个例子中，将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<h2 id=\"字符串转为数组\"><a href=\"#字符串转为数组\" class=\"headerlink\" title=\"字符串转为数组\"></a>字符串转为数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([...<span class=\"string\">'string'</span>])  <span class=\"comment\">//[\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from\"></a>Array.from</h2><p>方法用于将两类对象转为真正的数组：类似数组的对象（<code>array-like object</code>）和可遍历（<code>iterable</code>）的对象（包括 ES6 新增的数据结构 <code>Set</code> 和 <code>Map</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>:<span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>:<span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>:<span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5写法：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].slice.call(arr))  <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(arr))  <span class=\"comment\">//[\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>常见的类似数组的对象是 <code>DOM</code> 操作返回的 <code>NodeList</code> 集合，以及函数内部的<code>arguments</code>对象。<code>Array.from</code>都可以将它们转为真正的数组。</p>\n<p><code>Array.from</code>还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(arr,x=&gt;x&gt;<span class=\"number\">2</span>?x:<span class=\"number\">0</span>))  <span class=\"comment\">//[0, 0, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h2><p>将一组值转化为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>))   <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).length)   <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Array.of()</code>是弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，会导致<code>Array()</code>的行为有差异。</p>\n<p>只有当参数个数不少于 2 个时，<code>Array()</code>才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)); <span class=\"comment\">//[empty × 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>,<span class=\"number\">3</span>))   <span class=\"comment\">//[5, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Array.of()</code>实现的原理是利用<code>[].slice.call()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h2><p>它接受三个参数。</p>\n<ul>\n<li><p>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</p>\n</li>\n<li><p>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</p>\n</li>\n</ul>\n<ul>\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li>\n</ul>\n<p>这三个参数都应该是数值，如果不是，会自动转为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>))   <span class=\"comment\">//[3, 4, 5, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find-和-findIndex\"><a href=\"#find-和-findIndex\" class=\"headerlink\" title=\"find() 和 findIndex()\"></a>find() 和 findIndex()</h2><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x&gt;<span class=\"number\">3</span>))   <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x&gt;<span class=\"number\">7</span>))   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\">(<span class=\"params\">val,index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h2><p><code>fill</code>方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</p>\n<p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">//[1, 0, 0, 4]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries-，keys-和-values\"><a href=\"#entries-，keys-和-values\" class=\"headerlink\" title=\"entries()，keys() 和 values()\"></a>entries()，keys() 和 values()</h2><p>用于遍历数组，唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>方法返回一个布尔值，表示某个数组是否包含给定的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">arr.includes(<span class=\"string\">'d'</span>)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法的第二个参数表示搜索的起始位置，默认为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">arr.includes(<span class=\"string\">'a'</span>,<span class=\"number\">1</span>)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"对象的扩展","comments":1,"description":"对象的扩展","date":"2017-05-12T05:15:26.000Z","keywords":"对象的扩展, 对象, 结构赋值","_content":"\n## 属性的简洁表示方法\n\nES6 允许直接写入变量和函数，作为对象的属性和方法。\n\n```js\nconst a = 'str';\nconst fun = {a};\nconsole.log(fun.a)  // str\nfunction foo(x,y){\n  return {x,y}\n}\nlet bar = foo(1,2)\nconsole.log(bar.x,bar.y)  //1 , 2\n```\n\n除了属性可以简写，方法也可以简写：\n\n```js\nconst foo = {\n    methods:function(){\n        console.log('foo')\n    }\n}\nconst bar = {\n    methods(){\n        console.log('bar')\n    }\n}\nfoo.methods()  //foo\nbar.methods()  //bar\n```\n\n## 属性名表达式\n\njs对象定义属性，有两种方法：\n\n```js\nconst foo = {};\nfoo.a = 'a';     //第一种\n\nfoo['b'] = 'b';    //第二种\nconsole.log(foo)  //{a: \"a\", b: \"b\"}\n```\n\n表达式还可以用于定义方法名：\n\n```js\nconst foo = {\n    ['m'+'ethods'](){\n        console.log('foo')\n    }\n};\nfoo.methods()  //foo\n```\n\n属性名表达式与简洁表示法，不能同时使用，会报错。\n\n## 方法的name\n函数的name属性，返回函数名\n\n```js\nconst foo = {\n    methods(){\n        console.log('foo')\n    }\n};\nconsole.log(foo.methods.name)  //methods\n```\n\n## Object.is\nES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。`Object.is`就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。\n\n```js\nconsole.log('foo'==='foo');  //true\n\nconsole.log(Object.is('foo','foo'));  //true\n\n//但是他们在处理+0与-0和NaN与NaN的关系的时候不同：\nconsole.log(+0===-0);  //true\nconsole.log(NaN===NaN);  //false\n\nconsole.log(Object.is(+0,-0))   //false\nconsole.log(Object.is(NaN,NaN))  //true\n```\n\n## Object.assign(target,source)\n\n`Object.assign`方法用于对象的合并，将源对象（`source`）的所有可枚举属性，复制到目标对象（`target`）。\n\n```js\nconst [foo,bar] = [{a:1},{b:2}];\nObject.assign(foo,bar);\nconsole.log(foo)  //{a: 1, b: 2}\n```\n\n如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:2}];\nObject.assign(foo,bar);\nconsole.log(foo)  //{a: 3, b: 2}\n```\n\n如果只有一个参数，`Object.assign`会直接返回该参数。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:2}];\nObject.assign(foo);\nconsole.log(foo)  //{a:1}\n```\n\n如果该参数不是对象，则会先转成对象，然后返回。\n\n```js\nconsole.log(typeof Object.assign(1))  //object\n//undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\nconsole.log(Object.assign(null))  //Cannot convert undefined or null to objectat Function.assign (<anonymous>)\n\nconsole.log(Object.assign(undefined))  //Cannot convert undefined or null to objectat Function.assign (<anonymous>)\n//只要undefined与null不在target位置就不会报错\n\nconst [foo,bar,baz] = [{a:1},undefined,null];\n\nconsole.log(Object.assign(foo,bar))  //{a:1}\n\nconsole.log(Object.assign(foo,baz))  //{a:1}\n```\n\n其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。\n\n`Object.assign`拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（`enumerable: false`）。\n\n```js\nconst foo = {a:1}\nObject.assign(foo,Object.defineProperty({},'invisible',{\n    enumerable: false,\n    value: 'hello'\n}))\nconsole.log(foo)  //{a:1}\n```\n\n## 注意点\n\n1. Object.assign()是浅拷贝，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n\n```js\nconst [foo,bar] = [{a:{b:1}},{}]\nObject.assign(bar,foo)\nbar.a.b = 2;\nconsole.log(foo)  //{a:{b:2}}\n```\n\n源对象foo的a属性的值是一个对象，`Object.assign`拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n2. 同名属性的替换\n\n嵌套的对象，一旦遇到同名属性，`Object.assign`的处理方法是替换，而不是添加。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:4}]\nObject.assign(bar,foo)\nconsole.log(bar)  //{a: 1, b: 4}\n```\n3. 数组的处理\n\n`Object.assign`可以用来处理数组，但是会把数组视为对象。\n\n```js\nconst [foo,bar] = [[1,2,3],[4,5]];\nObject.assign(foo,bar);\nconsole.log(foo);  //[4,5,3]\n```\n\n`Object.assign`把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。\n\n4. 取值函数的处理\n\n\n`Object.assign`只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。\n\n```js\nconst foo = {\n    get methods(){\n        return 3\n    }\n}\nconst bar = {};\nObject.assign(bar,foo);\nconsole.log(bar);  //{methods: 3}\n```\n","source":"_posts/es6-6.md","raw":"---\ntitle: 对象的扩展\ncomments: true\ndescription: 对象的扩展\ntags: \"ES6\"\ndate: 2017-05-12 13:15:26\ncategories: \"ES6\"\nkeywords: 对象的扩展, 对象, 结构赋值 \n---\n\n## 属性的简洁表示方法\n\nES6 允许直接写入变量和函数，作为对象的属性和方法。\n\n```js\nconst a = 'str';\nconst fun = {a};\nconsole.log(fun.a)  // str\nfunction foo(x,y){\n  return {x,y}\n}\nlet bar = foo(1,2)\nconsole.log(bar.x,bar.y)  //1 , 2\n```\n\n除了属性可以简写，方法也可以简写：\n\n```js\nconst foo = {\n    methods:function(){\n        console.log('foo')\n    }\n}\nconst bar = {\n    methods(){\n        console.log('bar')\n    }\n}\nfoo.methods()  //foo\nbar.methods()  //bar\n```\n\n## 属性名表达式\n\njs对象定义属性，有两种方法：\n\n```js\nconst foo = {};\nfoo.a = 'a';     //第一种\n\nfoo['b'] = 'b';    //第二种\nconsole.log(foo)  //{a: \"a\", b: \"b\"}\n```\n\n表达式还可以用于定义方法名：\n\n```js\nconst foo = {\n    ['m'+'ethods'](){\n        console.log('foo')\n    }\n};\nfoo.methods()  //foo\n```\n\n属性名表达式与简洁表示法，不能同时使用，会报错。\n\n## 方法的name\n函数的name属性，返回函数名\n\n```js\nconst foo = {\n    methods(){\n        console.log('foo')\n    }\n};\nconsole.log(foo.methods.name)  //methods\n```\n\n## Object.is\nES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。`Object.is`就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。\n\n```js\nconsole.log('foo'==='foo');  //true\n\nconsole.log(Object.is('foo','foo'));  //true\n\n//但是他们在处理+0与-0和NaN与NaN的关系的时候不同：\nconsole.log(+0===-0);  //true\nconsole.log(NaN===NaN);  //false\n\nconsole.log(Object.is(+0,-0))   //false\nconsole.log(Object.is(NaN,NaN))  //true\n```\n\n## Object.assign(target,source)\n\n`Object.assign`方法用于对象的合并，将源对象（`source`）的所有可枚举属性，复制到目标对象（`target`）。\n\n```js\nconst [foo,bar] = [{a:1},{b:2}];\nObject.assign(foo,bar);\nconsole.log(foo)  //{a: 1, b: 2}\n```\n\n如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:2}];\nObject.assign(foo,bar);\nconsole.log(foo)  //{a: 3, b: 2}\n```\n\n如果只有一个参数，`Object.assign`会直接返回该参数。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:2}];\nObject.assign(foo);\nconsole.log(foo)  //{a:1}\n```\n\n如果该参数不是对象，则会先转成对象，然后返回。\n\n```js\nconsole.log(typeof Object.assign(1))  //object\n//undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\nconsole.log(Object.assign(null))  //Cannot convert undefined or null to objectat Function.assign (<anonymous>)\n\nconsole.log(Object.assign(undefined))  //Cannot convert undefined or null to objectat Function.assign (<anonymous>)\n//只要undefined与null不在target位置就不会报错\n\nconst [foo,bar,baz] = [{a:1},undefined,null];\n\nconsole.log(Object.assign(foo,bar))  //{a:1}\n\nconsole.log(Object.assign(foo,baz))  //{a:1}\n```\n\n其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。\n\n`Object.assign`拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（`enumerable: false`）。\n\n```js\nconst foo = {a:1}\nObject.assign(foo,Object.defineProperty({},'invisible',{\n    enumerable: false,\n    value: 'hello'\n}))\nconsole.log(foo)  //{a:1}\n```\n\n## 注意点\n\n1. Object.assign()是浅拷贝，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n\n```js\nconst [foo,bar] = [{a:{b:1}},{}]\nObject.assign(bar,foo)\nbar.a.b = 2;\nconsole.log(foo)  //{a:{b:2}}\n```\n\n源对象foo的a属性的值是一个对象，`Object.assign`拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n2. 同名属性的替换\n\n嵌套的对象，一旦遇到同名属性，`Object.assign`的处理方法是替换，而不是添加。\n\n```js\nconst [foo,bar] = [{a:1},{a:3,b:4}]\nObject.assign(bar,foo)\nconsole.log(bar)  //{a: 1, b: 4}\n```\n3. 数组的处理\n\n`Object.assign`可以用来处理数组，但是会把数组视为对象。\n\n```js\nconst [foo,bar] = [[1,2,3],[4,5]];\nObject.assign(foo,bar);\nconsole.log(foo);  //[4,5,3]\n```\n\n`Object.assign`把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。\n\n4. 取值函数的处理\n\n\n`Object.assign`只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。\n\n```js\nconst foo = {\n    get methods(){\n        return 3\n    }\n}\nconst bar = {};\nObject.assign(bar,foo);\nconsole.log(bar);  //{methods: 3}\n```\n","slug":"es6-6","published":1,"updated":"2020-12-02T06:49:34.119Z","layout":"post","photos":[],"link":"","_id":"cki71wakk0016tl9kd6igauzs","content":"<h2 id=\"属性的简洁表示方法\"><a href=\"#属性的简洁表示方法\" class=\"headerlink\" title=\"属性的简洁表示方法\"></a>属性的简洁表示方法</h2><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'str'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun = &#123;a&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.a)  <span class=\"comment\">// str</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x,y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.x,bar.y)  <span class=\"comment\">//1 , 2</span></span><br></pre></td></tr></table></figure>\n\n<p>除了属性可以简写，方法也可以简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    methods:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = &#123;</span><br><span class=\"line\">    methods()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.methods()  <span class=\"comment\">//foo</span></span><br><span class=\"line\">bar.methods()  <span class=\"comment\">//bar</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性名表达式\"><a href=\"#属性名表达式\" class=\"headerlink\" title=\"属性名表达式\"></a>属性名表达式</h2><p>js对象定义属性，有两种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</span><br><span class=\"line\">foo.a = <span class=\"string\">'a'</span>;     <span class=\"comment\">//第一种</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo[<span class=\"string\">'b'</span>] = <span class=\"string\">'b'</span>;    <span class=\"comment\">//第二种</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: \"a\", b: \"b\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>表达式还可以用于定义方法名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    [<span class=\"string\">'m'</span>+<span class=\"string\">'ethods'</span>]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.methods()  <span class=\"comment\">//foo</span></span><br></pre></td></tr></table></figure>\n\n<p>属性名表达式与简洁表示法，不能同时使用，会报错。</p>\n<h2 id=\"方法的name\"><a href=\"#方法的name\" class=\"headerlink\" title=\"方法的name\"></a>方法的name</h2><p>函数的name属性，返回函数名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    methods()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.methods.name)  <span class=\"comment\">//methods</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is\"></a>Object.is</h2><p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>===<span class=\"string\">'foo'</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"string\">'foo'</span>,<span class=\"string\">'foo'</span>));  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是他们在处理+0与-0和NaN与NaN的关系的时候不同：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span>===<span class=\"number\">-0</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span>===<span class=\"literal\">NaN</span>);  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>,<span class=\"number\">-0</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>,<span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign-target-source\"><a href=\"#Object-assign-target-source\" class=\"headerlink\" title=\"Object.assign(target,source)\"></a>Object.assign(target,source)</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（<code>source</code>）的所有可枚举属性，复制到目标对象（<code>target</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: 3, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">1</span>))  <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"comment\">//undefined和null无法转成对象，所以如果它们作为参数，就会报错。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>))  <span class=\"comment\">//Cannot convert undefined or null to objectat Function.assign (&lt;anonymous&gt;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//Cannot convert undefined or null to objectat Function.assign (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">//只要undefined与null不在target位置就不会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar,baz] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(foo,bar))  <span class=\"comment\">//&#123;a:1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(foo,baz))  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。</p>\n<p><code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,<span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;,<span class=\"string\">'invisible'</span>,&#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    value: <span class=\"string\">'hello'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li>Object.assign()是浅拷贝，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:<span class=\"number\">1</span>&#125;&#125;,&#123;&#125;]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo)</span><br><span class=\"line\">bar.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:&#123;b:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>源对象foo的a属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>\n<ol start=\"2\">\n<li>同名属性的替换</li>\n</ol>\n<p>嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">4</span>&#125;]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar)  <span class=\"comment\">//&#123;a: 1, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>数组的处理</li>\n</ol>\n<p><code>Object.assign</code>可以用来处理数组，但是会把数组视为对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>]];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);  <span class=\"comment\">//[4,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。</p>\n<ol start=\"4\">\n<li>取值函数的处理</li>\n</ol>\n<p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> methods()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">//&#123;methods: 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"属性的简洁表示方法\"><a href=\"#属性的简洁表示方法\" class=\"headerlink\" title=\"属性的简洁表示方法\"></a>属性的简洁表示方法</h2><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'str'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun = &#123;a&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun.a)  <span class=\"comment\">// str</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x,y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.x,bar.y)  <span class=\"comment\">//1 , 2</span></span><br></pre></td></tr></table></figure>\n\n<p>除了属性可以简写，方法也可以简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    methods:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = &#123;</span><br><span class=\"line\">    methods()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.methods()  <span class=\"comment\">//foo</span></span><br><span class=\"line\">bar.methods()  <span class=\"comment\">//bar</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性名表达式\"><a href=\"#属性名表达式\" class=\"headerlink\" title=\"属性名表达式\"></a>属性名表达式</h2><p>js对象定义属性，有两种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</span><br><span class=\"line\">foo.a = <span class=\"string\">'a'</span>;     <span class=\"comment\">//第一种</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo[<span class=\"string\">'b'</span>] = <span class=\"string\">'b'</span>;    <span class=\"comment\">//第二种</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: \"a\", b: \"b\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>表达式还可以用于定义方法名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    [<span class=\"string\">'m'</span>+<span class=\"string\">'ethods'</span>]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.methods()  <span class=\"comment\">//foo</span></span><br></pre></td></tr></table></figure>\n\n<p>属性名表达式与简洁表示法，不能同时使用，会报错。</p>\n<h2 id=\"方法的name\"><a href=\"#方法的name\" class=\"headerlink\" title=\"方法的name\"></a>方法的name</h2><p>函数的name属性，返回函数名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    methods()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.methods.name)  <span class=\"comment\">//methods</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is\"></a>Object.is</h2><p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>===<span class=\"string\">'foo'</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"string\">'foo'</span>,<span class=\"string\">'foo'</span>));  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//但是他们在处理+0与-0和NaN与NaN的关系的时候不同：</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span>===<span class=\"number\">-0</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span>===<span class=\"literal\">NaN</span>);  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>,<span class=\"number\">-0</span>))   <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>,<span class=\"literal\">NaN</span>))  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign-target-source\"><a href=\"#Object-assign-target-source\" class=\"headerlink\" title=\"Object.assign(target,source)\"></a>Object.assign(target,source)</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（<code>source</code>）的所有可枚举属性，复制到目标对象（<code>target</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a: 3, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">1</span>))  <span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"comment\">//undefined和null无法转成对象，所以如果它们作为参数，就会报错。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>))  <span class=\"comment\">//Cannot convert undefined or null to objectat Function.assign (&lt;anonymous&gt;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>))  <span class=\"comment\">//Cannot convert undefined or null to objectat Function.assign (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">//只要undefined与null不在target位置就不会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar,baz] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(foo,bar))  <span class=\"comment\">//&#123;a:1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(foo,baz))  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。</p>\n<p><code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,<span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;,<span class=\"string\">'invisible'</span>,&#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    value: <span class=\"string\">'hello'</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li>Object.assign()是浅拷贝，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:<span class=\"number\">1</span>&#125;&#125;,&#123;&#125;]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo)</span><br><span class=\"line\">bar.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)  <span class=\"comment\">//&#123;a:&#123;b:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>源对象foo的a属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>\n<ol start=\"2\">\n<li>同名属性的替换</li>\n</ol>\n<p>嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"number\">4</span>&#125;]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar)  <span class=\"comment\">//&#123;a: 1, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>数组的处理</li>\n</ol>\n<p><code>Object.assign</code>可以用来处理数组，但是会把数组视为对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [foo,bar] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>]];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(foo,bar);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);  <span class=\"comment\">//[4,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。</p>\n<ol start=\"4\">\n<li>取值函数的处理</li>\n</ol>\n<p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> methods()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(bar,foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">//&#123;methods: 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Symbol","comments":1,"description":"ES6 引入Symbol 是因为在ES5中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，Symbol保证每个属性的名字都是独一无二。","date":"2017-05-27T06:23:29.000Z","keywords":"ES6, Symbol","_content":"\n`ES6` 引入`Symbol` 是因为在`ES5`中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，`Symbol`保证每个属性的名字都是独一无二。\n\n\nES6中有7种数据类型，分别是：Number，null，Array，Boolean，Object，String，Symbol。\n\n`Symbol()`中可以接受一个字符串作为参数，不加参数的话都是Symbol（），不利于区分。\n\n```js\nlet [a,b,c,d] = [Symbol(),Symbol(),Symbol('c'),Symbol('d')];\nconsole.log(a)  //Symbol()\n\nconsole.log(b,a===b,Object.is(a,b))  //Symbol() false false\nconsole.log(c) //Symbol(c)\n\nconsole.log(d,c===d,Object.is(c,d))  //Symbol(d) false false\n```\n\n上面的例子我们可以看出：接受字符串更利于分辨。而且我们也可以得知，由于`Symbol（）`是独一无二的标志，两个`Symbol`变量，在`Symbol（）`没有接受参数的时候，两者不相等。接受不同参数两者不相等，接受同一个参数的时候两者也是不相等。\n\n```js\nlet [a,b] = [Symbol('a'),Symbol('a')];\nconsole.log(a===b,Object.is(a,b))   //false false\n```\n\n`Symbol` 值不能与其他值进行运算，但是转为字符串和bool值。\n\n```js\nlet a = Symbol('a');\nconsole.log(a+1);  //Cannot convert a Symbol value to a number\nconsole.log(a+'b')  // Cannot convert a Symbol value to a string\nconsole.log(a+null)  // Cannot convert a Symbol value to a number\nconsole.log(a.toString())  //'Symbol(a)'\nconsole.log(!a)  //false\n```\n\n1. Symbol作为属性名\n\n\n用于对象的属性名，就能保证不会出现同名的属性。\n\n下面三种都可以得到属性值：\n\n```js\nlet [a,b] = [Symbol(),{}];\nb[a] = 'hbb';\nconsole.log(b[a])  //hbb\n\nlet a= Symbol();\nlet b = {[a]:'hbb'};\nconsole.log(b[a])  //hbb\n\nlet [a,b]= [Symbol(),{}];\nObject.defineProperty(b,a,{value:'hbb'})\nconsole.log(b[a])  //hbb\n```\n\n上例中，在对象的内部，使用 `Symbol` 值定义属性时，`Symbol` 值必须放在方括号之中。\n\n不能使用.运算，点运算符后面总是字符串，所以不会读取`mySymbol`作为标识名所指代的那个值。\n\n2. 属性名的遍历\n\n\n`Symbol` 作为属性名，该属性不会出现在`for...in`、`for...of`循环中，也不会被`Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()`返回。但是，它也不是私有属性，有一个`Object.getOwnPropertySymbols`方法，可以获取指定对象的所有 `Symbol` 属性名。\n\n```js\nconst json = {\"name\":\"hbb\",\"age\":\"18\"};\nlet [a,b] = [Symbol('a'),Symbol('b')];\njson[a] = \"a\";\njson[b] = \"b\";\nlet getSymbol = Object.getOwnPropertySymbols(json);\nconsole.log(getSymbol)  //[Symbol(a), Symbol(b)];\n\nfor (const key in json) {\n    console.log(key)  //name age\n}\nconsole.log(Reflect.ownKeys(json))  //[\"name\", \"age\", Symbol(a), Symbol(b)]\n```\n\n上例看出`for...in`中没有出现，但是在`Reflect.ownKeys`方法可以返回所有类型的键名，包括常规键名和 `Symbol` 键名。\n\n3. Symbol.for()，Symbol.keyFor()\n\n\n我们希望重新使用同一个 `Symbol` 值，`Symbol.for`方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 `Symbol` 值。如果有，就返回这个 `Symbol` 值，否则就新建并返回一个以该字符串为名称的 `Symbol` 值。\n\n```js\nlet [a,b] = [Symbol.for('foo'),Symbol.for('foo')];\nconsole.log(a===b,Object.is(a,b))  //true  true\n```\n\na和b都是 `Symbol` 值，但是它们都是同样参数的`Symbol.for`方法生成的，所以实际上是同一个值。\n\n`Symbol.for()`不会每次调用就返回一个新的 `Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用`Symbol.for(\"a\")`30 次，每次都会返回同一个 `Symbol` 值，但是调用`Symbol(\"a\")`30 次，会返回 30 个不同的 `Symbol` 值。\n\n`Symbol.for`为 `Symbol` 值登记的名字,`Symbol.keyFor`方法返回一个已登记的 `Symbol` 类型值的`key`。\n\n```js\nlet [a,b] = [Symbol.for('foo'),Symbol('foo')];\nconsole.log(Symbol.keyFor(a),Symbol.keyFor(b))  //foo undefined\n```\n\n变量b属于未登记的 `Symbol` 值，所以返回`undefined`。","source":"_posts/es6-7.md","raw":"---\ntitle: Symbol\ncomments: true\ndescription: ES6 引入Symbol 是因为在ES5中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，Symbol保证每个属性的名字都是独一无二。\ntags: \"ES6\"\ndate: 2017-05-27 14:23:29\ncategories: \"ES6\"\nkeywords: ES6, Symbol\n---\n\n`ES6` 引入`Symbol` 是因为在`ES5`中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，`Symbol`保证每个属性的名字都是独一无二。\n\n\nES6中有7种数据类型，分别是：Number，null，Array，Boolean，Object，String，Symbol。\n\n`Symbol()`中可以接受一个字符串作为参数，不加参数的话都是Symbol（），不利于区分。\n\n```js\nlet [a,b,c,d] = [Symbol(),Symbol(),Symbol('c'),Symbol('d')];\nconsole.log(a)  //Symbol()\n\nconsole.log(b,a===b,Object.is(a,b))  //Symbol() false false\nconsole.log(c) //Symbol(c)\n\nconsole.log(d,c===d,Object.is(c,d))  //Symbol(d) false false\n```\n\n上面的例子我们可以看出：接受字符串更利于分辨。而且我们也可以得知，由于`Symbol（）`是独一无二的标志，两个`Symbol`变量，在`Symbol（）`没有接受参数的时候，两者不相等。接受不同参数两者不相等，接受同一个参数的时候两者也是不相等。\n\n```js\nlet [a,b] = [Symbol('a'),Symbol('a')];\nconsole.log(a===b,Object.is(a,b))   //false false\n```\n\n`Symbol` 值不能与其他值进行运算，但是转为字符串和bool值。\n\n```js\nlet a = Symbol('a');\nconsole.log(a+1);  //Cannot convert a Symbol value to a number\nconsole.log(a+'b')  // Cannot convert a Symbol value to a string\nconsole.log(a+null)  // Cannot convert a Symbol value to a number\nconsole.log(a.toString())  //'Symbol(a)'\nconsole.log(!a)  //false\n```\n\n1. Symbol作为属性名\n\n\n用于对象的属性名，就能保证不会出现同名的属性。\n\n下面三种都可以得到属性值：\n\n```js\nlet [a,b] = [Symbol(),{}];\nb[a] = 'hbb';\nconsole.log(b[a])  //hbb\n\nlet a= Symbol();\nlet b = {[a]:'hbb'};\nconsole.log(b[a])  //hbb\n\nlet [a,b]= [Symbol(),{}];\nObject.defineProperty(b,a,{value:'hbb'})\nconsole.log(b[a])  //hbb\n```\n\n上例中，在对象的内部，使用 `Symbol` 值定义属性时，`Symbol` 值必须放在方括号之中。\n\n不能使用.运算，点运算符后面总是字符串，所以不会读取`mySymbol`作为标识名所指代的那个值。\n\n2. 属性名的遍历\n\n\n`Symbol` 作为属性名，该属性不会出现在`for...in`、`for...of`循环中，也不会被`Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()`返回。但是，它也不是私有属性，有一个`Object.getOwnPropertySymbols`方法，可以获取指定对象的所有 `Symbol` 属性名。\n\n```js\nconst json = {\"name\":\"hbb\",\"age\":\"18\"};\nlet [a,b] = [Symbol('a'),Symbol('b')];\njson[a] = \"a\";\njson[b] = \"b\";\nlet getSymbol = Object.getOwnPropertySymbols(json);\nconsole.log(getSymbol)  //[Symbol(a), Symbol(b)];\n\nfor (const key in json) {\n    console.log(key)  //name age\n}\nconsole.log(Reflect.ownKeys(json))  //[\"name\", \"age\", Symbol(a), Symbol(b)]\n```\n\n上例看出`for...in`中没有出现，但是在`Reflect.ownKeys`方法可以返回所有类型的键名，包括常规键名和 `Symbol` 键名。\n\n3. Symbol.for()，Symbol.keyFor()\n\n\n我们希望重新使用同一个 `Symbol` 值，`Symbol.for`方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 `Symbol` 值。如果有，就返回这个 `Symbol` 值，否则就新建并返回一个以该字符串为名称的 `Symbol` 值。\n\n```js\nlet [a,b] = [Symbol.for('foo'),Symbol.for('foo')];\nconsole.log(a===b,Object.is(a,b))  //true  true\n```\n\na和b都是 `Symbol` 值，但是它们都是同样参数的`Symbol.for`方法生成的，所以实际上是同一个值。\n\n`Symbol.for()`不会每次调用就返回一个新的 `Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用`Symbol.for(\"a\")`30 次，每次都会返回同一个 `Symbol` 值，但是调用`Symbol(\"a\")`30 次，会返回 30 个不同的 `Symbol` 值。\n\n`Symbol.for`为 `Symbol` 值登记的名字,`Symbol.keyFor`方法返回一个已登记的 `Symbol` 类型值的`key`。\n\n```js\nlet [a,b] = [Symbol.for('foo'),Symbol('foo')];\nconsole.log(Symbol.keyFor(a),Symbol.keyFor(b))  //foo undefined\n```\n\n变量b属于未登记的 `Symbol` 值，所以返回`undefined`。","slug":"es6-7","published":1,"updated":"2020-12-02T06:49:34.119Z","layout":"post","photos":[],"link":"","_id":"cki71wakl0019tl9kzpiks46u","content":"<p><code>ES6</code> 引入<code>Symbol</code> 是因为在<code>ES5</code>中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，<code>Symbol</code>保证每个属性的名字都是独一无二。</p>\n<p>ES6中有7种数据类型，分别是：Number，null，Array，Boolean，Object，String，Symbol。</p>\n<p><code>Symbol()</code>中可以接受一个字符串作为参数，不加参数的话都是Symbol（），不利于区分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c,d] = [<span class=\"built_in\">Symbol</span>(),<span class=\"built_in\">Symbol</span>(),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'c'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'d'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//Symbol()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,a===b,<span class=\"built_in\">Object</span>.is(a,b))  <span class=\"comment\">//Symbol() false false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//Symbol(c)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d,c===d,<span class=\"built_in\">Object</span>.is(c,d))  <span class=\"comment\">//Symbol(d) false false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们可以看出：接受字符串更利于分辨。而且我们也可以得知，由于<code>Symbol（）</code>是独一无二的标志，两个<code>Symbol</code>变量，在<code>Symbol（）</code>没有接受参数的时候，两者不相等。接受不同参数两者不相等，接受同一个参数的时候两者也是不相等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a===b,<span class=\"built_in\">Object</span>.is(a,b))   <span class=\"comment\">//false false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbol</code> 值不能与其他值进行运算，但是转为字符串和bool值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"number\">1</span>);  <span class=\"comment\">//Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"string\">'b'</span>)  <span class=\"comment\">// Cannot convert a Symbol value to a string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"literal\">null</span>)  <span class=\"comment\">// Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.toString())  <span class=\"comment\">//'Symbol(a)'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!a)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Symbol作为属性名</li>\n</ol>\n<p>用于对象的属性名，就能保证不会出现同名的属性。</p>\n<p>下面三种都可以得到属性值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(),&#123;&#125;];</span><br><span class=\"line\">b[a] = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;[a]:<span class=\"string\">'hbb'</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b]= [<span class=\"built_in\">Symbol</span>(),&#123;&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,a,&#123;<span class=\"attr\">value</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，在对象的内部，使用 <code>Symbol</code> 值定义属性时，<code>Symbol</code> 值必须放在方括号之中。</p>\n<p>不能使用.运算，点运算符后面总是字符串，所以不会读取<code>mySymbol</code>作为标识名所指代的那个值。</p>\n<ol start=\"2\">\n<li>属性名的遍历</li>\n</ol>\n<p><code>Symbol</code> 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有 <code>Symbol</code> 属性名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hbb\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"string\">\"18\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'b'</span>)];</span><br><span class=\"line\">json[a] = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">json[b] = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getSymbol = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(json);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getSymbol)  <span class=\"comment\">//[Symbol(a), Symbol(b)];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> json) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)  <span class=\"comment\">//name age</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Reflect</span>.ownKeys(json))  <span class=\"comment\">//[\"name\", \"age\", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例看出<code>for...in</code>中没有出现，但是在<code>Reflect.ownKeys</code>方法可以返回所有类型的键名，包括常规键名和 <code>Symbol</code> 键名。</p>\n<ol start=\"3\">\n<li>Symbol.for()，Symbol.keyFor()</li>\n</ol>\n<p>我们希望重新使用同一个 <code>Symbol</code> 值，<code>Symbol.for</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 <code>Symbol</code> 值。如果有，就返回这个 <code>Symbol</code> 值，否则就新建并返回一个以该字符串为名称的 <code>Symbol</code> 值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>),<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a===b,<span class=\"built_in\">Object</span>.is(a,b))  <span class=\"comment\">//true  true</span></span><br></pre></td></tr></table></figure>\n\n<p>a和b都是 <code>Symbol</code> 值，但是它们都是同样参数的<code>Symbol.for</code>方法生成的，所以实际上是同一个值。</p>\n<p><code>Symbol.for()</code>不会每次调用就返回一个新的 <code>Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用</code>Symbol.for(“a”)<code>30 次，每次都会返回同一个</code>Symbol<code>值，但是调用</code>Symbol(“a”)<code>30 次，会返回 30 个不同的</code>Symbol` 值。</p>\n<p><code>Symbol.for</code>为 <code>Symbol</code> 值登记的名字,<code>Symbol.keyFor</code>方法返回一个已登记的 <code>Symbol</code> 类型值的<code>key</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.keyFor(a),<span class=\"built_in\">Symbol</span>.keyFor(b))  <span class=\"comment\">//foo undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>变量b属于未登记的 <code>Symbol</code> 值，所以返回<code>undefined</code>。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><code>ES6</code> 引入<code>Symbol</code> 是因为在<code>ES5</code>中对象的属性都是字符串，在使用一个对象的时候，想要添加新的属性就有可能与原来的属性冲突，<code>Symbol</code>保证每个属性的名字都是独一无二。</p>\n<p>ES6中有7种数据类型，分别是：Number，null，Array，Boolean，Object，String，Symbol。</p>\n<p><code>Symbol()</code>中可以接受一个字符串作为参数，不加参数的话都是Symbol（），不利于区分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c,d] = [<span class=\"built_in\">Symbol</span>(),<span class=\"built_in\">Symbol</span>(),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'c'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'d'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//Symbol()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,a===b,<span class=\"built_in\">Object</span>.is(a,b))  <span class=\"comment\">//Symbol() false false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//Symbol(c)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d,c===d,<span class=\"built_in\">Object</span>.is(c,d))  <span class=\"comment\">//Symbol(d) false false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们可以看出：接受字符串更利于分辨。而且我们也可以得知，由于<code>Symbol（）</code>是独一无二的标志，两个<code>Symbol</code>变量，在<code>Symbol（）</code>没有接受参数的时候，两者不相等。接受不同参数两者不相等，接受同一个参数的时候两者也是不相等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a===b,<span class=\"built_in\">Object</span>.is(a,b))   <span class=\"comment\">//false false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbol</code> 值不能与其他值进行运算，但是转为字符串和bool值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"number\">1</span>);  <span class=\"comment\">//Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"string\">'b'</span>)  <span class=\"comment\">// Cannot convert a Symbol value to a string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a+<span class=\"literal\">null</span>)  <span class=\"comment\">// Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.toString())  <span class=\"comment\">//'Symbol(a)'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!a)  <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Symbol作为属性名</li>\n</ol>\n<p>用于对象的属性名，就能保证不会出现同名的属性。</p>\n<p>下面三种都可以得到属性值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(),&#123;&#125;];</span><br><span class=\"line\">b[a] = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;[a]:<span class=\"string\">'hbb'</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b]= [<span class=\"built_in\">Symbol</span>(),&#123;&#125;];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,a,&#123;<span class=\"attr\">value</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[a])  <span class=\"comment\">//hbb</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，在对象的内部，使用 <code>Symbol</code> 值定义属性时，<code>Symbol</code> 值必须放在方括号之中。</p>\n<p>不能使用.运算，点运算符后面总是字符串，所以不会读取<code>mySymbol</code>作为标识名所指代的那个值。</p>\n<ol start=\"2\">\n<li>属性名的遍历</li>\n</ol>\n<p><code>Symbol</code> 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有 <code>Symbol</code> 属性名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hbb\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"string\">\"18\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'b'</span>)];</span><br><span class=\"line\">json[a] = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">json[b] = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getSymbol = <span class=\"built_in\">Object</span>.getOwnPropertySymbols(json);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getSymbol)  <span class=\"comment\">//[Symbol(a), Symbol(b)];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> json) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)  <span class=\"comment\">//name age</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Reflect</span>.ownKeys(json))  <span class=\"comment\">//[\"name\", \"age\", Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例看出<code>for...in</code>中没有出现，但是在<code>Reflect.ownKeys</code>方法可以返回所有类型的键名，包括常规键名和 <code>Symbol</code> 键名。</p>\n<ol start=\"3\">\n<li>Symbol.for()，Symbol.keyFor()</li>\n</ol>\n<p>我们希望重新使用同一个 <code>Symbol</code> 值，<code>Symbol.for</code>方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 <code>Symbol</code> 值。如果有，就返回这个 <code>Symbol</code> 值，否则就新建并返回一个以该字符串为名称的 <code>Symbol</code> 值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>),<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a===b,<span class=\"built_in\">Object</span>.is(a,b))  <span class=\"comment\">//true  true</span></span><br></pre></td></tr></table></figure>\n\n<p>a和b都是 <code>Symbol</code> 值，但是它们都是同样参数的<code>Symbol.for</code>方法生成的，所以实际上是同一个值。</p>\n<p><code>Symbol.for()</code>不会每次调用就返回一个新的 <code>Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用</code>Symbol.for(“a”)<code>30 次，每次都会返回同一个</code>Symbol<code>值，但是调用</code>Symbol(“a”)<code>30 次，会返回 30 个不同的</code>Symbol` 值。</p>\n<p><code>Symbol.for</code>为 <code>Symbol</code> 值登记的名字,<code>Symbol.keyFor</code>方法返回一个已登记的 <code>Symbol</code> 类型值的<code>key</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b] = [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>),<span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.keyFor(a),<span class=\"built_in\">Symbol</span>.keyFor(b))  <span class=\"comment\">//foo undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>变量b属于未登记的 <code>Symbol</code> 值，所以返回<code>undefined</code>。</p>\n"},{"title":"Set 和 Map 数据结构","comments":1,"description":"Set 和 Map 数据结构","date":"2017-06-08T02:23:29.000Z","keywords":"ES6, Set 和 Map 数据结构","_content":"\n## set\n\nSet 本身是一个构造函数，用来生成 Set 数据结构。\n\nSet类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nSet.prototype.constructor：构造函数，默认就是Set函数。\n\nSet.prototype.size：返回Set实例的成员总数。\n\nSet 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。\n\n- add(value)：添加某个值，返回 Set 结构本身。\n- delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n- has(value)：返回一个布尔值，表示该值是否为Set的成员。\n- clear()：清除所有成员，没有返回值。\n \n```js\nconst [a,b] = [new Set(),[1,2,3,2,3,2,3,4,5,5,56,5]]\nb.forEach(val=>a.add(val))\nconsole.log(a)   //Set(6)\n\na.forEach(val=>console.log(val))  //1,2,3,4,5,56\nconsole.log(a.size)  //6\nconsole.log(a.has(1))  //true\n\na.delete(1)\nconsole.log(a.has(1))  //false\n\na.clear()\nconsole.log(a)  //Set(0) {}\n```\n上例可以看出我们往a中添加值，他自动过滤重复的值。Set 结构不会添加重复的值。\n\nSet 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。\n\n```js\nconst a = new Set([1,2,3,4,4])\nconsole.log(a.size)  //4\nconsole.log(...a)  //1 2 3 4     Array.from方法可以将 Set 结构转为数组。\n```\n\n向 Set 加入值的时候，不会发生类型转换，所以5和\"5\"是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。\n\n```js\nconst a = new Set()\n//添加3，'3'\na.add(3)\na.add('3')\nconsole.log(a.size)  //2\nconsole.log([...a])  //[3,'3']\n//删除\na.delete(3)\na.delete('3')\nconsole.log(a)  //  Set(0) {}\n//添加NaN\na.add(NaN)\na.add(NaN)\nconsole.log(a.size)  //1\nconsole.log([...a])  // [NaN]\n```\n\n上例可以看出在Set结构中：3和'3'是不相等，NaN是相等的。\n\n另外，两个对象总是不相等的。\n\n```js\nconst a = new Set()\na.add({name:'hbb'})\nconsole.log(a.size,a)  //1 Set(1) {{…}}\na.add({name:'hbb'})\nconsole.log(a.size,a)  //2 Set(2) {{…}}\n```\n\n上例中先后加入了相同的对象，可以看出，在Set结构中是不相等的。\n\n数组去重方法：（Array.from方法可以将 Set 结构转为数组。）\n\n```js\nfunction dedupe(array){\nreturn Array.from(new Set(array))\n}\nconsole.log(dedupe([1,1,11,2,3,3]))  //[1,11,2,3]\n```\n\n## Map\n\n`JavaScript` 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制，为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应。\n\n实例的属性和操作方法\n\n```js\nconst [a,b] = [new Map(),{age:18}]\n//set(key,value)   set方法设置键名key对应的键值为value，然后返回整个 Map 结构。\n\na.set('name','hbb')\n//size  size属性返回 Map 结构的成员总数。\n\nconsole.log(a.size)   //1\n// has(key)   has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。\n\nconsole.log(a.has('name'))   //true\n//get(key)   et方法读取key对应的键值，如果找不到key，返回undefined。\n\nconsole.log(a.get('name'))   //hbb\n//delete(key)    delete方法删除某个键，返回true。如果删除失败，返回false。\n\nconsole.log(a.delete('name'))   //true\nconsole.log(a.has('name'))  //false\n\na.set('name','hbb')\na.set('age',18)\nconsole.log(a.size)  //2\n//clear()   clear方法清除所有成员，没有返回值。\nconsole.log(a.clear())   //undefined\n```\n\nMap 结构原生提供三个遍历器生成函数和一个遍历方法。\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历 Map 的所有成员。\n\n\n需要特别注意的是，Set与Map 的遍历顺序就是插入顺序。\n与其他数据结构的互相转换\n\n1. Map转化为数组\n\n最简单的方法就是使用扩展运算符（...）。\n\n```js\nconst a = new Map()\na.set('name','hbb').set('age',18)\nconsole.log([...a])  //[['name','hbb'],['age',18]]\n```\n\n2. 数组转为Map\n\n将数组传入 Map 构造函数，就可以转为 Map。\n\n```js\nconst a = new Map([['name','hbb'],['age',18]])\nconsole.log([a])  //[Map(2)]   0: Map(2) {\"name\" => \"hbb\", \"age\" => 18}  length: 1      __proto__: Array(0)\n```\n\n3. Map 转为对象\n\n```js\nconst map = new Map()\nmap.set('yes',true).set('no',false)\nfunction MapToObj(map){\n    let obj = Object.create(null)\nfor (let [val,key] of map) {\n       obj[key] = val\n    }\nreturn obj\n}\nconsole.log(MapToObj(map),typeof MapToObj(map)) //{true: \"yes\", false: \"no\"}  ,\"object”\n```\n\n4. 对象转为Map\n\n```js\nfunction ObjToMap(obj){\n    let map = new Map()\nfor (let key of Object.keys(obj)) {\n        map.set(key,obj[key])\n    }\n     return map\n}\nconsole.log(ObjToMap({'yes':true,'no':false}),typeof ObjToMap({'yes':true,'no':false}))   //Map(2) {\"yes\" => true, \"no\" => false} ,\"object\"\n```\n\n5. Map转为JSON\n\n```js\nconst map = new Map()\nmap.set('yes',true).set('no',false)\n//先转为对象，再转为JSON\nfunction MapToObj(map){\n    let obj = Object.create(null)\nfor (let [val,index] of map) {\n        obj[index] = val\n    }\nreturn obj\n}\nfunction MapToJson(map){\n    return JSON.stringify(MapToObj(map))\n}\nconsole.log(MapToJson(map))  //{\"true\":\"yes\",\"false\":\"no\"}\n```\n\n另外一种情况是Map数据里面键名有非字符串，跟简单了，只需转为数组，再转为JSON。\n\n```js\nconst map = new Map()\nmap.set({1:'yes'},true).set('no',false)\nfunction MapToJson(map){\n    return JSON.stringify([...map])\n}\nconsole.log(MapToJson(map))  //[[{\"1\":\"yes\"},true],[\"no\",false]]\n```\n\n6. JSON转为Map\n\n也是分为两种情况：\n\n1.所有键名都是字符串，这是需要先转为对象，再转为Map数据。\n\n2.整个 `JSON` 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 `JSON` 的逆操作。\n\n```js\nfunction jsonToMap(jsonStr) {\n  return new Map(JSON.parse(jsonStr));  //先转为数组\n}\nconsole.log(jsonToMap('[[true,7],[{\"foo\":3},[\"abc\"]]]'))   //Map { true => 7, { foo: 3 } => [ 'abc' ] }\n```\n","source":"_posts/es6-8.md","raw":"---\ntitle: Set 和 Map 数据结构\ncomments: true\ndescription: Set 和 Map 数据结构\ntags: \"ES6\"\ndate: 2017-06-08 10:23:29\ncategories: \"ES6\"\nkeywords: ES6, Set 和 Map 数据结构\n---\n\n## set\n\nSet 本身是一个构造函数，用来生成 Set 数据结构。\n\nSet类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nSet.prototype.constructor：构造函数，默认就是Set函数。\n\nSet.prototype.size：返回Set实例的成员总数。\n\nSet 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。\n\n- add(value)：添加某个值，返回 Set 结构本身。\n- delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n- has(value)：返回一个布尔值，表示该值是否为Set的成员。\n- clear()：清除所有成员，没有返回值。\n \n```js\nconst [a,b] = [new Set(),[1,2,3,2,3,2,3,4,5,5,56,5]]\nb.forEach(val=>a.add(val))\nconsole.log(a)   //Set(6)\n\na.forEach(val=>console.log(val))  //1,2,3,4,5,56\nconsole.log(a.size)  //6\nconsole.log(a.has(1))  //true\n\na.delete(1)\nconsole.log(a.has(1))  //false\n\na.clear()\nconsole.log(a)  //Set(0) {}\n```\n上例可以看出我们往a中添加值，他自动过滤重复的值。Set 结构不会添加重复的值。\n\nSet 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。\n\n```js\nconst a = new Set([1,2,3,4,4])\nconsole.log(a.size)  //4\nconsole.log(...a)  //1 2 3 4     Array.from方法可以将 Set 结构转为数组。\n```\n\n向 Set 加入值的时候，不会发生类型转换，所以5和\"5\"是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。\n\n```js\nconst a = new Set()\n//添加3，'3'\na.add(3)\na.add('3')\nconsole.log(a.size)  //2\nconsole.log([...a])  //[3,'3']\n//删除\na.delete(3)\na.delete('3')\nconsole.log(a)  //  Set(0) {}\n//添加NaN\na.add(NaN)\na.add(NaN)\nconsole.log(a.size)  //1\nconsole.log([...a])  // [NaN]\n```\n\n上例可以看出在Set结构中：3和'3'是不相等，NaN是相等的。\n\n另外，两个对象总是不相等的。\n\n```js\nconst a = new Set()\na.add({name:'hbb'})\nconsole.log(a.size,a)  //1 Set(1) {{…}}\na.add({name:'hbb'})\nconsole.log(a.size,a)  //2 Set(2) {{…}}\n```\n\n上例中先后加入了相同的对象，可以看出，在Set结构中是不相等的。\n\n数组去重方法：（Array.from方法可以将 Set 结构转为数组。）\n\n```js\nfunction dedupe(array){\nreturn Array.from(new Set(array))\n}\nconsole.log(dedupe([1,1,11,2,3,3]))  //[1,11,2,3]\n```\n\n## Map\n\n`JavaScript` 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制，为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应。\n\n实例的属性和操作方法\n\n```js\nconst [a,b] = [new Map(),{age:18}]\n//set(key,value)   set方法设置键名key对应的键值为value，然后返回整个 Map 结构。\n\na.set('name','hbb')\n//size  size属性返回 Map 结构的成员总数。\n\nconsole.log(a.size)   //1\n// has(key)   has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。\n\nconsole.log(a.has('name'))   //true\n//get(key)   et方法读取key对应的键值，如果找不到key，返回undefined。\n\nconsole.log(a.get('name'))   //hbb\n//delete(key)    delete方法删除某个键，返回true。如果删除失败，返回false。\n\nconsole.log(a.delete('name'))   //true\nconsole.log(a.has('name'))  //false\n\na.set('name','hbb')\na.set('age',18)\nconsole.log(a.size)  //2\n//clear()   clear方法清除所有成员，没有返回值。\nconsole.log(a.clear())   //undefined\n```\n\nMap 结构原生提供三个遍历器生成函数和一个遍历方法。\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历 Map 的所有成员。\n\n\n需要特别注意的是，Set与Map 的遍历顺序就是插入顺序。\n与其他数据结构的互相转换\n\n1. Map转化为数组\n\n最简单的方法就是使用扩展运算符（...）。\n\n```js\nconst a = new Map()\na.set('name','hbb').set('age',18)\nconsole.log([...a])  //[['name','hbb'],['age',18]]\n```\n\n2. 数组转为Map\n\n将数组传入 Map 构造函数，就可以转为 Map。\n\n```js\nconst a = new Map([['name','hbb'],['age',18]])\nconsole.log([a])  //[Map(2)]   0: Map(2) {\"name\" => \"hbb\", \"age\" => 18}  length: 1      __proto__: Array(0)\n```\n\n3. Map 转为对象\n\n```js\nconst map = new Map()\nmap.set('yes',true).set('no',false)\nfunction MapToObj(map){\n    let obj = Object.create(null)\nfor (let [val,key] of map) {\n       obj[key] = val\n    }\nreturn obj\n}\nconsole.log(MapToObj(map),typeof MapToObj(map)) //{true: \"yes\", false: \"no\"}  ,\"object”\n```\n\n4. 对象转为Map\n\n```js\nfunction ObjToMap(obj){\n    let map = new Map()\nfor (let key of Object.keys(obj)) {\n        map.set(key,obj[key])\n    }\n     return map\n}\nconsole.log(ObjToMap({'yes':true,'no':false}),typeof ObjToMap({'yes':true,'no':false}))   //Map(2) {\"yes\" => true, \"no\" => false} ,\"object\"\n```\n\n5. Map转为JSON\n\n```js\nconst map = new Map()\nmap.set('yes',true).set('no',false)\n//先转为对象，再转为JSON\nfunction MapToObj(map){\n    let obj = Object.create(null)\nfor (let [val,index] of map) {\n        obj[index] = val\n    }\nreturn obj\n}\nfunction MapToJson(map){\n    return JSON.stringify(MapToObj(map))\n}\nconsole.log(MapToJson(map))  //{\"true\":\"yes\",\"false\":\"no\"}\n```\n\n另外一种情况是Map数据里面键名有非字符串，跟简单了，只需转为数组，再转为JSON。\n\n```js\nconst map = new Map()\nmap.set({1:'yes'},true).set('no',false)\nfunction MapToJson(map){\n    return JSON.stringify([...map])\n}\nconsole.log(MapToJson(map))  //[[{\"1\":\"yes\"},true],[\"no\",false]]\n```\n\n6. JSON转为Map\n\n也是分为两种情况：\n\n1.所有键名都是字符串，这是需要先转为对象，再转为Map数据。\n\n2.整个 `JSON` 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 `JSON` 的逆操作。\n\n```js\nfunction jsonToMap(jsonStr) {\n  return new Map(JSON.parse(jsonStr));  //先转为数组\n}\nconsole.log(jsonToMap('[[true,7],[{\"foo\":3},[\"abc\"]]]'))   //Map { true => 7, { foo: 3 } => [ 'abc' ] }\n```\n","slug":"es6-8","published":1,"updated":"2020-12-02T06:49:34.120Z","layout":"post","photos":[],"link":"","_id":"cki71wakn001ctl9k6nbradtz","content":"<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p>\n<p>Set类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n<p>Set.prototype.constructor：构造函数，默认就是Set函数。</p>\n<p>Set.prototype.size：返回Set实例的成员总数。</p>\n<p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p>\n<ul>\n<li>add(value)：添加某个值，返回 Set 结构本身。</li>\n<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>\n<li>clear()：清除所有成员，没有返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(),[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">56</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">b.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>a.add(val))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Set(6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span><span class=\"built_in\">console</span>.log(val))  <span class=\"comment\">//1,2,3,4,5,56</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"number\">1</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"number\">1</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.clear()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出我们往a中添加值，他自动过滤重复的值。Set 结构不会添加重复的值。</p>\n<p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...a)  <span class=\"comment\">//1 2 3 4     Array.from方法可以将 Set 结构转为数组。</span></span><br></pre></td></tr></table></figure>\n\n<p>向 Set 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\"><span class=\"comment\">//添加3，'3'</span></span><br><span class=\"line\">a.add(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.add(<span class=\"string\">'3'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">//[3,'3']</span></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\">a.delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.delete(<span class=\"string\">'3'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//  Set(0) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//添加NaN</span></span><br><span class=\"line\">a.add(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\">a.add(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">// [NaN]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出在Set结构中：3和’3’是不相等，NaN是相等的。</p>\n<p>另外，两个对象总是不相等的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">a.add(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size,a)  <span class=\"comment\">//1 Set(1) &#123;&#123;…&#125;&#125;</span></span><br><span class=\"line\">a.add(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size,a)  <span class=\"comment\">//2 Set(2) &#123;&#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中先后加入了相同的对象，可以看出，在Set结构中是不相等的。</p>\n<p>数组去重方法：（Array.from方法可以将 Set 结构转为数组。）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dedupe</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(array))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dedupe([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]))  <span class=\"comment\">//[1,11,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p><code>JavaScript</code> 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制，为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应。</p>\n<p>实例的属性和操作方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),&#123;<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;]</span><br><span class=\"line\"><span class=\"comment\">//set(key,value)   set方法设置键名key对应的键值为value，然后返回整个 Map 结构。</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>)</span><br><span class=\"line\"><span class=\"comment\">//size  size属性返回 Map 结构的成员总数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)   <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">// has(key)   has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"string\">'name'</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//get(key)   et方法读取key对应的键值，如果找不到key，返回undefined。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.get(<span class=\"string\">'name'</span>))   <span class=\"comment\">//hbb</span></span><br><span class=\"line\"><span class=\"comment\">//delete(key)    delete方法删除某个键，返回true。如果删除失败，返回false。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.delete(<span class=\"string\">'name'</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"string\">'name'</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>)</span><br><span class=\"line\">a.set(<span class=\"string\">'age'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//clear()   clear方法清除所有成员，没有返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.clear())   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p>\n<ul>\n<li>keys()：返回键名的遍历器。</li>\n<li>values()：返回键值的遍历器。</li>\n<li>entries()：返回所有成员的遍历器。</li>\n<li>forEach()：遍历 Map 的所有成员。</li>\n</ul>\n<p>需要特别注意的是，Set与Map 的遍历顺序就是插入顺序。<br>与其他数据结构的互相转换</p>\n<ol>\n<li>Map转化为数组</li>\n</ol>\n<p>最简单的方法就是使用扩展运算符（…）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>).set(<span class=\"string\">'age'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">//[['name','hbb'],['age',18]]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>数组转为Map</li>\n</ol>\n<p>将数组传入 Map 构造函数，就可以转为 Map。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>],[<span class=\"string\">'age'</span>,<span class=\"number\">18</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a])  <span class=\"comment\">//[Map(2)]   0: Map(2) &#123;\"name\" =&gt; \"hbb\", \"age\" =&gt; 18&#125;  length: 1      __proto__: Array(0)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Map 转为对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">'yes'</span>,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToObj</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [val,key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">       obj[key] = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToObj(map),<span class=\"keyword\">typeof</span> MapToObj(map)) <span class=\"comment\">//&#123;true: \"yes\", false: \"no\"&#125;  ,\"object”</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>对象转为Map</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjToMap</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">        map.set(key,obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ObjToMap(&#123;<span class=\"string\">'yes'</span>:<span class=\"literal\">true</span>,<span class=\"string\">'no'</span>:<span class=\"literal\">false</span>&#125;),<span class=\"keyword\">typeof</span> ObjToMap(&#123;<span class=\"string\">'yes'</span>:<span class=\"literal\">true</span>,<span class=\"string\">'no'</span>:<span class=\"literal\">false</span>&#125;))   <span class=\"comment\">//Map(2) &#123;\"yes\" =&gt; true, \"no\" =&gt; false&#125; ,\"object\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>Map转为JSON</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">'yes'</span>,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"comment\">//先转为对象，再转为JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToObj</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [val,index] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">        obj[index] = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToJson</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(MapToObj(map))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToJson(map))  <span class=\"comment\">//&#123;\"true\":\"yes\",\"false\":\"no\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一种情况是Map数据里面键名有非字符串，跟简单了，只需转为数组，再转为JSON。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(&#123;<span class=\"number\">1</span>:<span class=\"string\">'yes'</span>&#125;,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToJson</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify([...map])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToJson(map))  <span class=\"comment\">//[[&#123;\"1\":\"yes\"&#125;,true],[\"no\",false]]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>JSON转为Map</li>\n</ol>\n<p>也是分为两种情况：</p>\n<p>1.所有键名都是字符串，这是需要先转为对象，再转为Map数据。</p>\n<p>2.整个 <code>JSON</code> 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 <code>JSON</code> 的逆操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonToMap</span>(<span class=\"params\">jsonStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">JSON</span>.parse(jsonStr));  <span class=\"comment\">//先转为数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jsonToMap(<span class=\"string\">'[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]'</span>))   <span class=\"comment\">//Map &#123; true =&gt; 7, &#123; foo: 3 &#125; =&gt; [ 'abc' ] &#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p>\n<p>Set类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n<p>Set.prototype.constructor：构造函数，默认就是Set函数。</p>\n<p>Set.prototype.size：返回Set实例的成员总数。</p>\n<p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p>\n<ul>\n<li>add(value)：添加某个值，返回 Set 结构本身。</li>\n<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>\n<li>clear()：清除所有成员，没有返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(),[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">56</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">b.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>a.add(val))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Set(6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span><span class=\"built_in\">console</span>.log(val))  <span class=\"comment\">//1,2,3,4,5,56</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"number\">1</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"number\">1</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.clear()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出我们往a中添加值，他自动过滤重复的值。Set 结构不会添加重复的值。</p>\n<p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...a)  <span class=\"comment\">//1 2 3 4     Array.from方法可以将 Set 结构转为数组。</span></span><br></pre></td></tr></table></figure>\n\n<p>向 Set 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\"><span class=\"comment\">//添加3，'3'</span></span><br><span class=\"line\">a.add(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.add(<span class=\"string\">'3'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">//[3,'3']</span></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\">a.delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.delete(<span class=\"string\">'3'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//  Set(0) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//添加NaN</span></span><br><span class=\"line\">a.add(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\">a.add(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">// [NaN]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出在Set结构中：3和’3’是不相等，NaN是相等的。</p>\n<p>另外，两个对象总是不相等的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">a.add(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size,a)  <span class=\"comment\">//1 Set(1) &#123;&#123;…&#125;&#125;</span></span><br><span class=\"line\">a.add(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'hbb'</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size,a)  <span class=\"comment\">//2 Set(2) &#123;&#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中先后加入了相同的对象，可以看出，在Set结构中是不相等的。</p>\n<p>数组去重方法：（Array.from方法可以将 Set 结构转为数组。）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dedupe</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(array))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dedupe([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]))  <span class=\"comment\">//[1,11,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p><code>JavaScript</code> 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制，为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应。</p>\n<p>实例的属性和操作方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),&#123;<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;]</span><br><span class=\"line\"><span class=\"comment\">//set(key,value)   set方法设置键名key对应的键值为value，然后返回整个 Map 结构。</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>)</span><br><span class=\"line\"><span class=\"comment\">//size  size属性返回 Map 结构的成员总数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)   <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">// has(key)   has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"string\">'name'</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//get(key)   et方法读取key对应的键值，如果找不到key，返回undefined。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.get(<span class=\"string\">'name'</span>))   <span class=\"comment\">//hbb</span></span><br><span class=\"line\"><span class=\"comment\">//delete(key)    delete方法删除某个键，返回true。如果删除失败，返回false。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.delete(<span class=\"string\">'name'</span>))   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.has(<span class=\"string\">'name'</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>)</span><br><span class=\"line\">a.set(<span class=\"string\">'age'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.size)  <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//clear()   clear方法清除所有成员，没有返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.clear())   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p>\n<ul>\n<li>keys()：返回键名的遍历器。</li>\n<li>values()：返回键值的遍历器。</li>\n<li>entries()：返回所有成员的遍历器。</li>\n<li>forEach()：遍历 Map 的所有成员。</li>\n</ul>\n<p>需要特别注意的是，Set与Map 的遍历顺序就是插入顺序。<br>与其他数据结构的互相转换</p>\n<ol>\n<li>Map转化为数组</li>\n</ol>\n<p>最简单的方法就是使用扩展运算符（…）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">a.set(<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>).set(<span class=\"string\">'age'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...a])  <span class=\"comment\">//[['name','hbb'],['age',18]]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>数组转为Map</li>\n</ol>\n<p>将数组传入 Map 构造函数，就可以转为 Map。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'name'</span>,<span class=\"string\">'hbb'</span>],[<span class=\"string\">'age'</span>,<span class=\"number\">18</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([a])  <span class=\"comment\">//[Map(2)]   0: Map(2) &#123;\"name\" =&gt; \"hbb\", \"age\" =&gt; 18&#125;  length: 1      __proto__: Array(0)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Map 转为对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">'yes'</span>,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToObj</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [val,key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">       obj[key] = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToObj(map),<span class=\"keyword\">typeof</span> MapToObj(map)) <span class=\"comment\">//&#123;true: \"yes\", false: \"no\"&#125;  ,\"object”</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>对象转为Map</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjToMap</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">        map.set(key,obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ObjToMap(&#123;<span class=\"string\">'yes'</span>:<span class=\"literal\">true</span>,<span class=\"string\">'no'</span>:<span class=\"literal\">false</span>&#125;),<span class=\"keyword\">typeof</span> ObjToMap(&#123;<span class=\"string\">'yes'</span>:<span class=\"literal\">true</span>,<span class=\"string\">'no'</span>:<span class=\"literal\">false</span>&#125;))   <span class=\"comment\">//Map(2) &#123;\"yes\" =&gt; true, \"no\" =&gt; false&#125; ,\"object\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>Map转为JSON</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">'yes'</span>,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"comment\">//先转为对象，再转为JSON</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToObj</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [val,index] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">        obj[index] = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToJson</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(MapToObj(map))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToJson(map))  <span class=\"comment\">//&#123;\"true\":\"yes\",\"false\":\"no\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一种情况是Map数据里面键名有非字符串，跟简单了，只需转为数组，再转为JSON。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(&#123;<span class=\"number\">1</span>:<span class=\"string\">'yes'</span>&#125;,<span class=\"literal\">true</span>).set(<span class=\"string\">'no'</span>,<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapToJson</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify([...map])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(MapToJson(map))  <span class=\"comment\">//[[&#123;\"1\":\"yes\"&#125;,true],[\"no\",false]]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>JSON转为Map</li>\n</ol>\n<p>也是分为两种情况：</p>\n<p>1.所有键名都是字符串，这是需要先转为对象，再转为Map数据。</p>\n<p>2.整个 <code>JSON</code> 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 <code>JSON</code> 的逆操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonToMap</span>(<span class=\"params\">jsonStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">JSON</span>.parse(jsonStr));  <span class=\"comment\">//先转为数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jsonToMap(<span class=\"string\">'[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]'</span>))   <span class=\"comment\">//Map &#123; true =&gt; 7, &#123; foo: 3 &#125; =&gt; [ 'abc' ] &#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Promise 对象","comments":1,"description":"Promise 对象","date":"2017-08-29T03:23:29.000Z","keywords":"ES6, Promise","_content":"\nPromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 是一个对象，从它可以获取异步操作的消息。\n\nPromise对象是一个构造函数，用来生成Promise实例。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n//do something\n})\nconsole.log(promise,typeof promise)   //Promise, \"object\"\n```\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是`resolve`和`reject`。\n\n- resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。\n\n- reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise实例生成以后，可以用`then`方法分别指定`resolved`状态和`rejected`状态的回调函数。\n\n```js\npromise.then(value=>{\n    console.log('success')\n},error=>{\n    console.log('fail')\n})\n```\n\n`then`方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为`resolved`时调用，第二个回调函数是Promise对象的状态变为`rejected`时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n```js\nfunction settimeout(ms){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,ms,'done')\n    })\n}\nsettimeout(100).then(value=>{\n    console.log(value)   //done\n})\n```\n\n`timeout`方法返回一个Promise实例，过了指定的时间（ms参数）以后，Promise实例的状态变为`resolved`，就会触发`then`方法绑定的回调函数。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n    resolve('success')\n    console.log('next')\n}).then(value=>console.log(value))\nconsole.log('last')\n// first   next  last  success\n```\n\nPromise 新建后立即执行，首先输出 `first`，`next`，`then`方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所`last`先输出，`success`最后输出。\n\n### Promise.prototype.then()\n\nPromise 实例具有`then`方法，也就是说，`then`方法是定义在原型对象`Promise.prototype`上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，`then`方法的第一个参数是`resolved`状态的回调函数，第二个参数（可选）是`rejected`状态的回调函数。\n\n`then`方法返回的是一个新的`Promise`实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即`then`方法后面再调用另一个`then`方法。\n\n### Promise.prototype.catch()\n\n`Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数。\n\nPromise 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。\n\n建议总是使用`catch`方法，而不使用then方法的第二个参数。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n    console.log('first')\n    resolve('success')\n    console.log('next')\n})\n//不推荐这样写\npromise.then(value=>{\n    console.log('success')\n},error=>{\n    console.log('fail')\n})\n//推荐这样写：\n.then(value=>console.log(value))\n.catch(error=>{\n    console.log(error)\n})\n```\n\n跟传统的`try/catch`代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。\n\n```js\nconst  promise = function (){\nreturn new Promise((resolve,reject)=>{\n        console.log(x+2)\n    })\n}\npromise().then(value=>{\n    console.log('done')\n})\nsetTimeout(()=>console.log('123'),1000)\n// Uncaught (in promise) ReferenceError: x is not defined\n// 123\n```\n\n### Promise.prototype.finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n```js\nconst  promise = new Promise((resolve,reject)=>{\n        resolve()\n    })\n    .then(value=>{console.log('done')})\n    .catch(error=>console.log('error'))\n    .finally((res)=>console.log('finally'))\n//done\n//finally\n```\n\n### Promise.all()，Promise.race()，Promise.resolve()\n\n`Promise.all`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```js\nconst[foo,bar] = [new Promise((resolve,reject)=>{}),new Promise((resolve,reject)=>{})]\nconst foobar = Promise.all([foo,bar])\nconsole.log(foobar)   //Promise {<pending>}\n```\n\n`Promise.all`方法接受一个数组作为参数（Promise.all方法的参数可以不是数组，但必须具有 `Iterator` 接口，且返回的每个成员都是 Promise 实例），`foo`,`bar`都是 Promise 实例。\n\n\n`foobar`的状态以及`Promise.race()`，`Promise.resolve()`可以参考这里[promise](http://es6.ruanyifeng.com/#docs/promise)\n\n### Promise.reject()\n\n`Promise.reject(reason)`方法也会返回一个新的 Promise 实例，该实例的状态为rejected。\n\n```js\nconst promise = Promise.reject('error')\n   .then(null,error=>console.log(error))   //error\n//等同于\nconst pro = new Promise((resolve,reject)=>reject('error'))\n.then(null,error=>console.log(error))   //error\n```","source":"_posts/es6-9.md","raw":"---\ntitle: Promise 对象\ncomments: true\ndescription: Promise 对象\ntags: \"ES6\"\ndate: 2017-08-29 11:23:29\ncategories: \"ES6\"\nkeywords: ES6, Promise\n---\n\nPromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 是一个对象，从它可以获取异步操作的消息。\n\nPromise对象是一个构造函数，用来生成Promise实例。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n//do something\n})\nconsole.log(promise,typeof promise)   //Promise, \"object\"\n```\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是`resolve`和`reject`。\n\n- resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。\n\n- reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise实例生成以后，可以用`then`方法分别指定`resolved`状态和`rejected`状态的回调函数。\n\n```js\npromise.then(value=>{\n    console.log('success')\n},error=>{\n    console.log('fail')\n})\n```\n\n`then`方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为`resolved`时调用，第二个回调函数是Promise对象的状态变为`rejected`时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n```js\nfunction settimeout(ms){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,ms,'done')\n    })\n}\nsettimeout(100).then(value=>{\n    console.log(value)   //done\n})\n```\n\n`timeout`方法返回一个Promise实例，过了指定的时间（ms参数）以后，Promise实例的状态变为`resolved`，就会触发`then`方法绑定的回调函数。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n    resolve('success')\n    console.log('next')\n}).then(value=>console.log(value))\nconsole.log('last')\n// first   next  last  success\n```\n\nPromise 新建后立即执行，首先输出 `first`，`next`，`then`方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所`last`先输出，`success`最后输出。\n\n### Promise.prototype.then()\n\nPromise 实例具有`then`方法，也就是说，`then`方法是定义在原型对象`Promise.prototype`上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，`then`方法的第一个参数是`resolved`状态的回调函数，第二个参数（可选）是`rejected`状态的回调函数。\n\n`then`方法返回的是一个新的`Promise`实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即`then`方法后面再调用另一个`then`方法。\n\n### Promise.prototype.catch()\n\n`Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数。\n\nPromise 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。\n\n建议总是使用`catch`方法，而不使用then方法的第二个参数。\n\n```js\nconst promise = new Promise((resolve,reject)=>{\n    console.log('first')\n    resolve('success')\n    console.log('next')\n})\n//不推荐这样写\npromise.then(value=>{\n    console.log('success')\n},error=>{\n    console.log('fail')\n})\n//推荐这样写：\n.then(value=>console.log(value))\n.catch(error=>{\n    console.log(error)\n})\n```\n\n跟传统的`try/catch`代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。\n\n```js\nconst  promise = function (){\nreturn new Promise((resolve,reject)=>{\n        console.log(x+2)\n    })\n}\npromise().then(value=>{\n    console.log('done')\n})\nsetTimeout(()=>console.log('123'),1000)\n// Uncaught (in promise) ReferenceError: x is not defined\n// 123\n```\n\n### Promise.prototype.finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n```js\nconst  promise = new Promise((resolve,reject)=>{\n        resolve()\n    })\n    .then(value=>{console.log('done')})\n    .catch(error=>console.log('error'))\n    .finally((res)=>console.log('finally'))\n//done\n//finally\n```\n\n### Promise.all()，Promise.race()，Promise.resolve()\n\n`Promise.all`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```js\nconst[foo,bar] = [new Promise((resolve,reject)=>{}),new Promise((resolve,reject)=>{})]\nconst foobar = Promise.all([foo,bar])\nconsole.log(foobar)   //Promise {<pending>}\n```\n\n`Promise.all`方法接受一个数组作为参数（Promise.all方法的参数可以不是数组，但必须具有 `Iterator` 接口，且返回的每个成员都是 Promise 实例），`foo`,`bar`都是 Promise 实例。\n\n\n`foobar`的状态以及`Promise.race()`，`Promise.resolve()`可以参考这里[promise](http://es6.ruanyifeng.com/#docs/promise)\n\n### Promise.reject()\n\n`Promise.reject(reason)`方法也会返回一个新的 Promise 实例，该实例的状态为rejected。\n\n```js\nconst promise = Promise.reject('error')\n   .then(null,error=>console.log(error))   //error\n//等同于\nconst pro = new Promise((resolve,reject)=>reject('error'))\n.then(null,error=>console.log(error))   //error\n```","slug":"es6-9","published":1,"updated":"2020-12-02T06:49:34.120Z","layout":"post","photos":[],"link":"","_id":"cki71wakp001ftl9kc7ypb00l","content":"<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 是一个对象，从它可以获取异步操作的消息。</p>\n<p>Promise对象是一个构造函数，用来生成Promise实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(promise,<span class=\"keyword\">typeof</span> promise)   <span class=\"comment\">//Promise, \"object\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。</p>\n<ul>\n<li><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</p>\n</li>\n<li><p>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n</li>\n</ul>\n<p>Promise实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;,error=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为<code>resolved</code>时调用，第二个回调函数是Promise对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">settimeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms,<span class=\"string\">'done'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">settimeout(<span class=\"number\">100</span>).then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)   <span class=\"comment\">//done</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>timeout</code>方法返回一个Promise实例，过了指定的时间（ms参数）以后，Promise实例的状态变为<code>resolved</code>，就会触发<code>then</code>方法绑定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span><span class=\"built_in\">console</span>.log(value))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'last'</span>)</span><br><span class=\"line\"><span class=\"comment\">// first   next  last  success</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise 新建后立即执行，首先输出 <code>first</code>，<code>next</code>，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所<code>last</code>先输出，<code>success</code>最后输出。</p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><p>Promise 实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象<code>Promise.prototype</code>上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p>\n<p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p>建议总是使用<code>catch</code>方法，而不使用then方法的第二个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'first'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//不推荐这样写</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;,error=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//推荐这样写：</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span><span class=\"built_in\">console</span>.log(value))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>跟传统的<code>try/catch</code>代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  promise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x+<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">promise().then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'123'</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)&#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>))</span><br><span class=\"line\">    .finally(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>))</span><br><span class=\"line\"><span class=\"comment\">//done</span></span><br><span class=\"line\"><span class=\"comment\">//finally</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all-，Promise-race-，Promise-resolve\"><a href=\"#Promise-all-，Promise-race-，Promise-resolve\" class=\"headerlink\" title=\"Promise.all()，Promise.race()，Promise.resolve()\"></a>Promise.all()，Promise.race()，Promise.resolve()</h3><p><code>Promise.all</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>[foo,bar] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;&#125;),<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;&#125;)]</span><br><span class=\"line\"><span class=\"keyword\">const</span> foobar = <span class=\"built_in\">Promise</span>.all([foo,bar])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foobar)   <span class=\"comment\">//Promise &#123;&lt;pending&gt;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Promise.all</code>方法接受一个数组作为参数（Promise.all方法的参数可以不是数组，但必须具有 <code>Iterator</code> 接口，且返回的每个成员都是 Promise 实例），<code>foo</code>,<code>bar</code>都是 Promise 实例。</p>\n<p><code>foobar</code>的状态以及<code>Promise.race()</code>，<code>Promise.resolve()</code>可以参考这里<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">promise</a></p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">   .then(<span class=\"literal\">null</span>,error=&gt;<span class=\"built_in\">console</span>.log(error))   <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>reject(<span class=\"string\">'error'</span>))</span><br><span class=\"line\">.then(<span class=\"literal\">null</span>,error=&gt;<span class=\"built_in\">console</span>.log(error))   <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。Promise 是一个对象，从它可以获取异步操作的消息。</p>\n<p>Promise对象是一个构造函数，用来生成Promise实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(promise,<span class=\"keyword\">typeof</span> promise)   <span class=\"comment\">//Promise, \"object\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。</p>\n<ul>\n<li><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</p>\n</li>\n<li><p>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n</li>\n</ul>\n<p>Promise实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;,error=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为<code>resolved</code>时调用，第二个回调函数是Promise对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">settimeout</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve,ms,<span class=\"string\">'done'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">settimeout(<span class=\"number\">100</span>).then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)   <span class=\"comment\">//done</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>timeout</code>方法返回一个Promise实例，过了指定的时间（ms参数）以后，Promise实例的状态变为<code>resolved</code>，就会触发<code>then</code>方法绑定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span><span class=\"built_in\">console</span>.log(value))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'last'</span>)</span><br><span class=\"line\"><span class=\"comment\">// first   next  last  success</span></span><br></pre></td></tr></table></figure>\n\n<p>Promise 新建后立即执行，首先输出 <code>first</code>，<code>next</code>，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所<code>last</code>先输出，<code>success</code>最后输出。</p>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><p>Promise 实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象<code>Promise.prototype</code>上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p>\n<p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>\n<p>Promise 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p>建议总是使用<code>catch</code>方法，而不使用then方法的第二个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'first'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'next'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//不推荐这样写</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;,error=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//推荐这样写：</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span><span class=\"built_in\">console</span>.log(value))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>跟传统的<code>try/catch</code>代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  promise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x+<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">promise().then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'123'</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)&#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>))</span><br><span class=\"line\">    .finally(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>))</span><br><span class=\"line\"><span class=\"comment\">//done</span></span><br><span class=\"line\"><span class=\"comment\">//finally</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all-，Promise-race-，Promise-resolve\"><a href=\"#Promise-all-，Promise-race-，Promise-resolve\" class=\"headerlink\" title=\"Promise.all()，Promise.race()，Promise.resolve()\"></a>Promise.all()，Promise.race()，Promise.resolve()</h3><p><code>Promise.all</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>[foo,bar] = [<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;&#125;),<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;&#125;)]</span><br><span class=\"line\"><span class=\"keyword\">const</span> foobar = <span class=\"built_in\">Promise</span>.all([foo,bar])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foobar)   <span class=\"comment\">//Promise &#123;&lt;pending&gt;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Promise.all</code>方法接受一个数组作为参数（Promise.all方法的参数可以不是数组，但必须具有 <code>Iterator</code> 接口，且返回的每个成员都是 Promise 实例），<code>foo</code>,<code>bar</code>都是 Promise 实例。</p>\n<p><code>foobar</code>的状态以及<code>Promise.race()</code>，<code>Promise.resolve()</code>可以参考这里<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">promise</a></p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">   .then(<span class=\"literal\">null</span>,error=&gt;<span class=\"built_in\">console</span>.log(error))   <span class=\"comment\">//error</span></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>reject(<span class=\"string\">'error'</span>))</span><br><span class=\"line\">.then(<span class=\"literal\">null</span>,error=&gt;<span class=\"built_in\">console</span>.log(error))   <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>"},{"title":"git使用","comments":1,"description":"git基础使用","date":"2017-09-29T04:25:23.000Z","keywords":"Git","_content":"\n![](../../public/img/404.jpg)\n\n## `git init`\n\n  初始化一个空的git仓库\n\n## `git clone`\n\n   克隆一个`git`仓库到本地\n\n## `git add`\n\n   将某个文件添加到缓存\n\n   ![](../../.deploy_git/img/git/git1.png)\n  \"AM\"状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 `git add` 命令将其添加到缓存中。\n\n  **`git add `** 也可以添加多个文件\n  ![gitadd](../../.deploy_git/img/git/git4.png)\n\n## `git status`\n\n  `git status` 以查看在你上次提交之后是否有修改。 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容。\n\n## ` git diff `\n\n  `git diff` 来查看执行 git status 的结果的详细信息。\n\n  ![git diff](../../.deploy_git/img/git/git2.png)\n\n  `git status` 显示你上次提交更新后的更改或者写入缓存的改动， 而 `git diff` 一行一行地显示这些改动具体是啥。\n\n## `git commit -m `\n   \n   将缓存区的内容添加到仓库中。\n\n   `Git` 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。\n\n   ### 配置用户名\n\n    `git config --global user.name 'hbbaly'`\n\n  ### 配置邮箱\n\n    `git config --global user.email  '1422699902@qq.com'`\n\n## `git mv `\n\n![git mv](../../.deploy_git/img/git/git3.png)\n\n修改某个文件的文件名\n\n## `git log` \n   \n   git log命令显示从最近到最远的提交日志\n\n![git log](../../.deploy_git/img/git/git5.png)\n\n   `--pretty=oneline ` 参数显示 commit id(版本号)\n\n![git log](../../.deploy_git/img/git/git6.png)\n\n## `git reset --hard HEAD^`\n\n   在`Git`中，用`HEAD`表示当前版本 ,上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个^比较容易数不过来，所以写成 `HEAD~100`。\n\n  **也可以这样**\n\n  `git reset --hard 14f51fe`\n\n  `hard` 后面版本号没必要写全，前几位就可以了， `Git` 会自动去找。\n\n## `git reflog` \n\n    用来记录你的每一次命令\n\n![git log](../../.deploy_git/img/git/git7.png)\n\n## `git checkout -- `\n\n![git log](../../.deploy_git/img/git/git8.png)\n\n    在工作区的修改全部撤销  `只是工作区的修改不包括缓存部分`\n\n## `git rm`\n\n    删除某个文件\n\n## `git branch`\n\n    查看分支\n\n## `git branch <name>`\n    新建分支\n\n## `git checkout <name>`\n\n    切换分支\n\n## `git checkout -b <name>`\n\n    切换并创建分支\n\n## `git merge <name>`\n\n    合并某分支到当前分支\n\n## `git branch -d <name>`\n\n    删除分支\n\n操作记录如下图：\n\n![git log](../../.deploy_git/img/git/git9.png)\n\n\n## `分支管理策略`\n \n\n![git log](../../.deploy_git/img/git/git10.png)\n\n    上图可以看出操作，我们首先使用`git checkout develop`切换`develop`分支,修改文件，提交。在切回`master`分支，合并`develop`代码。\n\n    ```\n      git merge --no-ff -m \"merge with no-ff\" develop\n    ```\n\n    `--no-ff` 参数，表示禁用`Fast forward`模式，`Git`就会在`merge`时生成一个新的`commit`，这样，从分支历史上就可以看出分支信息。\n\n    `-m` 表示把`commit`描述写进去。\n\n    `git log --graph --pretty=oneline --abbrev-commit`查看分支记录。\n\n **bug分支**\n\n\n   如果工作中我们正在开发某个功能，突然接到一个紧急bug，需要现在修复，而我们手里功能写道一半，还没有提交到（`git commit`）**缓存区**。\n   **git stash**可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。\n\n![git stash](../../.deploy_git/img/git/git11.png)\n\n   - 首先`git stash `把当前工作区中修改的内容保存，`git status`查看当前工作区，没有修改文件。\n   - 创建并切换**bug-101**分支，修改并提交。\n   - 切换回`master`分支，合并**bug-101** 分支\n   - `git stash list`查看之前存储的内容,使用 `git stash apply`(但是恢复后，stash内容并不删除,也可以使用`git stash drop` 回复内容的同时，会删除)\n\n- ## 丢弃没有被合并过的分支\n\n    `git branch -D <name>`强制删除\n\n\n## `git push`\n\n## `git remote`\n\n  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是**origin**。\n\n  `git remote -v`\n\n  查看详细远程库信息\n\n## `推送分支`\n\n  `git push origin <当前推送分支>`  \n\n## `本地分支与远程分支关联`\n\n  **`git checkout -b <name> origin/<name>`**\n\n   在本地创建与远程分支对应的分支。\n\n  **`git branch --set-upstream-to=origin/dev dev`**\n\n  把本地dev分支与远程dev分支关联。\n\n  **`git branch --set-upstream-to=origin/<远程分支> <本地分支>`**\n\n\n# `git tag`\n\n使用`git` 创建一个`tag` ,一个不可修改的历史代码版本。\n\n## `git tag tagname `\n\n  在当前分支打标签，  `git tag v1.0`  为当前分支打上v1.0的标签,只是在存储在本地。\n\n## ` git tag`  \n\n  查看当前分支所打标签，标签不是按时间顺序列出，而是按字母排序的\n\n默认标签是打在最新提交的commit上的。有时候之前commit如果忘了打标签\n\n可以找到历史提交的commit id，然后打上就可以了\n\n`git tag v1.1 4fde738`  中找到commit id 为4fde738 为其打上v1.1标签。\n\n## `git show <tagname> `\n\n 查看标签信息\n\n\n## `git tag -a <tagname> -m \"<desc>\" commit id`\n\n\n   -a 表示打的标签名，-m 说明文字\n\n## `删除标签`\n\n  `git tag -d <tagname>`\n\n  因为创建的标签，都是本地存储，没有提交到远程，可以删除。\n\n  ## `推送某个标签到远程`\n\n\n  **`git push origin <tagname>`**\n\n  一次全部推送尚未推送到远程的本地标签\n\n  **`git push origin --tags`**\n\n## `删除远程标签`\n\n  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：\n\n  **`git tag -d <tagname>`**\n\n  从远程删除。删除命令也是`push`\n\n  **`git push origin :refs/tags/<tagname>`**","source":"_posts/git.md","raw":"---\ntitle: git使用\ncomments: true\ndescription: git基础使用\ntags: \"Git\"\ndate: 2017-09-29 12:25:23\ncategories: \"Git\"\nkeywords: Git\n---\n\n![](../../public/img/404.jpg)\n\n## `git init`\n\n  初始化一个空的git仓库\n\n## `git clone`\n\n   克隆一个`git`仓库到本地\n\n## `git add`\n\n   将某个文件添加到缓存\n\n   ![](../../.deploy_git/img/git/git1.png)\n  \"AM\"状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 `git add` 命令将其添加到缓存中。\n\n  **`git add `** 也可以添加多个文件\n  ![gitadd](../../.deploy_git/img/git/git4.png)\n\n## `git status`\n\n  `git status` 以查看在你上次提交之后是否有修改。 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容。\n\n## ` git diff `\n\n  `git diff` 来查看执行 git status 的结果的详细信息。\n\n  ![git diff](../../.deploy_git/img/git/git2.png)\n\n  `git status` 显示你上次提交更新后的更改或者写入缓存的改动， 而 `git diff` 一行一行地显示这些改动具体是啥。\n\n## `git commit -m `\n   \n   将缓存区的内容添加到仓库中。\n\n   `Git` 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。\n\n   ### 配置用户名\n\n    `git config --global user.name 'hbbaly'`\n\n  ### 配置邮箱\n\n    `git config --global user.email  '1422699902@qq.com'`\n\n## `git mv `\n\n![git mv](../../.deploy_git/img/git/git3.png)\n\n修改某个文件的文件名\n\n## `git log` \n   \n   git log命令显示从最近到最远的提交日志\n\n![git log](../../.deploy_git/img/git/git5.png)\n\n   `--pretty=oneline ` 参数显示 commit id(版本号)\n\n![git log](../../.deploy_git/img/git/git6.png)\n\n## `git reset --hard HEAD^`\n\n   在`Git`中，用`HEAD`表示当前版本 ,上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个^比较容易数不过来，所以写成 `HEAD~100`。\n\n  **也可以这样**\n\n  `git reset --hard 14f51fe`\n\n  `hard` 后面版本号没必要写全，前几位就可以了， `Git` 会自动去找。\n\n## `git reflog` \n\n    用来记录你的每一次命令\n\n![git log](../../.deploy_git/img/git/git7.png)\n\n## `git checkout -- `\n\n![git log](../../.deploy_git/img/git/git8.png)\n\n    在工作区的修改全部撤销  `只是工作区的修改不包括缓存部分`\n\n## `git rm`\n\n    删除某个文件\n\n## `git branch`\n\n    查看分支\n\n## `git branch <name>`\n    新建分支\n\n## `git checkout <name>`\n\n    切换分支\n\n## `git checkout -b <name>`\n\n    切换并创建分支\n\n## `git merge <name>`\n\n    合并某分支到当前分支\n\n## `git branch -d <name>`\n\n    删除分支\n\n操作记录如下图：\n\n![git log](../../.deploy_git/img/git/git9.png)\n\n\n## `分支管理策略`\n \n\n![git log](../../.deploy_git/img/git/git10.png)\n\n    上图可以看出操作，我们首先使用`git checkout develop`切换`develop`分支,修改文件，提交。在切回`master`分支，合并`develop`代码。\n\n    ```\n      git merge --no-ff -m \"merge with no-ff\" develop\n    ```\n\n    `--no-ff` 参数，表示禁用`Fast forward`模式，`Git`就会在`merge`时生成一个新的`commit`，这样，从分支历史上就可以看出分支信息。\n\n    `-m` 表示把`commit`描述写进去。\n\n    `git log --graph --pretty=oneline --abbrev-commit`查看分支记录。\n\n **bug分支**\n\n\n   如果工作中我们正在开发某个功能，突然接到一个紧急bug，需要现在修复，而我们手里功能写道一半，还没有提交到（`git commit`）**缓存区**。\n   **git stash**可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。\n\n![git stash](../../.deploy_git/img/git/git11.png)\n\n   - 首先`git stash `把当前工作区中修改的内容保存，`git status`查看当前工作区，没有修改文件。\n   - 创建并切换**bug-101**分支，修改并提交。\n   - 切换回`master`分支，合并**bug-101** 分支\n   - `git stash list`查看之前存储的内容,使用 `git stash apply`(但是恢复后，stash内容并不删除,也可以使用`git stash drop` 回复内容的同时，会删除)\n\n- ## 丢弃没有被合并过的分支\n\n    `git branch -D <name>`强制删除\n\n\n## `git push`\n\n## `git remote`\n\n  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是**origin**。\n\n  `git remote -v`\n\n  查看详细远程库信息\n\n## `推送分支`\n\n  `git push origin <当前推送分支>`  \n\n## `本地分支与远程分支关联`\n\n  **`git checkout -b <name> origin/<name>`**\n\n   在本地创建与远程分支对应的分支。\n\n  **`git branch --set-upstream-to=origin/dev dev`**\n\n  把本地dev分支与远程dev分支关联。\n\n  **`git branch --set-upstream-to=origin/<远程分支> <本地分支>`**\n\n\n# `git tag`\n\n使用`git` 创建一个`tag` ,一个不可修改的历史代码版本。\n\n## `git tag tagname `\n\n  在当前分支打标签，  `git tag v1.0`  为当前分支打上v1.0的标签,只是在存储在本地。\n\n## ` git tag`  \n\n  查看当前分支所打标签，标签不是按时间顺序列出，而是按字母排序的\n\n默认标签是打在最新提交的commit上的。有时候之前commit如果忘了打标签\n\n可以找到历史提交的commit id，然后打上就可以了\n\n`git tag v1.1 4fde738`  中找到commit id 为4fde738 为其打上v1.1标签。\n\n## `git show <tagname> `\n\n 查看标签信息\n\n\n## `git tag -a <tagname> -m \"<desc>\" commit id`\n\n\n   -a 表示打的标签名，-m 说明文字\n\n## `删除标签`\n\n  `git tag -d <tagname>`\n\n  因为创建的标签，都是本地存储，没有提交到远程，可以删除。\n\n  ## `推送某个标签到远程`\n\n\n  **`git push origin <tagname>`**\n\n  一次全部推送尚未推送到远程的本地标签\n\n  **`git push origin --tags`**\n\n## `删除远程标签`\n\n  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：\n\n  **`git tag -d <tagname>`**\n\n  从远程删除。删除命令也是`push`\n\n  **`git push origin :refs/tags/<tagname>`**","slug":"git","published":1,"updated":"2020-12-02T06:49:34.121Z","layout":"post","photos":[],"link":"","_id":"cki71wakq001itl9kh7fngmw8","content":"<p><img src=\"../../public/img/404.jpg\" alt></p>\n<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a><code>git init</code></h2><p>  初始化一个空的git仓库</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a><code>git clone</code></h2><p>   克隆一个<code>git</code>仓库到本地</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h2><p>   将某个文件添加到缓存</p>\n<p>   <img src=\"../../.deploy_git/img/git/git1.png\" alt><br>  “AM”状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 <code>git add</code> 命令将其添加到缓存中。</p>\n<p>  <strong><code>git add</code></strong> 也可以添加多个文件<br>  <img src=\"../../.deploy_git/img/git/git4.png\" alt=\"gitadd\"></p>\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a><code>git status</code></h2><p>  <code>git status</code> 以查看在你上次提交之后是否有修改。 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容。</p>\n<h2 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a><code>git diff</code></h2><p>  <code>git diff</code> 来查看执行 git status 的结果的详细信息。</p>\n<p>  <img src=\"../../.deploy_git/img/git/git2.png\" alt=\"git diff\"></p>\n<p>  <code>git status</code> 显示你上次提交更新后的更改或者写入缓存的改动， 而 <code>git diff</code> 一行一行地显示这些改动具体是啥。</p>\n<h2 id=\"git-commit-m\"><a href=\"#git-commit-m\" class=\"headerlink\" title=\"git commit -m\"></a><code>git commit -m</code></h2><p>   将缓存区的内容添加到仓库中。</p>\n<p>   <code>Git</code> 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>\n<h3 id=\"配置用户名\"><a href=\"#配置用户名\" class=\"headerlink\" title=\"配置用户名\"></a>配置用户名</h3><pre><code>`git config --global user.name &apos;hbbaly&apos;`</code></pre><h3 id=\"配置邮箱\"><a href=\"#配置邮箱\" class=\"headerlink\" title=\"配置邮箱\"></a>配置邮箱</h3><pre><code>`git config --global user.email  &apos;1422699902@qq.com&apos;`</code></pre><h2 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a><code>git mv</code></h2><p><img src=\"../../.deploy_git/img/git/git3.png\" alt=\"git mv\"></p>\n<p>修改某个文件的文件名</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h2><p>   git log命令显示从最近到最远的提交日志</p>\n<p><img src=\"../../.deploy_git/img/git/git5.png\" alt=\"git log\"></p>\n<p>   <code>--pretty=oneline</code> 参数显示 commit id(版本号)</p>\n<p><img src=\"../../.deploy_git/img/git/git6.png\" alt=\"git log\"></p>\n<h2 id=\"git-reset-hard-HEAD\"><a href=\"#git-reset-hard-HEAD\" class=\"headerlink\" title=\"git reset --hard HEAD^\"></a><code>git reset --hard HEAD^</code></h2><p>   在<code>Git</code>中，用<code>HEAD</code>表示当前版本 ,上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成 <code>HEAD~100</code>。</p>\n<p>  <strong>也可以这样</strong></p>\n<p>  <code>git reset --hard 14f51fe</code></p>\n<p>  <code>hard</code> 后面版本号没必要写全，前几位就可以了， <code>Git</code> 会自动去找。</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a><code>git reflog</code></h2><pre><code>用来记录你的每一次命令</code></pre><p><img src=\"../../.deploy_git/img/git/git7.png\" alt=\"git log\"></p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout --\"></a><code>git checkout --</code></h2><p><img src=\"../../.deploy_git/img/git/git8.png\" alt=\"git log\"></p>\n<pre><code>在工作区的修改全部撤销  `只是工作区的修改不包括缓存部分`</code></pre><h2 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a><code>git rm</code></h2><pre><code>删除某个文件</code></pre><h2 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a><code>git branch</code></h2><pre><code>查看分支</code></pre><h2 id=\"git-branch-lt-name-gt\"><a href=\"#git-branch-lt-name-gt\" class=\"headerlink\" title=\"git branch &lt;name&gt;\"></a><code>git branch &lt;name&gt;</code></h2><pre><code>新建分支</code></pre><h2 id=\"git-checkout-lt-name-gt\"><a href=\"#git-checkout-lt-name-gt\" class=\"headerlink\" title=\"git checkout &lt;name&gt;\"></a><code>git checkout &lt;name&gt;</code></h2><pre><code>切换分支</code></pre><h2 id=\"git-checkout-b-lt-name-gt\"><a href=\"#git-checkout-b-lt-name-gt\" class=\"headerlink\" title=\"git checkout -b &lt;name&gt;\"></a><code>git checkout -b &lt;name&gt;</code></h2><pre><code>切换并创建分支</code></pre><h2 id=\"git-merge-lt-name-gt\"><a href=\"#git-merge-lt-name-gt\" class=\"headerlink\" title=\"git merge &lt;name&gt;\"></a><code>git merge &lt;name&gt;</code></h2><pre><code>合并某分支到当前分支</code></pre><h2 id=\"git-branch-d-lt-name-gt\"><a href=\"#git-branch-d-lt-name-gt\" class=\"headerlink\" title=\"git branch -d &lt;name&gt;\"></a><code>git branch -d &lt;name&gt;</code></h2><pre><code>删除分支</code></pre><p>操作记录如下图：</p>\n<p><img src=\"../../.deploy_git/img/git/git9.png\" alt=\"git log\"></p>\n<h2 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a><code>分支管理策略</code></h2><p><img src=\"../../.deploy_git/img/git/git10.png\" alt=\"git log\"></p>\n<pre><code>上图可以看出操作，我们首先使用`git checkout develop`切换`develop`分支,修改文件，提交。在切回`master`分支，合并`develop`代码。\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; develop</span><br></pre></td></tr></table></figure>\n\n`--no-ff` 参数，表示禁用`Fast forward`模式，`Git`就会在`merge`时生成一个新的`commit`，这样，从分支历史上就可以看出分支信息。\n\n`-m` 表示把`commit`描述写进去。\n\n`git log --graph --pretty=oneline --abbrev-commit`查看分支记录。</code></pre><p> <strong>bug分支</strong></p>\n<p>   如果工作中我们正在开发某个功能，突然接到一个紧急bug，需要现在修复，而我们手里功能写道一半，还没有提交到（<code>git commit</code>）<strong>缓存区</strong>。<br>   <strong>git stash</strong>可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。</p>\n<p><img src=\"../../.deploy_git/img/git/git11.png\" alt=\"git stash\"></p>\n<ul>\n<li>首先<code>git stash</code>把当前工作区中修改的内容保存，<code>git status</code>查看当前工作区，没有修改文件。</li>\n<li>创建并切换<strong>bug-101</strong>分支，修改并提交。</li>\n<li>切换回<code>master</code>分支，合并<strong>bug-101</strong> 分支</li>\n<li><code>git stash list</code>查看之前存储的内容,使用 <code>git stash apply</code>(但是恢复后，stash内容并不删除,也可以使用<code>git stash drop</code> 回复内容的同时，会删除)</li>\n</ul>\n<ul>\n<li><h2 id=\"丢弃没有被合并过的分支\"><a href=\"#丢弃没有被合并过的分支\" class=\"headerlink\" title=\"丢弃没有被合并过的分支\"></a>丢弃没有被合并过的分支</h2><p>  <code>git branch -D &lt;name&gt;</code>强制删除</p>\n</li>\n</ul>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a><code>git push</code></h2><h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a><code>git remote</code></h2><p>  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是<strong>origin</strong>。</p>\n<p>  <code>git remote -v</code></p>\n<p>  查看详细远程库信息</p>\n<h2 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a><code>推送分支</code></h2><p>  <code>git push origin &lt;当前推送分支&gt;</code>  </p>\n<h2 id=\"本地分支与远程分支关联\"><a href=\"#本地分支与远程分支关联\" class=\"headerlink\" title=\"本地分支与远程分支关联\"></a><code>本地分支与远程分支关联</code></h2><p>  <strong><code>git checkout -b &lt;name&gt; origin/&lt;name&gt;</code></strong></p>\n<p>   在本地创建与远程分支对应的分支。</p>\n<p>  <strong><code>git branch --set-upstream-to=origin/dev dev</code></strong></p>\n<p>  把本地dev分支与远程dev分支关联。</p>\n<p>  <strong><code>git branch --set-upstream-to=origin/&lt;远程分支&gt; &lt;本地分支&gt;</code></strong></p>\n<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a><code>git tag</code></h1><p>使用<code>git</code> 创建一个<code>tag</code> ,一个不可修改的历史代码版本。</p>\n<h2 id=\"git-tag-tagname\"><a href=\"#git-tag-tagname\" class=\"headerlink\" title=\"git tag tagname\"></a><code>git tag tagname</code></h2><p>  在当前分支打标签，  <code>git tag v1.0</code>  为当前分支打上v1.0的标签,只是在存储在本地。</p>\n<h2 id=\"git-tag-1\"><a href=\"#git-tag-1\" class=\"headerlink\" title=\"git tag\"></a><code>git tag</code></h2><p>  查看当前分支所打标签，标签不是按时间顺序列出，而是按字母排序的</p>\n<p>默认标签是打在最新提交的commit上的。有时候之前commit如果忘了打标签</p>\n<p>可以找到历史提交的commit id，然后打上就可以了</p>\n<p><code>git tag v1.1 4fde738</code>  中找到commit id 为4fde738 为其打上v1.1标签。</p>\n<h2 id=\"git-show-lt-tagname-gt\"><a href=\"#git-show-lt-tagname-gt\" class=\"headerlink\" title=\"git show &lt;tagname&gt;\"></a><code>git show &lt;tagname&gt;</code></h2><p> 查看标签信息</p>\n<h2 id=\"git-tag-a-lt-tagname-gt-m-quot-lt-desc-gt-quot-commit-id\"><a href=\"#git-tag-a-lt-tagname-gt-m-quot-lt-desc-gt-quot-commit-id\" class=\"headerlink\" title=\"git tag -a &lt;tagname&gt; -m &quot;&lt;desc&gt;&quot; commit id\"></a><code>git tag -a &lt;tagname&gt; -m &quot;&lt;desc&gt;&quot; commit id</code></h2><p>   -a 表示打的标签名，-m 说明文字</p>\n<h2 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a><code>删除标签</code></h2><p>  <code>git tag -d &lt;tagname&gt;</code></p>\n<p>  因为创建的标签，都是本地存储，没有提交到远程，可以删除。</p>\n<h2 id=\"推送某个标签到远程\"><a href=\"#推送某个标签到远程\" class=\"headerlink\" title=\"推送某个标签到远程\"></a><code>推送某个标签到远程</code></h2><p>  <strong><code>git push origin &lt;tagname&gt;</code></strong></p>\n<p>  一次全部推送尚未推送到远程的本地标签</p>\n<p>  <strong><code>git push origin --tags</code></strong></p>\n<h2 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a><code>删除远程标签</code></h2><p>  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>\n<p>  <strong><code>git tag -d &lt;tagname&gt;</code></strong></p>\n<p>  从远程删除。删除命令也是<code>push</code></p>\n<p>  <strong><code>git push origin :refs/tags/&lt;tagname&gt;</code></strong></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><img src=\"../../public/img/404.jpg\" alt></p>\n<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a><code>git init</code></h2><p>  初始化一个空的git仓库</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a><code>git clone</code></h2><p>   克隆一个<code>git</code>仓库到本地</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h2><p>   将某个文件添加到缓存</p>\n<p>   <img src=\"../../.deploy_git/img/git/git1.png\" alt><br>  “AM”状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 <code>git add</code> 命令将其添加到缓存中。</p>\n<p>  <strong><code>git add</code></strong> 也可以添加多个文件<br>  <img src=\"../../.deploy_git/img/git/git4.png\" alt=\"gitadd\"></p>\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a><code>git status</code></h2><p>  <code>git status</code> 以查看在你上次提交之后是否有修改。 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容。</p>\n<h2 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a><code>git diff</code></h2><p>  <code>git diff</code> 来查看执行 git status 的结果的详细信息。</p>\n<p>  <img src=\"../../.deploy_git/img/git/git2.png\" alt=\"git diff\"></p>\n<p>  <code>git status</code> 显示你上次提交更新后的更改或者写入缓存的改动， 而 <code>git diff</code> 一行一行地显示这些改动具体是啥。</p>\n<h2 id=\"git-commit-m\"><a href=\"#git-commit-m\" class=\"headerlink\" title=\"git commit -m\"></a><code>git commit -m</code></h2><p>   将缓存区的内容添加到仓库中。</p>\n<p>   <code>Git</code> 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>\n<h3 id=\"配置用户名\"><a href=\"#配置用户名\" class=\"headerlink\" title=\"配置用户名\"></a>配置用户名</h3><pre><code>`git config --global user.name &apos;hbbaly&apos;`</code></pre><h3 id=\"配置邮箱\"><a href=\"#配置邮箱\" class=\"headerlink\" title=\"配置邮箱\"></a>配置邮箱</h3><pre><code>`git config --global user.email  &apos;1422699902@qq.com&apos;`</code></pre><h2 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a><code>git mv</code></h2><p><img src=\"../../.deploy_git/img/git/git3.png\" alt=\"git mv\"></p>\n<p>修改某个文件的文件名</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h2><p>   git log命令显示从最近到最远的提交日志</p>\n<p><img src=\"../../.deploy_git/img/git/git5.png\" alt=\"git log\"></p>\n<p>   <code>--pretty=oneline</code> 参数显示 commit id(版本号)</p>\n<p><img src=\"../../.deploy_git/img/git/git6.png\" alt=\"git log\"></p>\n<h2 id=\"git-reset-hard-HEAD\"><a href=\"#git-reset-hard-HEAD\" class=\"headerlink\" title=\"git reset --hard HEAD^\"></a><code>git reset --hard HEAD^</code></h2><p>   在<code>Git</code>中，用<code>HEAD</code>表示当前版本 ,上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成 <code>HEAD~100</code>。</p>\n<p>  <strong>也可以这样</strong></p>\n<p>  <code>git reset --hard 14f51fe</code></p>\n<p>  <code>hard</code> 后面版本号没必要写全，前几位就可以了， <code>Git</code> 会自动去找。</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a><code>git reflog</code></h2><pre><code>用来记录你的每一次命令</code></pre><p><img src=\"../../.deploy_git/img/git/git7.png\" alt=\"git log\"></p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout --\"></a><code>git checkout --</code></h2><p><img src=\"../../.deploy_git/img/git/git8.png\" alt=\"git log\"></p>\n<pre><code>在工作区的修改全部撤销  `只是工作区的修改不包括缓存部分`</code></pre><h2 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a><code>git rm</code></h2><pre><code>删除某个文件</code></pre><h2 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a><code>git branch</code></h2><pre><code>查看分支</code></pre><h2 id=\"git-branch-lt-name-gt\"><a href=\"#git-branch-lt-name-gt\" class=\"headerlink\" title=\"git branch &lt;name&gt;\"></a><code>git branch &lt;name&gt;</code></h2><pre><code>新建分支</code></pre><h2 id=\"git-checkout-lt-name-gt\"><a href=\"#git-checkout-lt-name-gt\" class=\"headerlink\" title=\"git checkout &lt;name&gt;\"></a><code>git checkout &lt;name&gt;</code></h2><pre><code>切换分支</code></pre><h2 id=\"git-checkout-b-lt-name-gt\"><a href=\"#git-checkout-b-lt-name-gt\" class=\"headerlink\" title=\"git checkout -b &lt;name&gt;\"></a><code>git checkout -b &lt;name&gt;</code></h2><pre><code>切换并创建分支</code></pre><h2 id=\"git-merge-lt-name-gt\"><a href=\"#git-merge-lt-name-gt\" class=\"headerlink\" title=\"git merge &lt;name&gt;\"></a><code>git merge &lt;name&gt;</code></h2><pre><code>合并某分支到当前分支</code></pre><h2 id=\"git-branch-d-lt-name-gt\"><a href=\"#git-branch-d-lt-name-gt\" class=\"headerlink\" title=\"git branch -d &lt;name&gt;\"></a><code>git branch -d &lt;name&gt;</code></h2><pre><code>删除分支</code></pre><p>操作记录如下图：</p>\n<p><img src=\"../../.deploy_git/img/git/git9.png\" alt=\"git log\"></p>\n<h2 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a><code>分支管理策略</code></h2><p><img src=\"../../.deploy_git/img/git/git10.png\" alt=\"git log\"></p>\n<pre><code>上图可以看出操作，我们首先使用`git checkout develop`切换`develop`分支,修改文件，提交。在切回`master`分支，合并`develop`代码。\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; develop</span><br></pre></td></tr></table></figure>\n\n`--no-ff` 参数，表示禁用`Fast forward`模式，`Git`就会在`merge`时生成一个新的`commit`，这样，从分支历史上就可以看出分支信息。\n\n`-m` 表示把`commit`描述写进去。\n\n`git log --graph --pretty=oneline --abbrev-commit`查看分支记录。</code></pre><p> <strong>bug分支</strong></p>\n<p>   如果工作中我们正在开发某个功能，突然接到一个紧急bug，需要现在修复，而我们手里功能写道一半，还没有提交到（<code>git commit</code>）<strong>缓存区</strong>。<br>   <strong>git stash</strong>可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。</p>\n<p><img src=\"../../.deploy_git/img/git/git11.png\" alt=\"git stash\"></p>\n<ul>\n<li>首先<code>git stash</code>把当前工作区中修改的内容保存，<code>git status</code>查看当前工作区，没有修改文件。</li>\n<li>创建并切换<strong>bug-101</strong>分支，修改并提交。</li>\n<li>切换回<code>master</code>分支，合并<strong>bug-101</strong> 分支</li>\n<li><code>git stash list</code>查看之前存储的内容,使用 <code>git stash apply</code>(但是恢复后，stash内容并不删除,也可以使用<code>git stash drop</code> 回复内容的同时，会删除)</li>\n</ul>\n<ul>\n<li><h2 id=\"丢弃没有被合并过的分支\"><a href=\"#丢弃没有被合并过的分支\" class=\"headerlink\" title=\"丢弃没有被合并过的分支\"></a>丢弃没有被合并过的分支</h2><p>  <code>git branch -D &lt;name&gt;</code>强制删除</p>\n</li>\n</ul>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a><code>git push</code></h2><h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a><code>git remote</code></h2><p>  当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是<strong>origin</strong>。</p>\n<p>  <code>git remote -v</code></p>\n<p>  查看详细远程库信息</p>\n<h2 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a><code>推送分支</code></h2><p>  <code>git push origin &lt;当前推送分支&gt;</code>  </p>\n<h2 id=\"本地分支与远程分支关联\"><a href=\"#本地分支与远程分支关联\" class=\"headerlink\" title=\"本地分支与远程分支关联\"></a><code>本地分支与远程分支关联</code></h2><p>  <strong><code>git checkout -b &lt;name&gt; origin/&lt;name&gt;</code></strong></p>\n<p>   在本地创建与远程分支对应的分支。</p>\n<p>  <strong><code>git branch --set-upstream-to=origin/dev dev</code></strong></p>\n<p>  把本地dev分支与远程dev分支关联。</p>\n<p>  <strong><code>git branch --set-upstream-to=origin/&lt;远程分支&gt; &lt;本地分支&gt;</code></strong></p>\n<h1 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a><code>git tag</code></h1><p>使用<code>git</code> 创建一个<code>tag</code> ,一个不可修改的历史代码版本。</p>\n<h2 id=\"git-tag-tagname\"><a href=\"#git-tag-tagname\" class=\"headerlink\" title=\"git tag tagname\"></a><code>git tag tagname</code></h2><p>  在当前分支打标签，  <code>git tag v1.0</code>  为当前分支打上v1.0的标签,只是在存储在本地。</p>\n<h2 id=\"git-tag-1\"><a href=\"#git-tag-1\" class=\"headerlink\" title=\"git tag\"></a><code>git tag</code></h2><p>  查看当前分支所打标签，标签不是按时间顺序列出，而是按字母排序的</p>\n<p>默认标签是打在最新提交的commit上的。有时候之前commit如果忘了打标签</p>\n<p>可以找到历史提交的commit id，然后打上就可以了</p>\n<p><code>git tag v1.1 4fde738</code>  中找到commit id 为4fde738 为其打上v1.1标签。</p>\n<h2 id=\"git-show-lt-tagname-gt\"><a href=\"#git-show-lt-tagname-gt\" class=\"headerlink\" title=\"git show &lt;tagname&gt;\"></a><code>git show &lt;tagname&gt;</code></h2><p> 查看标签信息</p>\n<h2 id=\"git-tag-a-lt-tagname-gt-m-quot-lt-desc-gt-quot-commit-id\"><a href=\"#git-tag-a-lt-tagname-gt-m-quot-lt-desc-gt-quot-commit-id\" class=\"headerlink\" title=\"git tag -a &lt;tagname&gt; -m &quot;&lt;desc&gt;&quot; commit id\"></a><code>git tag -a &lt;tagname&gt; -m &quot;&lt;desc&gt;&quot; commit id</code></h2><p>   -a 表示打的标签名，-m 说明文字</p>\n<h2 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a><code>删除标签</code></h2><p>  <code>git tag -d &lt;tagname&gt;</code></p>\n<p>  因为创建的标签，都是本地存储，没有提交到远程，可以删除。</p>\n<h2 id=\"推送某个标签到远程\"><a href=\"#推送某个标签到远程\" class=\"headerlink\" title=\"推送某个标签到远程\"></a><code>推送某个标签到远程</code></h2><p>  <strong><code>git push origin &lt;tagname&gt;</code></strong></p>\n<p>  一次全部推送尚未推送到远程的本地标签</p>\n<p>  <strong><code>git push origin --tags</code></strong></p>\n<h2 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a><code>删除远程标签</code></h2><p>  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>\n<p>  <strong><code>git tag -d &lt;tagname&gt;</code></strong></p>\n<p>  从远程删除。删除命令也是<code>push</code></p>\n<p>  <strong><code>git push origin :refs/tags/&lt;tagname&gt;</code></strong></p>\n"},{"title":"Hello World","comments":1,"description":"Hello World","date":"2016-01-04T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncomments: true\ndescription: Hello World\ntags: \"hello world\"\ndate: 2016-01-05 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-12-02T06:49:34.123Z","layout":"post","photos":[],"link":"","_id":"cki71wakr001ltl9k3v4ynkxg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"gulp使用","comments":1,"description":"gulp基础使用","date":"2017-09-29T04:25:23.000Z","keywords":"gulp, gulp基础使用","_content":"\n[查看源代码](https://github.com/hbbaly/gulp)\n\n## 入门\n\n### 全局安装gulp \n\n```\n  npm install -g gulp\n```\n\n### 作为项目依赖安装\n\n  ```\n    npm install -D gulp\n  ```\n\n### 根目录下创建`gulpfile.js `文件\n\n  ```js\n    var gulp = require('gulp');\n\n    gulp.task('default', function() {\n      // 将你的默认的任务代码放在这\n    });\n  ```\n\n### 运行\n  ```\n    gulp\n  ```\n\n## 项目生成\n\n### 安装`express`、使用`express-generator`自动生成项目结构\n \n  ```\n    npm install -g express\n    npm install -g express-generator\n    express -e gulp\n    cd gulp\n    npm install\n  ```\n上面使用`express-generator`构建了gulp项目,项目目录你也可以自己重新命名\n\n## js压缩\n\n### 安装`gulp-uglify`插件用于js压缩\n\n```\n  npm install -D gulp-uglify\n```\n\n修改`gulpfile.js`文件\n```js\n  var gulp = require('gulp')\n  // 引入gulp-uglify\n  var uglify  = require('gulp-uglify')\n  gulp.task('script',function(){\n    gulp.src('public/js/*.js')\n    .pipe(uglify())  // js文件压缩\n    .pipe(gulp.dest('../server/public/js'))  // 生成文件目录\n  })\n  gulp.task('default',['script']) \n```\n在`public/js`中新建js文件，运行 `gulp`生成server/public/js文件夹，找到压缩过的js。\n\n## gulp-util\n\n`gulp-util`,本身包含多个功能,[gulp-util](https://github.com/gulpjs/gulp-util),这里主要讲解`log`功能\n\n安装`gulp-util`\n\n```\n  npm install -D gulp-util\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n\n  gulp.task('script',function(){\n    gulp.src('public/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('../server/public/js'))\n  })\n\n  gulp.task('default',function(){\n    gutil.log(gutil.colors.red('打包完成'))\n    gutil.log(gutil.colors.green('打包完成'))\n  })\n\n```\n运行`gulp`之后会打印出红色和绿色的打包完成\n\n## gulp-watch-path\n\n使用`gulp-watch-path`监控文件变化\n\n安装`gulp-watch-path`\n\n```\n  npm install -D gulp-watch-path\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n      gulp.src(paths.srcPath)\n      .pipe(uglify())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n  gulp.task('default',['watchjs'])\n```\n\n## stream-combiner2\n\nstream-combiner2可以使文件报错，但是不会停止项目运行\n\n```\n  npm install -D stream-combiner2\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        uglify(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs'])\n```\n运行`gulp` , 故意在js文件中写一段错误的代码，试试效果。\n\n\n## gulp-sourcemaps\n\n添加`gulp-sourcemaps`可调式\n\n```\nnpm install -D gulp-sourcemaps\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),  // 初始化\n        uglify(),\n        sourcemaps.write(),  // \n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs'])\n```\n\n\n## gulp-minify-css\n\n gulp-minify-css压缩css\n\n ```\n npm install gulp-minify-css\n ```\n\n ```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n    \n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n  // 监听css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(minifycss())  // 压缩css\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss'])\n ```\n\n## gulp-autoprefixer\n\n用于添加css前缀\n\n```\nnpm install -D gulp-autoprefixer\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n    \n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n  // 监听css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())  // 压缩css\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss'])\n```\n\n## gulp-less\n\n对less支持\n\n```\nnpm install -D gulp-less\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // 处理css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless'])\n```\n\n## gulp-imagemin\n\n对图片进行压缩等处理\n\n```\nnpm install -D gulp-imagemin\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n  var imagemin = require('gulp-imagemin')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n\n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n## ES6转化ES5\n\n```\nnpm install -D babel-preset-es2015\nnpm install -D gulp-babel\n```\n\n在根目录中添加`.babelrc`文件,并在其中添加\n```js\n{\n  \"presets\": [\n    \"es2015\"\n  ]\n} \n```\n\n在`gulpfile.js`中修改\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var babel = require('gulp-babel')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n  var imagemin = require('gulp-imagemin')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        babel({\n          presets: ['es2015']\n        }),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // css监听\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n## gulp-concat\n用来文件的拼接\n\n```\nnpm install -D gulp-concat\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var babel = require('gulp-babel');\n  var concat = require('gulp-concat')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var imagemin = require('gulp-imagemin')\n\n  var less = require('gulp-less')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var combined = combiner.obj([\n        gulp.src('public/js/*.js'),\n          sourcemaps.init(),\n          babel({\n            presets:['es2015']\n          }),\n          uglify(),\n          concat('all.js'),\n          sourcemaps.write(),\n          gulp.dest('../server/js')\n        ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n讲了gulp常用插件及功能,也可以查看[GitHub](https://github.com/hbbaly/gulp)","source":"_posts/gulp.md","raw":"---\ntitle: gulp使用\ncomments: true\ndescription: gulp基础使用\ntags: \"gulp\"\ndate: 2017-09-29 12:25:23\ncategories: \"gulp\"\nkeywords: gulp, gulp基础使用\n---\n\n[查看源代码](https://github.com/hbbaly/gulp)\n\n## 入门\n\n### 全局安装gulp \n\n```\n  npm install -g gulp\n```\n\n### 作为项目依赖安装\n\n  ```\n    npm install -D gulp\n  ```\n\n### 根目录下创建`gulpfile.js `文件\n\n  ```js\n    var gulp = require('gulp');\n\n    gulp.task('default', function() {\n      // 将你的默认的任务代码放在这\n    });\n  ```\n\n### 运行\n  ```\n    gulp\n  ```\n\n## 项目生成\n\n### 安装`express`、使用`express-generator`自动生成项目结构\n \n  ```\n    npm install -g express\n    npm install -g express-generator\n    express -e gulp\n    cd gulp\n    npm install\n  ```\n上面使用`express-generator`构建了gulp项目,项目目录你也可以自己重新命名\n\n## js压缩\n\n### 安装`gulp-uglify`插件用于js压缩\n\n```\n  npm install -D gulp-uglify\n```\n\n修改`gulpfile.js`文件\n```js\n  var gulp = require('gulp')\n  // 引入gulp-uglify\n  var uglify  = require('gulp-uglify')\n  gulp.task('script',function(){\n    gulp.src('public/js/*.js')\n    .pipe(uglify())  // js文件压缩\n    .pipe(gulp.dest('../server/public/js'))  // 生成文件目录\n  })\n  gulp.task('default',['script']) \n```\n在`public/js`中新建js文件，运行 `gulp`生成server/public/js文件夹，找到压缩过的js。\n\n## gulp-util\n\n`gulp-util`,本身包含多个功能,[gulp-util](https://github.com/gulpjs/gulp-util),这里主要讲解`log`功能\n\n安装`gulp-util`\n\n```\n  npm install -D gulp-util\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n\n  gulp.task('script',function(){\n    gulp.src('public/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('../server/public/js'))\n  })\n\n  gulp.task('default',function(){\n    gutil.log(gutil.colors.red('打包完成'))\n    gutil.log(gutil.colors.green('打包完成'))\n  })\n\n```\n运行`gulp`之后会打印出红色和绿色的打包完成\n\n## gulp-watch-path\n\n使用`gulp-watch-path`监控文件变化\n\n安装`gulp-watch-path`\n\n```\n  npm install -D gulp-watch-path\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n      gulp.src(paths.srcPath)\n      .pipe(uglify())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n  gulp.task('default',['watchjs'])\n```\n\n## stream-combiner2\n\nstream-combiner2可以使文件报错，但是不会停止项目运行\n\n```\n  npm install -D stream-combiner2\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        uglify(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs'])\n```\n运行`gulp` , 故意在js文件中写一段错误的代码，试试效果。\n\n\n## gulp-sourcemaps\n\n添加`gulp-sourcemaps`可调式\n\n```\nnpm install -D gulp-sourcemaps\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),  // 初始化\n        uglify(),\n        sourcemaps.write(),  // \n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs'])\n```\n\n\n## gulp-minify-css\n\n gulp-minify-css压缩css\n\n ```\n npm install gulp-minify-css\n ```\n\n ```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n    \n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n  // 监听css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(minifycss())  // 压缩css\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss'])\n ```\n\n## gulp-autoprefixer\n\n用于添加css前缀\n\n```\nnpm install -D gulp-autoprefixer\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n    \n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n  // 监听css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())  // 压缩css\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss'])\n```\n\n## gulp-less\n\n对less支持\n\n```\nnpm install -D gulp-less\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // 处理css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless'])\n```\n\n## gulp-imagemin\n\n对图片进行压缩等处理\n\n```\nnpm install -D gulp-imagemin\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n  var imagemin = require('gulp-imagemin')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // css\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n\n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n## ES6转化ES5\n\n```\nnpm install -D babel-preset-es2015\nnpm install -D gulp-babel\n```\n\n在根目录中添加`.babelrc`文件,并在其中添加\n```js\n{\n  \"presets\": [\n    \"es2015\"\n  ]\n} \n```\n\n在`gulpfile.js`中修改\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var babel = require('gulp-babel')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var less = require('gulp-less')\n  var imagemin = require('gulp-imagemin')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      var combined = combiner.obj([\n        gulp.src(paths.srcPath),\n        sourcemaps.init(),\n        babel({\n          presets: ['es2015']\n        }),\n        uglify(),\n        sourcemaps.write(),\n        gulp.dest(paths.distDir)\n      ])\n      combined.on('error',handleError)\n    })\n  })\n\n  // css监听\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n## gulp-concat\n用来文件的拼接\n\n```\nnpm install -D gulp-concat\n```\n\n```js\n  var gulp = require('gulp')\n  var uglify  = require('gulp-uglify')\n  var gutil = require('gulp-util')\n  var watchPath = require('gulp-watch-path')\n  var combiner = require('stream-combiner2')\n  var sourcemaps = require('gulp-sourcemaps')\n  var babel = require('gulp-babel');\n  var concat = require('gulp-concat')\n  var minifycss = require('gulp-minify-css')\n  var autoprefixer = require('gulp-autoprefixer')\n  var imagemin = require('gulp-imagemin')\n\n  var less = require('gulp-less')\n\n  var handleError = function (err) {\n    var colors = gutil.colors;\n    console.log('\\n')\n    gutil.log(colors.red('Error!'))\n    gutil.log('fileName: ' + colors.red(err.fileName))\n    gutil.log('lineNumber: ' + colors.red(err.lineNumber))\n    gutil.log('message: ' + err.message)\n    gutil.log('plugin: ' + colors.yellow(err.plugin))\n  }\n  // 处理js\n  gulp.task('watchjs',function(){\n    gulp.watch('public/js/*.js',function(event){\n      var combined = combiner.obj([\n        gulp.src('public/js/*.js'),\n          sourcemaps.init(),\n          babel({\n            presets:['es2015']\n          }),\n          uglify(),\n          concat('all.js'),\n          sourcemaps.write(),\n          gulp.dest('../server/js')\n        ])\n      combined.on('error',handleError)\n    })\n  })\n\n  gulp.task('watchcss',function(){\n    gulp.watch('public/css/*.css',function(event){\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n      .pipe(sourcemaps.init())\n      .pipe(autoprefixer({\n        browsers: 'last 3 versions'\n      }))\n      .pipe(minifycss())\n      .pipe(sourcemaps.write())\n      .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  // less \n  gulp.task('watchless', function () {\n    gulp.watch('public/less/**/*.less', function (event) {\n        var paths = watchPath(event, 'public/less/', '../server/css/')\n\n    gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n        gutil.log('Dist ' + paths.distPath)\n        var combined = combiner.obj([\n            gulp.src(paths.srcPath),\n            sourcemaps.init(),\n            autoprefixer({\n              browsers: 'last 2 versions'\n            }),\n            less(),\n            minifycss(),\n            sourcemaps.write('./'),\n            gulp.dest(paths.distDir)\n        ])\n        combined.on('error', handleError)\n    })\n  })\n\n  //图片处理\n  gulp.task('watchimage',function(){\n    gulp.watch('public/images/**/*', function (event) {\n      var paths = watchPath(event,'public/','../server/')\n\n      gutil.log(gutil.colors.green(event.type) + ' ' + paths.srcPath)\n      gutil.log('Dist ' + paths.distPath)\n\n      gulp.src(paths.srcPath)\n          .pipe(imagemin({\n              progressive: true\n          }))\n          .pipe(gulp.dest(paths.distDir))\n    })\n  })\n\n  gulp.task('default',['watchjs','watchcss','watchless','watchimage'])\n```\n\n讲了gulp常用插件及功能,也可以查看[GitHub](https://github.com/hbbaly/gulp)","slug":"gulp","published":1,"updated":"2020-12-02T06:49:34.122Z","layout":"post","photos":[],"link":"","_id":"cki71wakt001qtl9kj4i5e0jn","content":"<p><a href=\"https://github.com/hbbaly/gulp\" target=\"_blank\" rel=\"noopener\">查看源代码</a></p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><h3 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g gulp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作为项目依赖安装\"><a href=\"#作为项目依赖安装\" class=\"headerlink\" title=\"作为项目依赖安装\"></a>作为项目依赖安装</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根目录下创建gulpfile-js文件\"><a href=\"#根目录下创建gulpfile-js文件\" class=\"headerlink\" title=\"根目录下创建gulpfile.js文件\"></a>根目录下创建<code>gulpfile.js</code>文件</h3>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目生成\"><a href=\"#项目生成\" class=\"headerlink\" title=\"项目生成\"></a>项目生成</h2><h3 id=\"安装express、使用express-generator自动生成项目结构\"><a href=\"#安装express、使用express-generator自动生成项目结构\" class=\"headerlink\" title=\"安装express、使用express-generator自动生成项目结构\"></a>安装<code>express</code>、使用<code>express-generator</code>自动生成项目结构</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express</span><br><span class=\"line\">npm install -g express-generator</span><br><span class=\"line\">express -e gulp</span><br><span class=\"line\">cd gulp</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>上面使用<code>express-generator</code>构建了gulp项目,项目目录你也可以自己重新命名</p>\n<h2 id=\"js压缩\"><a href=\"#js压缩\" class=\"headerlink\" title=\"js压缩\"></a>js压缩</h2><h3 id=\"安装gulp-uglify插件用于js压缩\"><a href=\"#安装gulp-uglify插件用于js压缩\" class=\"headerlink\" title=\"安装gulp-uglify插件用于js压缩\"></a>安装<code>gulp-uglify</code>插件用于js压缩</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-uglify</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>gulpfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引入gulp-uglify</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'public/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(uglify())  <span class=\"comment\">// js文件压缩</span></span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'../server/public/js'</span>))  <span class=\"comment\">// 生成文件目录</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'script'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>在<code>public/js</code>中新建js文件，运行 <code>gulp</code>生成server/public/js文件夹，找到压缩过的js。</p>\n<h2 id=\"gulp-util\"><a href=\"#gulp-util\" class=\"headerlink\" title=\"gulp-util\"></a>gulp-util</h2><p><code>gulp-util</code>,本身包含多个功能,<a href=\"https://github.com/gulpjs/gulp-util\" target=\"_blank\" rel=\"noopener\">gulp-util</a>,这里主要讲解<code>log</code>功能</p>\n<p>安装<code>gulp-util</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-util</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'public/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(uglify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'../server/public/js'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gutil.log(gutil.colors.red(<span class=\"string\">'打包完成'</span>))</span><br><span class=\"line\">  gutil.log(gutil.colors.green(<span class=\"string\">'打包完成'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>gulp</code>之后会打印出红色和绿色的打包完成</p>\n<h2 id=\"gulp-watch-path\"><a href=\"#gulp-watch-path\" class=\"headerlink\" title=\"gulp-watch-path\"></a>gulp-watch-path</h2><p>使用<code>gulp-watch-path</code>监控文件变化</p>\n<p>安装<code>gulp-watch-path</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-watch-path</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stream-combiner2\"><a href=\"#stream-combiner2\" class=\"headerlink\" title=\"stream-combiner2\"></a>stream-combiner2</h2><p>stream-combiner2可以使文件报错，但是不会停止项目运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D stream-combiner2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>gulp</code> , 故意在js文件中写一段错误的代码，试试效果。</p>\n<h2 id=\"gulp-sourcemaps\"><a href=\"#gulp-sourcemaps\" class=\"headerlink\" title=\"gulp-sourcemaps\"></a>gulp-sourcemaps</h2><p>添加<code>gulp-sourcemaps</code>可调式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-sourcemaps</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),  <span class=\"comment\">// </span></span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-minify-css\"><a href=\"#gulp-minify-css\" class=\"headerlink\" title=\"gulp-minify-css\"></a>gulp-minify-css</h2><p> gulp-minify-css压缩css</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 监听css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(minifycss())  <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-autoprefixer\"><a href=\"#gulp-autoprefixer\" class=\"headerlink\" title=\"gulp-autoprefixer\"></a>gulp-autoprefixer</h2><p>用于添加css前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-autoprefixer</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 监听css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())  <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-less\"><a href=\"#gulp-less\" class=\"headerlink\" title=\"gulp-less\"></a>gulp-less</h2><p>对less支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-less</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-imagemin\"><a href=\"#gulp-imagemin\" class=\"headerlink\" title=\"gulp-imagemin\"></a>gulp-imagemin</h2><p>对图片进行压缩等处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-imagemin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6转化ES5\"><a href=\"#ES6转化ES5\" class=\"headerlink\" title=\"ES6转化ES5\"></a>ES6转化ES5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-preset-es2015</span><br><span class=\"line\">npm install -D gulp-babel</span><br></pre></td></tr></table></figure>\n\n<p>在根目录中添加<code>.babelrc</code>文件,并在其中添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>gulpfile.js</code>中修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      babel(&#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css监听</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-concat\"><a href=\"#gulp-concat\" class=\"headerlink\" title=\"gulp-concat\"></a>gulp-concat</h2><p>用来文件的拼接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-concat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(<span class=\"string\">'public/js/*.js'</span>),</span><br><span class=\"line\">        sourcemaps.init(),</span><br><span class=\"line\">        babel(&#123;</span><br><span class=\"line\">          presets:[<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        uglify(),</span><br><span class=\"line\">        concat(<span class=\"string\">'all.js'</span>),</span><br><span class=\"line\">        sourcemaps.write(),</span><br><span class=\"line\">        gulp.dest(<span class=\"string\">'../server/js'</span>)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>讲了gulp常用插件及功能,也可以查看<a href=\"https://github.com/hbbaly/gulp\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><a href=\"https://github.com/hbbaly/gulp\" target=\"_blank\" rel=\"noopener\">查看源代码</a></p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><h3 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g gulp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作为项目依赖安装\"><a href=\"#作为项目依赖安装\" class=\"headerlink\" title=\"作为项目依赖安装\"></a>作为项目依赖安装</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根目录下创建gulpfile-js文件\"><a href=\"#根目录下创建gulpfile-js文件\" class=\"headerlink\" title=\"根目录下创建gulpfile.js文件\"></a>根目录下创建<code>gulpfile.js</code>文件</h3>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将你的默认的任务代码放在这</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目生成\"><a href=\"#项目生成\" class=\"headerlink\" title=\"项目生成\"></a>项目生成</h2><h3 id=\"安装express、使用express-generator自动生成项目结构\"><a href=\"#安装express、使用express-generator自动生成项目结构\" class=\"headerlink\" title=\"安装express、使用express-generator自动生成项目结构\"></a>安装<code>express</code>、使用<code>express-generator</code>自动生成项目结构</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express</span><br><span class=\"line\">npm install -g express-generator</span><br><span class=\"line\">express -e gulp</span><br><span class=\"line\">cd gulp</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>上面使用<code>express-generator</code>构建了gulp项目,项目目录你也可以自己重新命名</p>\n<h2 id=\"js压缩\"><a href=\"#js压缩\" class=\"headerlink\" title=\"js压缩\"></a>js压缩</h2><h3 id=\"安装gulp-uglify插件用于js压缩\"><a href=\"#安装gulp-uglify插件用于js压缩\" class=\"headerlink\" title=\"安装gulp-uglify插件用于js压缩\"></a>安装<code>gulp-uglify</code>插件用于js压缩</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-uglify</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>gulpfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 引入gulp-uglify</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'public/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(uglify())  <span class=\"comment\">// js文件压缩</span></span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'../server/public/js'</span>))  <span class=\"comment\">// 生成文件目录</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'script'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>在<code>public/js</code>中新建js文件，运行 <code>gulp</code>生成server/public/js文件夹，找到压缩过的js。</p>\n<h2 id=\"gulp-util\"><a href=\"#gulp-util\" class=\"headerlink\" title=\"gulp-util\"></a>gulp-util</h2><p><code>gulp-util</code>,本身包含多个功能,<a href=\"https://github.com/gulpjs/gulp-util\" target=\"_blank\" rel=\"noopener\">gulp-util</a>,这里主要讲解<code>log</code>功能</p>\n<p>安装<code>gulp-util</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-util</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'public/js/*.js'</span>)</span><br><span class=\"line\">  .pipe(uglify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'../server/public/js'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gutil.log(gutil.colors.red(<span class=\"string\">'打包完成'</span>))</span><br><span class=\"line\">  gutil.log(gutil.colors.green(<span class=\"string\">'打包完成'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>gulp</code>之后会打印出红色和绿色的打包完成</p>\n<h2 id=\"gulp-watch-path\"><a href=\"#gulp-watch-path\" class=\"headerlink\" title=\"gulp-watch-path\"></a>gulp-watch-path</h2><p>使用<code>gulp-watch-path</code>监控文件变化</p>\n<p>安装<code>gulp-watch-path</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-watch-path</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stream-combiner2\"><a href=\"#stream-combiner2\" class=\"headerlink\" title=\"stream-combiner2\"></a>stream-combiner2</h2><p>stream-combiner2可以使文件报错，但是不会停止项目运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D stream-combiner2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>gulp</code> , 故意在js文件中写一段错误的代码，试试效果。</p>\n<h2 id=\"gulp-sourcemaps\"><a href=\"#gulp-sourcemaps\" class=\"headerlink\" title=\"gulp-sourcemaps\"></a>gulp-sourcemaps</h2><p>添加<code>gulp-sourcemaps</code>可调式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-sourcemaps</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),  <span class=\"comment\">// </span></span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-minify-css\"><a href=\"#gulp-minify-css\" class=\"headerlink\" title=\"gulp-minify-css\"></a>gulp-minify-css</h2><p> gulp-minify-css压缩css</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 监听css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(minifycss())  <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-autoprefixer\"><a href=\"#gulp-autoprefixer\" class=\"headerlink\" title=\"gulp-autoprefixer\"></a>gulp-autoprefixer</h2><p>用于添加css前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-autoprefixer</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 监听css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())  <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-less\"><a href=\"#gulp-less\" class=\"headerlink\" title=\"gulp-less\"></a>gulp-less</h2><p>对less支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-less</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-imagemin\"><a href=\"#gulp-imagemin\" class=\"headerlink\" title=\"gulp-imagemin\"></a>gulp-imagemin</h2><p>对图片进行压缩等处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-imagemin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6转化ES5\"><a href=\"#ES6转化ES5\" class=\"headerlink\" title=\"ES6转化ES5\"></a>ES6转化ES5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-preset-es2015</span><br><span class=\"line\">npm install -D gulp-babel</span><br></pre></td></tr></table></figure>\n\n<p>在根目录中添加<code>.babelrc</code>文件,并在其中添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>gulpfile.js</code>中修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(paths.srcPath),</span><br><span class=\"line\">      sourcemaps.init(),</span><br><span class=\"line\">      babel(&#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      uglify(),</span><br><span class=\"line\">      sourcemaps.write(),</span><br><span class=\"line\">      gulp.dest(paths.distDir)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css监听</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-concat\"><a href=\"#gulp-concat\" class=\"headerlink\" title=\"gulp-concat\"></a>gulp-concat</h2><p>用来文件的拼接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D gulp-concat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify  = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> gutil = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchPath = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-watch-path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> combiner = <span class=\"built_in\">require</span>(<span class=\"string\">'stream-combiner2'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> handleError = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> colors = gutil.colors;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  gutil.log(colors.red(<span class=\"string\">'Error!'</span>))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'fileName: '</span> + colors.red(err.fileName))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'lineNumber: '</span> + colors.red(err.lineNumber))</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'message: '</span> + err.message)</span><br><span class=\"line\">  gutil.log(<span class=\"string\">'plugin: '</span> + colors.yellow(err.plugin))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchjs'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/js/*.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">      gulp.src(<span class=\"string\">'public/js/*.js'</span>),</span><br><span class=\"line\">        sourcemaps.init(),</span><br><span class=\"line\">        babel(&#123;</span><br><span class=\"line\">          presets:[<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        uglify(),</span><br><span class=\"line\">        concat(<span class=\"string\">'all.js'</span>),</span><br><span class=\"line\">        sourcemaps.write(),</span><br><span class=\"line\">        gulp.dest(<span class=\"string\">'../server/js'</span>)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    combined.on(<span class=\"string\">'error'</span>,handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchcss'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/css/*.css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">    .pipe(autoprefixer(&#123;</span><br><span class=\"line\">      browsers: <span class=\"string\">'last 3 versions'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(sourcemaps.write())</span><br><span class=\"line\">    .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less </span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchless'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/less/**/*.less'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> paths = watchPath(event, <span class=\"string\">'public/less/'</span>, <span class=\"string\">'../server/css/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">      gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> combined = combiner.obj([</span><br><span class=\"line\">          gulp.src(paths.srcPath),</span><br><span class=\"line\">          sourcemaps.init(),</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">'last 2 versions'</span></span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          less(),</span><br><span class=\"line\">          minifycss(),</span><br><span class=\"line\">          sourcemaps.write(<span class=\"string\">'./'</span>),</span><br><span class=\"line\">          gulp.dest(paths.distDir)</span><br><span class=\"line\">      ])</span><br><span class=\"line\">      combined.on(<span class=\"string\">'error'</span>, handleError)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图片处理</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watchimage'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'public/images/**/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paths = watchPath(event,<span class=\"string\">'public/'</span>,<span class=\"string\">'../server/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gutil.log(gutil.colors.green(event.type) + <span class=\"string\">' '</span> + paths.srcPath)</span><br><span class=\"line\">    gutil.log(<span class=\"string\">'Dist '</span> + paths.distPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    gulp.src(paths.srcPath)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(paths.distDir))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'watchjs'</span>,<span class=\"string\">'watchcss'</span>,<span class=\"string\">'watchless'</span>,<span class=\"string\">'watchimage'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>讲了gulp常用插件及功能,也可以查看<a href=\"https://github.com/hbbaly/gulp\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n"},{"title":"元素水平居中的方法","comments":1,"description":"元素水平居中的方法","date":"2016-03-04T16:00:00.000Z","keywords":"html, Html, css ,元素水平居中的方法","_content":"\n当我们知道父元素的宽高的时候，是元素水平居中比较简单，但是有时候我们不一定能知道要居中的父级元素的宽高，那么我们该如何使元素水平垂直居中呢？下面介绍几种水平垂直居中的方法。\n\n## 所有元素都已经知道宽高可用`margin`来完成\n\n```css\n#box{  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    margin:150px;  \n    background:blue;  \n}\n```\n\n这一种情况比较简单。\n\n## 当我们只知道本身元素的宽高的时候\n\n可以用定位来做, `relative`，还是`absolute`都行。）\n\n```css\n.example{  \n    position: relative;  \n    top:50%;  \n    left:50%;  \n    width:100px;  \n    height:100px;  \n    margin-left: -50px;  \n    margin-top: -50px;  \n    background:blue;  \n}\n```\n\n第二种就是使用`calc`来使用，他必须知道居中本身高度：不支持`IE8`及以下。\n\n```css\n\n#box{  \n    position: relative;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    left:calc(50% - 50px);  \n    top:calc(50% - 50px);  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}\n```\n\n`left:calc(50% - 50px);top:calc(50% - 50px);`这里的—号记得前后空一个，不然可能会出错。\n\n`top`为50%在减去自身高度的一半就完成垂直居中。\n\n上面一个例中，除了使用 `margin-left: -50px`(宽度的一半);`margin-top: -50px`(高度度的一半)。\n\n## 宽高都不知道\n\n这个时候我们可以用相对定位来做。\n\n**第一种：**\n\n```css\n\n#box{  \n    position: relative;  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    top:0;  \n    left:0;  \n    rightright:0;  \n    bottombottom:0;  \n    width:100px;  \n    height:100px;  \n    margin:auto;  \n    background:blue;  \n}\n```\n\n## 元素水平居中的方法\n\n### 第一种\n\n 先让上下左右值都为0，在使用`margin:auto`，就可以实现居中。\n\n### 第二种\n\n`css3`中的`translate`,但是这种方法不兼容`IE8`及以下。\n\n```css\n\n#box{  \n    position: relative;  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    top:50%;  \n    left:50%;  \n    width:100px;  \n    height:100px;  \n    transform:translate(-50%,-50%);  \n    background:blue;  \n}  \n```\n\n### 第三种\n使用弹性盒子布局，但是这种方法，不支持`IE9`及以下。\n\n```css\n\n#box{  \n    display: flex;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    justify-content: center;  \n    align-items: center;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}  \n```\n\n### 第四种\n添加一个空的`div`，该方法不支持`IE8`以下。\n\n```css\n\n#box{  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    text-align: center;  \n}  \n.example{  \n    display: inline-block;  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n    vertical-align: middle;  \n}  \n  \n.example1{  \n    display: inline-block;  \n    width:0;  \n    height:100%;  \n    vertical-align: middle;  \n}  \n```\n\n### 第五种\n都不知道宽高度的情况下也可以使用`js`来居中，但是比较麻烦，所以我们能用`css`样式居中就不会用`js`来居中。\n\n```css\n\n#box{  \n    position: relative;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}  \n```\n\n```js\nvar Ex = document.querySelector('#box .example');  \nvar box = document.getElementById('box');  \nfunction resize() {  \n    var wTop = (box.clientHeight - Ex.clientHeight)/2;  \n    var wLeft = (box.clientWidth - Ex.clientWidth)/2;  \n    Ex.style.top = wTop+'px';  \n    Ex.style.left = wLeft+'px';  \n}  \n```\n\n单纯想要块级元素水平居中，上面所用到的方法外还可以：\n\n1.本身添加`display:inline-block;`父级元素添加`text-align:center`;\n\n2.给父级元素添加`display:flex,justify-content:center;`\n\n```css\n\n#box{  \n    display: flex;  \n    width:100%;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    justify-content: center;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n    margin:0 5px;  \n}\n```\n\n这些方法有的用起来很方便，有的则需要自身是块级元素，有的则不需要。方法就写到这里，读者可以根据自身的情况选择一种合适的方法，或者有更好的方法，欢迎留言。有什么错误可以积极的在下面留言，我们一起探讨，一起进步！","source":"_posts/html-1.md","raw":"---\ntitle: 元素水平居中的方法\ncomments: true\ndescription: 元素水平居中的方法\ntags: \"html\"\ndate: 2016-03-05 00:00:00\ncategories: \"Html\"\nkeywords: html, Html, css ,元素水平居中的方法\n---\n\n当我们知道父元素的宽高的时候，是元素水平居中比较简单，但是有时候我们不一定能知道要居中的父级元素的宽高，那么我们该如何使元素水平垂直居中呢？下面介绍几种水平垂直居中的方法。\n\n## 所有元素都已经知道宽高可用`margin`来完成\n\n```css\n#box{  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    margin:150px;  \n    background:blue;  \n}\n```\n\n这一种情况比较简单。\n\n## 当我们只知道本身元素的宽高的时候\n\n可以用定位来做, `relative`，还是`absolute`都行。）\n\n```css\n.example{  \n    position: relative;  \n    top:50%;  \n    left:50%;  \n    width:100px;  \n    height:100px;  \n    margin-left: -50px;  \n    margin-top: -50px;  \n    background:blue;  \n}\n```\n\n第二种就是使用`calc`来使用，他必须知道居中本身高度：不支持`IE8`及以下。\n\n```css\n\n#box{  \n    position: relative;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    left:calc(50% - 50px);  \n    top:calc(50% - 50px);  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}\n```\n\n`left:calc(50% - 50px);top:calc(50% - 50px);`这里的—号记得前后空一个，不然可能会出错。\n\n`top`为50%在减去自身高度的一半就完成垂直居中。\n\n上面一个例中，除了使用 `margin-left: -50px`(宽度的一半);`margin-top: -50px`(高度度的一半)。\n\n## 宽高都不知道\n\n这个时候我们可以用相对定位来做。\n\n**第一种：**\n\n```css\n\n#box{  \n    position: relative;  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    top:0;  \n    left:0;  \n    rightright:0;  \n    bottombottom:0;  \n    width:100px;  \n    height:100px;  \n    margin:auto;  \n    background:blue;  \n}\n```\n\n## 元素水平居中的方法\n\n### 第一种\n\n 先让上下左右值都为0，在使用`margin:auto`，就可以实现居中。\n\n### 第二种\n\n`css3`中的`translate`,但是这种方法不兼容`IE8`及以下。\n\n```css\n\n#box{  \n    position: relative;  \n    width:400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    top:50%;  \n    left:50%;  \n    width:100px;  \n    height:100px;  \n    transform:translate(-50%,-50%);  \n    background:blue;  \n}  \n```\n\n### 第三种\n使用弹性盒子布局，但是这种方法，不支持`IE9`及以下。\n\n```css\n\n#box{  \n    display: flex;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    justify-content: center;  \n    align-items: center;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}  \n```\n\n### 第四种\n添加一个空的`div`，该方法不支持`IE8`以下。\n\n```css\n\n#box{  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    text-align: center;  \n}  \n.example{  \n    display: inline-block;  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n    vertical-align: middle;  \n}  \n  \n.example1{  \n    display: inline-block;  \n    width:0;  \n    height:100%;  \n    vertical-align: middle;  \n}  \n```\n\n### 第五种\n都不知道宽高度的情况下也可以使用`js`来居中，但是比较麻烦，所以我们能用`css`样式居中就不会用`js`来居中。\n\n```css\n\n#box{  \n    position: relative;  \n    width: 400px;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n}  \n.example{  \n    position: absolute;  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n}  \n```\n\n```js\nvar Ex = document.querySelector('#box .example');  \nvar box = document.getElementById('box');  \nfunction resize() {  \n    var wTop = (box.clientHeight - Ex.clientHeight)/2;  \n    var wLeft = (box.clientWidth - Ex.clientWidth)/2;  \n    Ex.style.top = wTop+'px';  \n    Ex.style.left = wLeft+'px';  \n}  \n```\n\n单纯想要块级元素水平居中，上面所用到的方法外还可以：\n\n1.本身添加`display:inline-block;`父级元素添加`text-align:center`;\n\n2.给父级元素添加`display:flex,justify-content:center;`\n\n```css\n\n#box{  \n    display: flex;  \n    width:100%;  \n    height:400px;  \n    margin:50px auto;  \n    border:1px solid red;  \n    justify-content: center;  \n}  \n.example{  \n    width:100px;  \n    height:100px;  \n    background:blue;  \n    margin:0 5px;  \n}\n```\n\n这些方法有的用起来很方便，有的则需要自身是块级元素，有的则不需要。方法就写到这里，读者可以根据自身的情况选择一种合适的方法，或者有更好的方法，欢迎留言。有什么错误可以积极的在下面留言，我们一起探讨，一起进步！","slug":"html-1","published":1,"updated":"2020-12-02T06:49:34.123Z","layout":"post","photos":[],"link":"","_id":"cki71waku001ttl9ku56oqhl3","content":"<p>当我们知道父元素的宽高的时候，是元素水平居中比较简单，但是有时候我们不一定能知道要居中的父级元素的宽高，那么我们该如何使元素水平垂直居中呢？下面介绍几种水平垂直居中的方法。</p>\n<h2 id=\"所有元素都已经知道宽高可用margin来完成\"><a href=\"#所有元素都已经知道宽高可用margin来完成\" class=\"headerlink\" title=\"所有元素都已经知道宽高可用margin来完成\"></a>所有元素都已经知道宽高可用<code>margin</code>来完成</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一种情况比较简单。</p>\n<h2 id=\"当我们只知道本身元素的宽高的时候\"><a href=\"#当我们只知道本身元素的宽高的时候\" class=\"headerlink\" title=\"当我们只知道本身元素的宽高的时候\"></a>当我们只知道本身元素的宽高的时候</h2><p>可以用定位来做, <code>relative</code>，还是<code>absolute</code>都行。）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种就是使用<code>calc</code>来使用，他必须知道居中本身高度：不支持<code>IE8</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"built_in\">calc</span>(<span class=\"number\">50%</span> - <span class=\"number\">50px</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"built_in\">calc</span>(<span class=\"number\">50%</span> - <span class=\"number\">50px</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>left:calc(50% - 50px);top:calc(50% - 50px);</code>这里的—号记得前后空一个，不然可能会出错。</p>\n<p><code>top</code>为50%在减去自身高度的一半就完成垂直居中。</p>\n<p>上面一个例中，除了使用 <code>margin-left: -50px</code>(宽度的一半);<code>margin-top: -50px</code>(高度度的一半)。</p>\n<h2 id=\"宽高都不知道\"><a href=\"#宽高都不知道\" class=\"headerlink\" title=\"宽高都不知道\"></a>宽高都不知道</h2><p>这个时候我们可以用相对定位来做。</p>\n<p><strong>第一种：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">rightright</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">bottombottom</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素水平居中的方法\"><a href=\"#元素水平居中的方法\" class=\"headerlink\" title=\"元素水平居中的方法\"></a>元素水平居中的方法</h2><h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><p> 先让上下左右值都为0，在使用<code>margin:auto</code>，就可以实现居中。</p>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><p><code>css3</code>中的<code>translate</code>,但是这种方法不兼容<code>IE8</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><p>使用弹性盒子布局，但是这种方法，不支持<code>IE9</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  </span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种\"><a href=\"#第四种\" class=\"headerlink\" title=\"第四种\"></a>第四种</h3><p>添加一个空的<code>div</code>，该方法不支持<code>IE8</code>以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"selector-class\">.example1</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五种\"><a href=\"#第五种\" class=\"headerlink\" title=\"第五种\"></a>第五种</h3><p>都不知道宽高度的情况下也可以使用<code>js</code>来居中，但是比较麻烦，所以我们能用<code>css</code>样式居中就不会用<code>js</code>来居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ex = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#box .example'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resize</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> wTop = (box.clientHeight - Ex.clientHeight)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> wLeft = (box.clientWidth - Ex.clientWidth)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    Ex.style.top = wTop+<span class=\"string\">'px'</span>;  </span><br><span class=\"line\">    Ex.style.left = wLeft+<span class=\"string\">'px'</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单纯想要块级元素水平居中，上面所用到的方法外还可以：</p>\n<p>1.本身添加<code>display:inline-block;</code>父级元素添加<code>text-align:center</code>;</p>\n<p>2.给父级元素添加<code>display:flex,justify-content:center;</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">5px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些方法有的用起来很方便，有的则需要自身是块级元素，有的则不需要。方法就写到这里，读者可以根据自身的情况选择一种合适的方法，或者有更好的方法，欢迎留言。有什么错误可以积极的在下面留言，我们一起探讨，一起进步！</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>当我们知道父元素的宽高的时候，是元素水平居中比较简单，但是有时候我们不一定能知道要居中的父级元素的宽高，那么我们该如何使元素水平垂直居中呢？下面介绍几种水平垂直居中的方法。</p>\n<h2 id=\"所有元素都已经知道宽高可用margin来完成\"><a href=\"#所有元素都已经知道宽高可用margin来完成\" class=\"headerlink\" title=\"所有元素都已经知道宽高可用margin来完成\"></a>所有元素都已经知道宽高可用<code>margin</code>来完成</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">150px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一种情况比较简单。</p>\n<h2 id=\"当我们只知道本身元素的宽高的时候\"><a href=\"#当我们只知道本身元素的宽高的时候\" class=\"headerlink\" title=\"当我们只知道本身元素的宽高的时候\"></a>当我们只知道本身元素的宽高的时候</h2><p>可以用定位来做, <code>relative</code>，还是<code>absolute</code>都行。）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种就是使用<code>calc</code>来使用，他必须知道居中本身高度：不支持<code>IE8</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"built_in\">calc</span>(<span class=\"number\">50%</span> - <span class=\"number\">50px</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"built_in\">calc</span>(<span class=\"number\">50%</span> - <span class=\"number\">50px</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>left:calc(50% - 50px);top:calc(50% - 50px);</code>这里的—号记得前后空一个，不然可能会出错。</p>\n<p><code>top</code>为50%在减去自身高度的一半就完成垂直居中。</p>\n<p>上面一个例中，除了使用 <code>margin-left: -50px</code>(宽度的一半);<code>margin-top: -50px</code>(高度度的一半)。</p>\n<h2 id=\"宽高都不知道\"><a href=\"#宽高都不知道\" class=\"headerlink\" title=\"宽高都不知道\"></a>宽高都不知道</h2><p>这个时候我们可以用相对定位来做。</p>\n<p><strong>第一种：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">rightright</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">bottombottom</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素水平居中的方法\"><a href=\"#元素水平居中的方法\" class=\"headerlink\" title=\"元素水平居中的方法\"></a>元素水平居中的方法</h2><h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><p> 先让上下左右值都为0，在使用<code>margin:auto</code>，就可以实现居中。</p>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><p><code>css3</code>中的<code>translate</code>,但是这种方法不兼容<code>IE8</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><p>使用弹性盒子布局，但是这种方法，不支持<code>IE9</code>及以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  </span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种\"><a href=\"#第四种\" class=\"headerlink\" title=\"第四种\"></a>第四种</h3><p>添加一个空的<code>div</code>，该方法不支持<code>IE8</code>以下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"selector-class\">.example1</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五种\"><a href=\"#第五种\" class=\"headerlink\" title=\"第五种\"></a>第五种</h3><p>都不知道宽高度的情况下也可以使用<code>js</code>来居中，但是比较麻烦，所以我们能用<code>css</code>样式居中就不会用<code>js</code>来居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ex = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#box .example'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resize</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> wTop = (box.clientHeight - Ex.clientHeight)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> wLeft = (box.clientWidth - Ex.clientWidth)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    Ex.style.top = wTop+<span class=\"string\">'px'</span>;  </span><br><span class=\"line\">    Ex.style.left = wLeft+<span class=\"string\">'px'</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单纯想要块级元素水平居中，上面所用到的方法外还可以：</p>\n<p>1.本身添加<code>display:inline-block;</code>父级元素添加<code>text-align:center</code>;</p>\n<p>2.给父级元素添加<code>display:flex,justify-content:center;</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span> auto;  </span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;  </span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"selector-class\">.example</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;  </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">5px</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些方法有的用起来很方便，有的则需要自身是块级元素，有的则不需要。方法就写到这里，读者可以根据自身的情况选择一种合适的方法，或者有更好的方法，欢迎留言。有什么错误可以积极的在下面留言，我们一起探讨，一起进步！</p>\n"},{"title":"单元测试 JEST","comments":1,"description":"单元测试 JEST","date":"2018-02-20T12:29:10.000Z","keywords":"单元测试 JEST","_content":"\n\n## 安装\n\n```js\nyarn add --dev jest\n```\n\n或者\n\n```js\nnpm i -D jest\n```\n\n## 简单测试实例\n\n新建`src， test`文件夹\n\n`package.json`中添加：\n\n```js\n\"scripts\": {\n  \"test\": \"jest\"\n}\n```\n\n```js\n// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n```js\n// sum.test.js\nconst sum = require('../src/sum');\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n运行 `npm run test`结果：\n\n```js\n✓ adds 1 + 2 to equal 3 (3ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.988s, estimated 1s\nRan all test suites.\n```\n\n## 普通匹配器\n\n### toBe\n\n看是否精确匹配\n\n```js\nexpect(sum(1, 2)).toBe(3);\n```\n\n`expect (2 + 2)` 返回一个\"期望\"的对象，`.toBe(4)` 是匹配器\n\n`toBe` 使用 `Object.is`来测试是否完全相等\n\n### toEqual\n\n比较对象的值\n\n```js\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n### .not\n\n相反的匹配\n\n```js\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n## Truthiness\n\n有时需要区分 `undefined、 null，和 false`，但有时你又不需要区分。 `Jest` 让你明确你想要什么。\n\n- `toBeNull` 只匹配 `null`\n- `toBeUndefined` 只匹配 `undefined`\n- `toBeDefined` 与 `toBeUndefined` 相反\n- `toBeTruthy` 匹配任何 `if` 语句为真\n- `toBeFalsy` 匹配任何 `if` 语句为假\n\n实例：\n```js\ntest('null', () => {\n  let nu = null\n  expect(nu).toBeNull()\n  expect(nu).toBeDeined()\n  expect(nu).toBeUndefined()\n  expect(nu).toBeTruthy()\n  expect(nu).toBeFalsy()\n})\ntest('zero', () => {\n  let nu = 0\n  expect(nu).toBeNull()\n  expect(nu).toBeDeined()\n  expect(nu).toBeUndefined()\n  expect(nu).toBeTruthy()\n  expect(nu).toBeFalsy()\n})\n\n```\n## 数字\n\n- toBeGreaterThan\n- toBeGreaterThanOrEqual\n- toBeLessThan\n- toBeLessThanOrEqual\n- toBe\n- toEqual\n- toBeCloseTo\n\n```js\ntest('two plus two', () => {\n  const value = 2 + 2\n  expect(value).toBeGreaterThan(3)\n  expect(value).toBeGreaterThanOrEqual(3)\n  expect(value).toBeLessThan(5)\n  expect(value).toBeLessThanOrEqual(4)\n  expect(value).toBe(4)\n  expect(value).toEqual(4)\n})\n// 比较浮点数相等，使用 toBeCloseTo 而不是 toEqual\n\ntest('toBeCloseTo', () => {\n  const value = 0.1 + 0.2\n  expect(value).toBeCloseTo(0.3); // 这句可以运行\n  // expect(value).toEqual(0.3); // 这句不可以运行\n})\n```\n\n## 字符串\n\n```js\n`toMatch`\ntest('string', () => {\n  const val = 'hbbaly'\n  expect(val).not.toMatch(/v/)\n})\ntest('hbb in hbbaly', () => {\n  const val = 'hbbaly'\n  expect(val).toMatch(/hbb/)\n})\n```\n## 数组或可迭代对象\n\n`toContain`来检查一个数组或可迭代对象是否包含某个特定项\n\n```js\nconst arr = [\n  1,2,3,4,5\n];\n\ntest('the arr list has 3', () => {\n  expect(arr).toContain(3);\n  expect(new Set(arr)).toContain(3);\n});\n```\n\n## 例外\n\n测试的特定函数抛出一个错误，在它调用时，使用 `toThrow`\n\n```js\nfunction compileAndroidCode() {\n  throw new ConfigError('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(compileAndroidCode).toThrow();\n  // expect(compileAndroidCode).toThrow(ConfigError);\n\n  // You can also use the exact error message or a regexp\n  // expect(compileAndroidCode).toThrow('you are using the wrong JDK');\n  // expect(compileAndroidCode).toThrow(/JDK/);\n});\n```\n\n## 回调\n在`JavaScript`中执行异步代码是很常见的。 当你有以异步方式运行的代码时，`Jest` 需要知道当前它测试的代码是否已完成，然后它可以转移到另一个测试。\n\n使用单个参数调用 `done`，而不是将测试放在一个空参数的函数。 `Jest`会等`done`回调函数执行结束后，结束测试。\n\n```js\ntest('the data is peanut butter', done => {\n  function callback(data) {\n    expect(data).toBe('peanut butter');\n    done();\n  }\n\n  fetchData(callback);\n});\nfunction fetchData (callback) {\n  callback('peanut butter')\n}\n```\n## Promise\n\n如果您的代码使用 `Promises`，还有一个更简单的方法来处理异步测试。 只需要从您的测试返回一个 `Promise`, `Jest` 会等待这一 `Promise` 来解决。 如果承诺被拒绝，则测试将自动失败。\n\n你想要 `Promise` 被拒绝，使用 `.catch` 方法。 请确保添加 `expect.assertions` 来验证一定数量的断言被调用。 否则一个`fulfilled`态的 `Promise` 不会让测试失败\n\n```js\ntest('the data is peanut butter', () => {\n  expect.assertions(1);\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  }).catch(err => {\n    expect(err).toMatch('error')\n  })\n});\nfunction fetchData () {\n  const fetchPromiseData = new Promise((resolve, reject) => {\n    const bool = Math.random(1)> 0.5\n    if (bool){\n      resolve('peanut butter')\n    } else {\n      reject('error')\n    }\n  })\n  return fetchPromiseData\n}\n```\n\n## Async/Await\n\n使用 `async` 和 `await`。 若要编写 `async` 测试，只要在函数前面使用 `async` 关键字传递到 `test`。\n\n```js\nimport axios  from 'axios'\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  console.log(data)\n  expect(data).not.toBe('peanut butter');\n});\nconst fetchData =  async() => {\n  return await axios.get('https://api.github.com/repos/facebook/jest')\n}\n```\n\n## 多次测试重复设置\n\n有一些要为多次测试重复设置的工作，你可以使用 `beforeEach` 和 `afterEach`。 \n\n考虑一些与城市信息数据库进行交互的测试。 你必须在每个测试之前调用方法 `initializeCityDatabase()` ，同时必须在每个测试后，调用方法 `clearCityDatabase()`。\n\n```js\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\nafterEach(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\nfunction initializeCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('set-hbbaly')\n  })\n  return promise\n}\nfunction clearCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('clear-hbbaly')\n  })\n  return promise\n}\nfunction isCity (val) {\n  return val ==='San Juan' || 'Vienna'\n}\n```\n\n## 一次性设置\n在某些情况下，你只需要在文件的开头做一次设置。 当这种设置是异步行为时，可能非常恼人，你不太可能一行就解决它。 `Jest` 提供 `beforeAll` 和 `afterAll` 处理这种情况。\n\n例如，如果 `initializeCityDatabase` 和 `clearCityDatabase` 都返回了 `promise` ，城市数据库可以在测试中重用，我们就能把我们的测试代码改成这样\n\n```js\n\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\nfunction initializeCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('set-hbbaly')\n  })\n  return promise\n}\nfunction clearCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('clear-hbbaly')\n  })\n  return promise\n}\nfunction isCity (val) {\n  return val ==='San Juan' || 'Vienna'\n}\n```\n\n## 作用域\n\n默认情况下，`before` 和 `after` 的块可以应用到文件中的每个测试。 此外可以通过 `describe` 块来将测试分组。 当 `before` 和 `after` 的块在 `describe` 块内部时，则其只适用于该 `describe` 块内的测试。\n\n```js\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 sausage', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n  function initializeFoodDatabase () {\n    let promise = new Promise(resolve => {\n      resolve('set-hbbaly')\n    })\n    return promise\n  }\n  function isValidCityFoodPair (val) {\n    let arr = ['San Juan', 'Mofongo', 'Vienna', 'Wiener Schnitzel']\n    if (arr.indexOf(val) >= 0) return true\n    return false\n  }\n});\ntest('city database has Vienna', () => {\n  // 不能使用 isValidCityFoodPair\n  // expect(isValidCityFoodPair('Vienna')).toBeTruthy();\n});\n```\n\n## desribe和test块的执行顺序\n\n```js\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n  test('', () => console.log('2 - test'));\n});\n```\n\n```js\n● Console\n\n    console.log test/order.test.js:1\n      1 - beforeAll\n    console.log test/order.test.js:3\n      1 - beforeEach\n    console.log test/order.test.js:5\n      1 - test\n    console.log test/order.test.js:4\n      1 - afterEach\n    console.log test/order.test.js:7\n      2 - beforeAll\n    console.log test/order.test.js:3\n      1 - beforeEach\n    console.log test/order.test.js:9\n      2 - beforeEach\n    console.log test/order.test.js:11\n      2 - test\n    console.log test/order.test.js:10\n      2 - afterEach\n    console.log test/order.test.js:4\n      1 - afterEach\n    console.log test/order.test.js:8\n      2 - afterAll\n    console.log test/order.test.js:2\n      1 - afterAll\n```\n\n\n```js\ndescribe('outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n    test('test 1', () => {\n      console.log('test for describe inner 1');\n      expect(true).toEqual(true);\n    });\n  });\n\n  console.log('describe outer-b');\n\n  test('test 1', () => {\n    console.log('test for describe outer');\n    expect(true).toEqual(true);\n  });\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n    test('test for describe inner 2', () => {\n      console.log('test for describe inner 2');\n      expect(false).toEqual(false);\n    });\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n```\n`Jest` 会在所有真正的测试开始之前执行测试文件里所有的 `describe` 处理程序（`handlers`）。 这是在 `before* `和 `after*` 处理程序里面 （而不是在 `describe` 块中）进行准备工作和整理工作的另一个原因。 当 `describe` 块运行完后,，默认情况下，`Jest` 会按照 `test` 出现的顺序（译者注：原文是in the order they were encountered in the collection phase）依次运行所有测试,，等待每一个测试完成并整理好，然后才继续往下走。\n\n## 通用建议\n\n如果测试失败，第一件要检查的事就是，当仅运行这条测试时，它是否仍然失败。 在 `Jest` 中很容易地只运行一个测试 — — 只需暂时将 `test` 命令更改为 `test.only`。\n\n```js\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(true);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n如果你有一个测试，当它作为一个更大的用例中的一部分时，经常运行失败，但是当你单独运行它时，并不会失败，所以最好考虑其他测试对这个测试的影响。 通常可以通过修改 `beforeEach` 来清除一些共享的状态来修复这种问题。 如果不确定某些共享状态是否被修改，还可以尝试在 `beforeEach` 中 `log` 数据来 `debug`。\n\n### Mock 实现\n`mockImplementation`方法非常有用,当需要定义从另一个模块创建的模拟函数的默认实现时\n\n\n```js\njest.mock('../src/sum.js'); // this happens automatically with automocking\nconst foo = require('../src/sum.js');\nfoo.mockImplementation(() => 42);\nconsole.log(foo()); // 42\n```\n需要重新创建复杂模拟函数,调用产生不同的结果时,使用`MockImplementationOnce`方法\n\n```js\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n### mock name\n\n```js\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n### 自定义匹配器\n\n```js\n// 这个 mock 函数至少被调用一次\nexpect(mockFunc).toBeCalled();\n\n// 这个 mock 函数至少被调用一次，而且传入了特定参数\nexpect(mockFunc).toBeCalledWith(arg1, arg2);\n\n// 这个 mock 函数的最后一次调用传入了特定参数\nexpect(mockFunc).lastCalledWith(arg1, arg2);\n\n// 所有的 mock 的调用和名称都被写入了快照\nexpect(mockFunc).toMatchSnapshot();\n\n///////////////////////////////////////////////\n// 这个 mock 函数至少被调用一次\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// 这个 mock 函数至少被调用一次，而且传入了特定参数\nexpect(mockFunc.mock.calls).toContain([arg1, arg2]);\n\n// 这个 mock 函数的最后一次调用传入了特定参数\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n//  这个 mock 函数的最后一次调用的第一个参数是`42`\n// （注意这个断言的规范是没有语法糖的）\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// 快照会检查 mock 函数被调用了同样的次数，\n// 同样的顺序，和同样的参数 它还会在名称上断言。\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n\n## Jest Platform\n\n您可以选择Jest的特定特性，并将它们作为独立的依赖使用。以下是可用包的列表\n\n### jest-changed-files\n用于标识Git/Hg存储库中已修改文件的工具,\n两个函数：\n\n- `getchangefilesforroots`返回一个`promise`，具有已更改文件和repos的对象。\n\n- `findrepos`返回一个`promise`，解析为指定路径中包含的一组存储库\n\n\n```js\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// 打印出当前目录最后修改过的一组文件\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n### jest-diff\n\n用于可视化数据更改的工具。导出一个函数，该函数比较任何类型的两个值，并返回一个“漂亮打印”的字符串，说明两个参数之间的差异。\n\n```js\nconst diff = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n### jest-docblock\n\n用于提取和分析JavaScript文件顶部注释的工具。导出释块内的数据\n\n```js\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n### jest-get-type\n\n用于标识任何`javascript`值的类型的模块。导出一个函数，该函数返回一个字符串，该字符串的值类型作为参数传递。\n\n```js\nconst getType = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n### jest-validate\n\n用于验证用户提交的配置的工具\n\n导出采用两个参数的函数：用户配置和包含示例配置和其他选项的对象。返回值是一个具有两个属性的对象：\n\n\n- `HasDeprecationWarnings`，一个布尔值，指示提交的配置是否有`Deprecation`警告，\n\n- `Isvalid`，一个布尔值，指示配置是否正确。\n\n```js\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n### jest-worker\n用于任务并行化的模块。\n\n```js\n// heavy-task.js\n\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n\n```\n\n```js\n// main.js\n\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n### pretty-format\n\n导出将任何`javascript`值转换为可读字符串的函数。支持所有现成的内置`JavaScript`类型，并允许通过用户定义的插件扩展特定于应用程序的类型。\n\n```js\nconst prettyFormat = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```","source":"_posts/jest.md","raw":"---\ntitle: 单元测试 JEST\ncomments: true\ndescription: 单元测试 JEST\ntags: \"js\"\ndate: 2018-2-20 20:29:10\ncategories: \"js\"\nkeywords: 单元测试 JEST\n---\n\n\n## 安装\n\n```js\nyarn add --dev jest\n```\n\n或者\n\n```js\nnpm i -D jest\n```\n\n## 简单测试实例\n\n新建`src， test`文件夹\n\n`package.json`中添加：\n\n```js\n\"scripts\": {\n  \"test\": \"jest\"\n}\n```\n\n```js\n// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n\n```js\n// sum.test.js\nconst sum = require('../src/sum');\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n运行 `npm run test`结果：\n\n```js\n✓ adds 1 + 2 to equal 3 (3ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.988s, estimated 1s\nRan all test suites.\n```\n\n## 普通匹配器\n\n### toBe\n\n看是否精确匹配\n\n```js\nexpect(sum(1, 2)).toBe(3);\n```\n\n`expect (2 + 2)` 返回一个\"期望\"的对象，`.toBe(4)` 是匹配器\n\n`toBe` 使用 `Object.is`来测试是否完全相等\n\n### toEqual\n\n比较对象的值\n\n```js\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n### .not\n\n相反的匹配\n\n```js\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n## Truthiness\n\n有时需要区分 `undefined、 null，和 false`，但有时你又不需要区分。 `Jest` 让你明确你想要什么。\n\n- `toBeNull` 只匹配 `null`\n- `toBeUndefined` 只匹配 `undefined`\n- `toBeDefined` 与 `toBeUndefined` 相反\n- `toBeTruthy` 匹配任何 `if` 语句为真\n- `toBeFalsy` 匹配任何 `if` 语句为假\n\n实例：\n```js\ntest('null', () => {\n  let nu = null\n  expect(nu).toBeNull()\n  expect(nu).toBeDeined()\n  expect(nu).toBeUndefined()\n  expect(nu).toBeTruthy()\n  expect(nu).toBeFalsy()\n})\ntest('zero', () => {\n  let nu = 0\n  expect(nu).toBeNull()\n  expect(nu).toBeDeined()\n  expect(nu).toBeUndefined()\n  expect(nu).toBeTruthy()\n  expect(nu).toBeFalsy()\n})\n\n```\n## 数字\n\n- toBeGreaterThan\n- toBeGreaterThanOrEqual\n- toBeLessThan\n- toBeLessThanOrEqual\n- toBe\n- toEqual\n- toBeCloseTo\n\n```js\ntest('two plus two', () => {\n  const value = 2 + 2\n  expect(value).toBeGreaterThan(3)\n  expect(value).toBeGreaterThanOrEqual(3)\n  expect(value).toBeLessThan(5)\n  expect(value).toBeLessThanOrEqual(4)\n  expect(value).toBe(4)\n  expect(value).toEqual(4)\n})\n// 比较浮点数相等，使用 toBeCloseTo 而不是 toEqual\n\ntest('toBeCloseTo', () => {\n  const value = 0.1 + 0.2\n  expect(value).toBeCloseTo(0.3); // 这句可以运行\n  // expect(value).toEqual(0.3); // 这句不可以运行\n})\n```\n\n## 字符串\n\n```js\n`toMatch`\ntest('string', () => {\n  const val = 'hbbaly'\n  expect(val).not.toMatch(/v/)\n})\ntest('hbb in hbbaly', () => {\n  const val = 'hbbaly'\n  expect(val).toMatch(/hbb/)\n})\n```\n## 数组或可迭代对象\n\n`toContain`来检查一个数组或可迭代对象是否包含某个特定项\n\n```js\nconst arr = [\n  1,2,3,4,5\n];\n\ntest('the arr list has 3', () => {\n  expect(arr).toContain(3);\n  expect(new Set(arr)).toContain(3);\n});\n```\n\n## 例外\n\n测试的特定函数抛出一个错误，在它调用时，使用 `toThrow`\n\n```js\nfunction compileAndroidCode() {\n  throw new ConfigError('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(compileAndroidCode).toThrow();\n  // expect(compileAndroidCode).toThrow(ConfigError);\n\n  // You can also use the exact error message or a regexp\n  // expect(compileAndroidCode).toThrow('you are using the wrong JDK');\n  // expect(compileAndroidCode).toThrow(/JDK/);\n});\n```\n\n## 回调\n在`JavaScript`中执行异步代码是很常见的。 当你有以异步方式运行的代码时，`Jest` 需要知道当前它测试的代码是否已完成，然后它可以转移到另一个测试。\n\n使用单个参数调用 `done`，而不是将测试放在一个空参数的函数。 `Jest`会等`done`回调函数执行结束后，结束测试。\n\n```js\ntest('the data is peanut butter', done => {\n  function callback(data) {\n    expect(data).toBe('peanut butter');\n    done();\n  }\n\n  fetchData(callback);\n});\nfunction fetchData (callback) {\n  callback('peanut butter')\n}\n```\n## Promise\n\n如果您的代码使用 `Promises`，还有一个更简单的方法来处理异步测试。 只需要从您的测试返回一个 `Promise`, `Jest` 会等待这一 `Promise` 来解决。 如果承诺被拒绝，则测试将自动失败。\n\n你想要 `Promise` 被拒绝，使用 `.catch` 方法。 请确保添加 `expect.assertions` 来验证一定数量的断言被调用。 否则一个`fulfilled`态的 `Promise` 不会让测试失败\n\n```js\ntest('the data is peanut butter', () => {\n  expect.assertions(1);\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  }).catch(err => {\n    expect(err).toMatch('error')\n  })\n});\nfunction fetchData () {\n  const fetchPromiseData = new Promise((resolve, reject) => {\n    const bool = Math.random(1)> 0.5\n    if (bool){\n      resolve('peanut butter')\n    } else {\n      reject('error')\n    }\n  })\n  return fetchPromiseData\n}\n```\n\n## Async/Await\n\n使用 `async` 和 `await`。 若要编写 `async` 测试，只要在函数前面使用 `async` 关键字传递到 `test`。\n\n```js\nimport axios  from 'axios'\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  console.log(data)\n  expect(data).not.toBe('peanut butter');\n});\nconst fetchData =  async() => {\n  return await axios.get('https://api.github.com/repos/facebook/jest')\n}\n```\n\n## 多次测试重复设置\n\n有一些要为多次测试重复设置的工作，你可以使用 `beforeEach` 和 `afterEach`。 \n\n考虑一些与城市信息数据库进行交互的测试。 你必须在每个测试之前调用方法 `initializeCityDatabase()` ，同时必须在每个测试后，调用方法 `clearCityDatabase()`。\n\n```js\nbeforeEach(() => {\n  return initializeCityDatabase();\n});\n\nafterEach(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\nfunction initializeCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('set-hbbaly')\n  })\n  return promise\n}\nfunction clearCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('clear-hbbaly')\n  })\n  return promise\n}\nfunction isCity (val) {\n  return val ==='San Juan' || 'Vienna'\n}\n```\n\n## 一次性设置\n在某些情况下，你只需要在文件的开头做一次设置。 当这种设置是异步行为时，可能非常恼人，你不太可能一行就解决它。 `Jest` 提供 `beforeAll` 和 `afterAll` 处理这种情况。\n\n例如，如果 `initializeCityDatabase` 和 `clearCityDatabase` 都返回了 `promise` ，城市数据库可以在测试中重用，我们就能把我们的测试代码改成这样\n\n```js\n\nbeforeAll(() => {\n  return initializeCityDatabase();\n});\n\nafterAll(() => {\n  return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n  expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n  expect(isCity('San Juan')).toBeTruthy();\n});\nfunction initializeCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('set-hbbaly')\n  })\n  return promise\n}\nfunction clearCityDatabase () {\n  let promise = new Promise(resolve => {\n    resolve('clear-hbbaly')\n  })\n  return promise\n}\nfunction isCity (val) {\n  return val ==='San Juan' || 'Vienna'\n}\n```\n\n## 作用域\n\n默认情况下，`before` 和 `after` 的块可以应用到文件中的每个测试。 此外可以通过 `describe` 块来将测试分组。 当 `before` 和 `after` 的块在 `describe` 块内部时，则其只适用于该 `describe` 块内的测试。\n\n```js\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 sausage', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n  function initializeFoodDatabase () {\n    let promise = new Promise(resolve => {\n      resolve('set-hbbaly')\n    })\n    return promise\n  }\n  function isValidCityFoodPair (val) {\n    let arr = ['San Juan', 'Mofongo', 'Vienna', 'Wiener Schnitzel']\n    if (arr.indexOf(val) >= 0) return true\n    return false\n  }\n});\ntest('city database has Vienna', () => {\n  // 不能使用 isValidCityFoodPair\n  // expect(isValidCityFoodPair('Vienna')).toBeTruthy();\n});\n```\n\n## desribe和test块的执行顺序\n\n```js\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n  test('', () => console.log('2 - test'));\n});\n```\n\n```js\n● Console\n\n    console.log test/order.test.js:1\n      1 - beforeAll\n    console.log test/order.test.js:3\n      1 - beforeEach\n    console.log test/order.test.js:5\n      1 - test\n    console.log test/order.test.js:4\n      1 - afterEach\n    console.log test/order.test.js:7\n      2 - beforeAll\n    console.log test/order.test.js:3\n      1 - beforeEach\n    console.log test/order.test.js:9\n      2 - beforeEach\n    console.log test/order.test.js:11\n      2 - test\n    console.log test/order.test.js:10\n      2 - afterEach\n    console.log test/order.test.js:4\n      1 - afterEach\n    console.log test/order.test.js:8\n      2 - afterAll\n    console.log test/order.test.js:2\n      1 - afterAll\n```\n\n\n```js\ndescribe('outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n    test('test 1', () => {\n      console.log('test for describe inner 1');\n      expect(true).toEqual(true);\n    });\n  });\n\n  console.log('describe outer-b');\n\n  test('test 1', () => {\n    console.log('test for describe outer');\n    expect(true).toEqual(true);\n  });\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n    test('test for describe inner 2', () => {\n      console.log('test for describe inner 2');\n      expect(false).toEqual(false);\n    });\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n```\n`Jest` 会在所有真正的测试开始之前执行测试文件里所有的 `describe` 处理程序（`handlers`）。 这是在 `before* `和 `after*` 处理程序里面 （而不是在 `describe` 块中）进行准备工作和整理工作的另一个原因。 当 `describe` 块运行完后,，默认情况下，`Jest` 会按照 `test` 出现的顺序（译者注：原文是in the order they were encountered in the collection phase）依次运行所有测试,，等待每一个测试完成并整理好，然后才继续往下走。\n\n## 通用建议\n\n如果测试失败，第一件要检查的事就是，当仅运行这条测试时，它是否仍然失败。 在 `Jest` 中很容易地只运行一个测试 — — 只需暂时将 `test` 命令更改为 `test.only`。\n\n```js\ntest.only('this will be the only test that runs', () => {\n  expect(true).toBe(true);\n});\n\ntest('this test will not run', () => {\n  expect('A').toBe('A');\n});\n```\n\n如果你有一个测试，当它作为一个更大的用例中的一部分时，经常运行失败，但是当你单独运行它时，并不会失败，所以最好考虑其他测试对这个测试的影响。 通常可以通过修改 `beforeEach` 来清除一些共享的状态来修复这种问题。 如果不确定某些共享状态是否被修改，还可以尝试在 `beforeEach` 中 `log` 数据来 `debug`。\n\n### Mock 实现\n`mockImplementation`方法非常有用,当需要定义从另一个模块创建的模拟函数的默认实现时\n\n\n```js\njest.mock('../src/sum.js'); // this happens automatically with automocking\nconst foo = require('../src/sum.js');\nfoo.mockImplementation(() => 42);\nconsole.log(foo()); // 42\n```\n需要重新创建复杂模拟函数,调用产生不同的结果时,使用`MockImplementationOnce`方法\n\n```js\nconst myMockFn = jest\n  .fn()\n  .mockImplementationOnce(cb => cb(null, true))\n  .mockImplementationOnce(cb => cb(null, false));\n\nmyMockFn((err, val) => console.log(val));\n// > true\n\nmyMockFn((err, val) => console.log(val));\n// > false\n```\n\n### mock name\n\n```js\nconst myMockFn = jest\n  .fn()\n  .mockReturnValue('default')\n  .mockImplementation(scalar => 42 + scalar)\n  .mockName('add42');\n```\n\n### 自定义匹配器\n\n```js\n// 这个 mock 函数至少被调用一次\nexpect(mockFunc).toBeCalled();\n\n// 这个 mock 函数至少被调用一次，而且传入了特定参数\nexpect(mockFunc).toBeCalledWith(arg1, arg2);\n\n// 这个 mock 函数的最后一次调用传入了特定参数\nexpect(mockFunc).lastCalledWith(arg1, arg2);\n\n// 所有的 mock 的调用和名称都被写入了快照\nexpect(mockFunc).toMatchSnapshot();\n\n///////////////////////////////////////////////\n// 这个 mock 函数至少被调用一次\nexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);\n\n// 这个 mock 函数至少被调用一次，而且传入了特定参数\nexpect(mockFunc.mock.calls).toContain([arg1, arg2]);\n\n// 这个 mock 函数的最后一次调用传入了特定参数\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([\n  arg1,\n  arg2,\n]);\n\n//  这个 mock 函数的最后一次调用的第一个参数是`42`\n// （注意这个断言的规范是没有语法糖的）\nexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);\n\n// 快照会检查 mock 函数被调用了同样的次数，\n// 同样的顺序，和同样的参数 它还会在名称上断言。\nexpect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);\nexpect(mockFunc.getMockName()).toBe('a mock name');\n```\n\n\n## Jest Platform\n\n您可以选择Jest的特定特性，并将它们作为独立的依赖使用。以下是可用包的列表\n\n### jest-changed-files\n用于标识Git/Hg存储库中已修改文件的工具,\n两个函数：\n\n- `getchangefilesforroots`返回一个`promise`，具有已更改文件和repos的对象。\n\n- `findrepos`返回一个`promise`，解析为指定路径中包含的一组存储库\n\n\n```js\nconst {getChangedFilesForRoots} = require('jest-changed-files');\n\n// 打印出当前目录最后修改过的一组文件\ngetChangedFilesForRoots(['./'], {\n  lastCommit: true,\n}).then(result => console.log(result.changedFiles));\n```\n\n### jest-diff\n\n用于可视化数据更改的工具。导出一个函数，该函数比较任何类型的两个值，并返回一个“漂亮打印”的字符串，说明两个参数之间的差异。\n\n```js\nconst diff = require('jest-diff');\n\nconst a = {a: {b: {c: 5}}};\nconst b = {a: {b: {c: 6}}};\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log(result);\n```\n\n### jest-docblock\n\n用于提取和分析JavaScript文件顶部注释的工具。导出释块内的数据\n\n```js\nconst {parseWithComments} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n```\n\n### jest-get-type\n\n用于标识任何`javascript`值的类型的模块。导出一个函数，该函数返回一个字符串，该字符串的值类型作为参数传递。\n\n```js\nconst getType = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n```\n\n### jest-validate\n\n用于验证用户提交的配置的工具\n\n导出采用两个参数的函数：用户配置和包含示例配置和其他选项的对象。返回值是一个具有两个属性的对象：\n\n\n- `HasDeprecationWarnings`，一个布尔值，指示提交的配置是否有`Deprecation`警告，\n\n- `Isvalid`，一个布尔值，指示配置是否正确。\n\n```js\nconst {validate} = require('jest-validate');\n\nconst configByUser = {\n  transform: '<rootDir>/node_modules/my-custom-transform',\n};\n\nconst result = validate(configByUser, {\n  comment: '  Documentation: http://custom-docs.com',\n  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},\n});\n\nconsole.log(result);\n```\n\n### jest-worker\n用于任务并行化的模块。\n\n```js\n// heavy-task.js\n\nmodule.exports = {\n  myHeavyTask: args => {\n    // long running CPU intensive task.\n  },\n};\n\n```\n\n```js\n// main.js\n\nasync function main() {\n  const worker = new Worker(require.resolve('./heavy-task.js'));\n\n  // run 2 tasks in parallel with different arguments\n  const results = await Promise.all([\n    worker.myHeavyTask({foo: 'bar'}),\n    worker.myHeavyTask({bar: 'foo'}),\n  ]);\n\n  console.log(results);\n}\n\nmain();\n```\n\n### pretty-format\n\n导出将任何`javascript`值转换为可读字符串的函数。支持所有现成的内置`JavaScript`类型，并允许通过用户定义的插件扩展特定于应用程序的类型。\n\n```js\nconst prettyFormat = require('pretty-format');\n\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n```","slug":"jest","published":1,"updated":"2020-12-02T06:49:34.125Z","layout":"post","photos":[],"link":"","_id":"cki71wakv001wtl9kee9zp5j2","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev jest</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D jest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单测试实例\"><a href=\"#简单测试实例\" class=\"headerlink\" title=\"简单测试实例\"></a>简单测试实例</h2><p>新建<code>src， test</code>文件夹</p>\n<p><code>package.json</code>中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"jest\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sum.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sum.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/sum'</span>);</span><br><span class=\"line\">test(<span class=\"string\">'adds 1 + 2 to equal 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>npm run test</code>结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">✓ adds <span class=\"number\">1</span> + <span class=\"number\">2</span> to equal <span class=\"number\">3</span> (<span class=\"number\">3</span>ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: <span class=\"number\">1</span> passed, <span class=\"number\">1</span> total</span><br><span class=\"line\">Tests:       <span class=\"number\">1</span> passed, <span class=\"number\">1</span> total</span><br><span class=\"line\">Snapshots:   <span class=\"number\">0</span> total</span><br><span class=\"line\">Time:        <span class=\"number\">0.988</span>s, estimated <span class=\"number\">1</span>s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"普通匹配器\"><a href=\"#普通匹配器\" class=\"headerlink\" title=\"普通匹配器\"></a>普通匹配器</h2><h3 id=\"toBe\"><a href=\"#toBe\" class=\"headerlink\" title=\"toBe\"></a>toBe</h3><p>看是否精确匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>expect (2 + 2)</code> 返回一个”期望”的对象，<code>.toBe(4)</code> 是匹配器</p>\n<p><code>toBe</code> 使用 <code>Object.is</code>来测试是否完全相等</p>\n<h3 id=\"toEqual\"><a href=\"#toEqual\" class=\"headerlink\" title=\"toEqual\"></a>toEqual</h3><p>比较对象的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'object assignment'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  data[<span class=\"string\">'two'</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">  expect(data).toEqual(&#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>, <span class=\"attr\">two</span>: <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\".not\"></a>.not</h3><p>相反的匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'adding positive numbers is not zero'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">10</span>; b++) &#123;</span><br><span class=\"line\">      expect(a + b).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Truthiness\"><a href=\"#Truthiness\" class=\"headerlink\" title=\"Truthiness\"></a>Truthiness</h2><p>有时需要区分 <code>undefined、 null，和 false</code>，但有时你又不需要区分。 <code>Jest</code> 让你明确你想要什么。</p>\n<ul>\n<li><code>toBeNull</code> 只匹配 <code>null</code></li>\n<li><code>toBeUndefined</code> 只匹配 <code>undefined</code></li>\n<li><code>toBeDefined</code> 与 <code>toBeUndefined</code> 相反</li>\n<li><code>toBeTruthy</code> 匹配任何 <code>if</code> 语句为真</li>\n<li><code>toBeFalsy</code> 匹配任何 <code>if</code> 语句为假</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'null'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nu = <span class=\"literal\">null</span></span><br><span class=\"line\">  expect(nu).toBeNull()</span><br><span class=\"line\">  expect(nu).toBeDeined()</span><br><span class=\"line\">  expect(nu).toBeUndefined()</span><br><span class=\"line\">  expect(nu).toBeTruthy()</span><br><span class=\"line\">  expect(nu).toBeFalsy()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">test(<span class=\"string\">'zero'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nu = <span class=\"number\">0</span></span><br><span class=\"line\">  expect(nu).toBeNull()</span><br><span class=\"line\">  expect(nu).toBeDeined()</span><br><span class=\"line\">  expect(nu).toBeUndefined()</span><br><span class=\"line\">  expect(nu).toBeTruthy()</span><br><span class=\"line\">  expect(nu).toBeFalsy()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><ul>\n<li>toBeGreaterThan</li>\n<li>toBeGreaterThanOrEqual</li>\n<li>toBeLessThan</li>\n<li>toBeLessThanOrEqual</li>\n<li>toBe</li>\n<li>toEqual</li>\n<li>toBeCloseTo</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'two plus two'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\">  expect(value).toBeGreaterThan(<span class=\"number\">3</span>)</span><br><span class=\"line\">  expect(value).toBeGreaterThanOrEqual(<span class=\"number\">3</span>)</span><br><span class=\"line\">  expect(value).toBeLessThan(<span class=\"number\">5</span>)</span><br><span class=\"line\">  expect(value).toBeLessThanOrEqual(<span class=\"number\">4</span>)</span><br><span class=\"line\">  expect(value).toBe(<span class=\"number\">4</span>)</span><br><span class=\"line\">  expect(value).toEqual(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 比较浮点数相等，使用 toBeCloseTo 而不是 toEqual</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'toBeCloseTo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\">  expect(value).toBeCloseTo(<span class=\"number\">0.3</span>); <span class=\"comment\">// 这句可以运行</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(value).toEqual(0.3); // 这句不可以运行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`toMatch`</span></span><br><span class=\"line\">test(<span class=\"string\">'string'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">  expect(val).not.toMatch(<span class=\"regexp\">/v/</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">test(<span class=\"string\">'hbb in hbbaly'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">  expect(val).toMatch(<span class=\"regexp\">/hbb/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组或可迭代对象\"><a href=\"#数组或可迭代对象\" class=\"headerlink\" title=\"数组或可迭代对象\"></a>数组或可迭代对象</h2><p><code>toContain</code>来检查一个数组或可迭代对象是否包含某个特定项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the arr list has 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(arr).toContain(<span class=\"number\">3</span>);</span><br><span class=\"line\">  expect(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)).toContain(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例外\"><a href=\"#例外\" class=\"headerlink\" title=\"例外\"></a>例外</h2><p>测试的特定函数抛出一个错误，在它调用时，使用 <code>toThrow</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileAndroidCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConfigError(<span class=\"string\">'you are using the wrong JDK'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'compiling android goes as expected'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(compileAndroidCode).toThrow();</span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow(ConfigError);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// You can also use the exact error message or a regexp</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow('you are using the wrong JDK');</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow(/JDK/);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h2><p>在<code>JavaScript</code>中执行异步代码是很常见的。 当你有以异步方式运行的代码时，<code>Jest</code> 需要知道当前它测试的代码是否已完成，然后它可以转移到另一个测试。</p>\n<p>使用单个参数调用 <code>done</code>，而不是将测试放在一个空参数的函数。 <code>Jest</code>会等<code>done</code>回调函数执行结束后，结束测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  callback(<span class=\"string\">'peanut butter'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>如果您的代码使用 <code>Promises</code>，还有一个更简单的方法来处理异步测试。 只需要从您的测试返回一个 <code>Promise</code>, <code>Jest</code> 会等待这一 <code>Promise</code> 来解决。 如果承诺被拒绝，则测试将自动失败。</p>\n<p>你想要 <code>Promise</code> 被拒绝，使用 <code>.catch</code> 方法。 请确保添加 <code>expect.assertions</code> 来验证一定数量的断言被调用。 否则一个<code>fulfilled</code>态的 <code>Promise</code> 不会让测试失败</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(err).toMatch(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fetchPromiseData = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bool = <span class=\"built_in\">Math</span>.random(<span class=\"number\">1</span>)&gt; <span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bool)&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'peanut butter'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchPromiseData</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h2><p>使用 <code>async</code> 和 <code>await</code>。 若要编写 <code>async</code> 测试，只要在函数前面使用 <code>async</code> 关键字传递到 <code>test</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios  <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  expect(data).not.toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fetchData =  <span class=\"keyword\">async</span>() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> axios.get(<span class=\"string\">'https://api.github.com/repos/facebook/jest'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多次测试重复设置\"><a href=\"#多次测试重复设置\" class=\"headerlink\" title=\"多次测试重复设置\"></a>多次测试重复设置</h2><p>有一些要为多次测试重复设置的工作，你可以使用 <code>beforeEach</code> 和 <code>afterEach</code>。 </p>\n<p>考虑一些与城市信息数据库进行交互的测试。 你必须在每个测试之前调用方法 <code>initializeCityDatabase()</code> ，同时必须在每个测试后，调用方法 <code>clearCityDatabase()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'Vienna'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has San Juan'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'San Juan'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'clear-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCity</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val ===<span class=\"string\">'San Juan'</span> || <span class=\"string\">'Vienna'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一次性设置\"><a href=\"#一次性设置\" class=\"headerlink\" title=\"一次性设置\"></a>一次性设置</h2><p>在某些情况下，你只需要在文件的开头做一次设置。 当这种设置是异步行为时，可能非常恼人，你不太可能一行就解决它。 <code>Jest</code> 提供 <code>beforeAll</code> 和 <code>afterAll</code> 处理这种情况。</p>\n<p>例如，如果 <code>initializeCityDatabase</code> 和 <code>clearCityDatabase</code> 都返回了 <code>promise</code> ，城市数据库可以在测试中重用，我们就能把我们的测试代码改成这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'Vienna'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has San Juan'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'San Juan'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'clear-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCity</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val ===<span class=\"string\">'San Juan'</span> || <span class=\"string\">'Vienna'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>默认情况下，<code>before</code> 和 <code>after</code> 的块可以应用到文件中的每个测试。 此外可以通过 <code>describe</code> 块来将测试分组。 当 <code>before</code> 和 <code>after</code> 的块在 <code>describe</code> 块内部时，则其只适用于该 <code>describe</code> 块内的测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'matching cities to foods'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Applies only to tests in this describe block</span></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeFoodDatabase();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'Vienna &lt;3 sausage'</span>, () =&gt; &#123;</span><br><span class=\"line\">    expect(isValidCityFoodPair(<span class=\"string\">'Vienna'</span>, <span class=\"string\">'Wiener Schnitzel'</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'San Juan &lt;3 plantains'</span>, () =&gt; &#123;</span><br><span class=\"line\">    expect(isValidCityFoodPair(<span class=\"string\">'San Juan'</span>, <span class=\"string\">'Mofongo'</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeFoodDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidCityFoodPair</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'San Juan'</span>, <span class=\"string\">'Mofongo'</span>, <span class=\"string\">'Vienna'</span>, <span class=\"string\">'Wiener Schnitzel'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(val) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不能使用 isValidCityFoodPair</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(isValidCityFoodPair('Vienna')).toBeTruthy();</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"desribe和test块的执行顺序\"><a href=\"#desribe和test块的执行顺序\" class=\"headerlink\" title=\"desribe和test块的执行顺序\"></a>desribe和test块的执行顺序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeAll'</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterAll'</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeEach'</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterEach'</span>));</span><br><span class=\"line\">test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - test'</span>));</span><br><span class=\"line\">describe(<span class=\"string\">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class=\"line\">  beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeAll'</span>));</span><br><span class=\"line\">  afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterAll'</span>));</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeEach'</span>));</span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterEach'</span>));</span><br><span class=\"line\">  test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - test'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● Console</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - test</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">7</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - beforeAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">9</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">11</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - test</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">8</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - afterAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterAll</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'outer'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-a'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'describe inner 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe inner 1'</span>);</span><br><span class=\"line\">    test(<span class=\"string\">'test 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe inner 1'</span>);</span><br><span class=\"line\">      expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'test 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe outer'</span>);</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'describe inner 2'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe inner 2'</span>);</span><br><span class=\"line\">    test(<span class=\"string\">'test for describe inner 2'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe inner 2'</span>);</span><br><span class=\"line\">      expect(<span class=\"literal\">false</span>).toEqual(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-c'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// describe outer-a</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-b</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 2</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-c</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe outer</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 2</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Jest</code> 会在所有真正的测试开始之前执行测试文件里所有的 <code>describe</code> 处理程序（<code>handlers</code>）。 这是在 <code>before*</code>和 <code>after*</code> 处理程序里面 （而不是在 <code>describe</code> 块中）进行准备工作和整理工作的另一个原因。 当 <code>describe</code> 块运行完后,，默认情况下，<code>Jest</code> 会按照 <code>test</code> 出现的顺序（译者注：原文是in the order they were encountered in the collection phase）依次运行所有测试,，等待每一个测试完成并整理好，然后才继续往下走。</p>\n<h2 id=\"通用建议\"><a href=\"#通用建议\" class=\"headerlink\" title=\"通用建议\"></a>通用建议</h2><p>如果测试失败，第一件要检查的事就是，当仅运行这条测试时，它是否仍然失败。 在 <code>Jest</code> 中很容易地只运行一个测试 — — 只需暂时将 <code>test</code> 命令更改为 <code>test.only</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">'this will be the only test that runs'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'this test will not run'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(<span class=\"string\">'A'</span>).toBe(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果你有一个测试，当它作为一个更大的用例中的一部分时，经常运行失败，但是当你单独运行它时，并不会失败，所以最好考虑其他测试对这个测试的影响。 通常可以通过修改 <code>beforeEach</code> 来清除一些共享的状态来修复这种问题。 如果不确定某些共享状态是否被修改，还可以尝试在 <code>beforeEach</code> 中 <code>log</code> 数据来 <code>debug</code>。</p>\n<h3 id=\"Mock-实现\"><a href=\"#Mock-实现\" class=\"headerlink\" title=\"Mock 实现\"></a>Mock 实现</h3><p><code>mockImplementation</code>方法非常有用,当需要定义从另一个模块创建的模拟函数的默认实现时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jest.mock(<span class=\"string\">'../src/sum.js'</span>); <span class=\"comment\">// this happens automatically with automocking</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/sum.js'</span>);</span><br><span class=\"line\">foo.mockImplementation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo()); <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<p>需要重新创建复杂模拟函数,调用产生不同的结果时,使用<code>MockImplementationOnce</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myMockFn = jest</span><br><span class=\"line\">  .fn()</span><br><span class=\"line\">  .mockImplementationOnce(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>))</span><br><span class=\"line\">  .mockImplementationOnce(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">myMockFn(<span class=\"function\">(<span class=\"params\">err, val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"><span class=\"comment\">// &gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">myMockFn(<span class=\"function\">(<span class=\"params\">err, val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"><span class=\"comment\">// &gt; false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mock-name\"><a href=\"#mock-name\" class=\"headerlink\" title=\"mock name\"></a>mock name</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myMockFn = jest</span><br><span class=\"line\">  .fn()</span><br><span class=\"line\">  .mockReturnValue(<span class=\"string\">'default'</span>)</span><br><span class=\"line\">  .mockImplementation(<span class=\"function\"><span class=\"params\">scalar</span> =&gt;</span> <span class=\"number\">42</span> + scalar)</span><br><span class=\"line\">  .mockName(<span class=\"string\">'add42'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义匹配器\"><a href=\"#自定义匹配器\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次</span></span><br><span class=\"line\">expect(mockFunc).toBeCalled();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次，而且传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc).toBeCalledWith(arg1, arg2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数的最后一次调用传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc).lastCalledWith(arg1, arg2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有的 mock 的调用和名称都被写入了快照</span></span><br><span class=\"line\">expect(mockFunc).toMatchSnapshot();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次</span></span><br><span class=\"line\">expect(mockFunc.mock.calls.length).toBeGreaterThan(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次，而且传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc.mock.calls).toContain([arg1, arg2]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数的最后一次调用传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc.mock.calls[mockFunc.mock.calls.length - <span class=\"number\">1</span>]).toEqual([</span><br><span class=\"line\">  arg1,</span><br><span class=\"line\">  arg2,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  这个 mock 函数的最后一次调用的第一个参数是`42`</span></span><br><span class=\"line\"><span class=\"comment\">// （注意这个断言的规范是没有语法糖的）</span></span><br><span class=\"line\">expect(mockFunc.mock.calls[mockFunc.mock.calls.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>]).toBe(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 快照会检查 mock 函数被调用了同样的次数，</span></span><br><span class=\"line\"><span class=\"comment\">// 同样的顺序，和同样的参数 它还会在名称上断言。</span></span><br><span class=\"line\">expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);</span><br><span class=\"line\">expect(mockFunc.getMockName()).toBe(<span class=\"string\">'a mock name'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jest-Platform\"><a href=\"#Jest-Platform\" class=\"headerlink\" title=\"Jest Platform\"></a>Jest Platform</h2><p>您可以选择Jest的特定特性，并将它们作为独立的依赖使用。以下是可用包的列表</p>\n<h3 id=\"jest-changed-files\"><a href=\"#jest-changed-files\" class=\"headerlink\" title=\"jest-changed-files\"></a>jest-changed-files</h3><p>用于标识Git/Hg存储库中已修改文件的工具,<br>两个函数：</p>\n<ul>\n<li><p><code>getchangefilesforroots</code>返回一个<code>promise</code>，具有已更改文件和repos的对象。</p>\n</li>\n<li><p><code>findrepos</code>返回一个<code>promise</code>，解析为指定路径中包含的一组存储库</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;getChangedFilesForRoots&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-changed-files'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印出当前目录最后修改过的一组文件</span></span><br><span class=\"line\">getChangedFilesForRoots([<span class=\"string\">'./'</span>], &#123;</span><br><span class=\"line\">  lastCommit: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result.changedFiles));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-diff\"><a href=\"#jest-diff\" class=\"headerlink\" title=\"jest-diff\"></a>jest-diff</h3><p>用于可视化数据更改的工具。导出一个函数，该函数比较任何类型的两个值，并返回一个“漂亮打印”的字符串，说明两个参数之间的差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> diff = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-diff'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">5</span>&#125;&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">6</span>&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = diff(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print diff</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-docblock\"><a href=\"#jest-docblock\" class=\"headerlink\" title=\"jest-docblock\"></a>jest-docblock</h3><p>用于提取和分析JavaScript文件顶部注释的工具。导出释块内的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;parseWithComments&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-docblock'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"><span class=\"string\"> * This is a sample</span></span><br><span class=\"line\"><span class=\"string\"> *</span></span><br><span class=\"line\"><span class=\"string\"> * @flow</span></span><br><span class=\"line\"><span class=\"string\"> */</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> console.log('Hello World!');</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> parsed = parseWithComments(code);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints an object with two attributes: comments and pragmas.</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsed);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-get-type\"><a href=\"#jest-get-type\" class=\"headerlink\" title=\"jest-get-type\"></a>jest-get-type</h3><p>用于标识任何<code>javascript</code>值的类型的模块。导出一个函数，该函数返回一个字符串，该字符串的值类型作为参数传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-get-type'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nullValue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> undefinedValue = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 'array'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(array));</span><br><span class=\"line\"><span class=\"comment\">// prints 'null'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(nullValue));</span><br><span class=\"line\"><span class=\"comment\">// prints 'undefined'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(undefinedValue));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-validate\"><a href=\"#jest-validate\" class=\"headerlink\" title=\"jest-validate\"></a>jest-validate</h3><p>用于验证用户提交的配置的工具</p>\n<p>导出采用两个参数的函数：用户配置和包含示例配置和其他选项的对象。返回值是一个具有两个属性的对象：</p>\n<ul>\n<li><p><code>HasDeprecationWarnings</code>，一个布尔值，指示提交的配置是否有<code>Deprecation</code>警告，</p>\n</li>\n<li><p><code>Isvalid</code>，一个布尔值，指示配置是否正确。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;validate&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-validate'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> configByUser = &#123;</span><br><span class=\"line\">  transform: <span class=\"string\">'&lt;rootDir&gt;/node_modules/my-custom-transform'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = validate(configByUser, &#123;</span><br><span class=\"line\">  comment: <span class=\"string\">'  Documentation: http://custom-docs.com'</span>,</span><br><span class=\"line\">  exampleConfig: &#123;<span class=\"attr\">transform</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/babel-jest'</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-worker\"><a href=\"#jest-worker\" class=\"headerlink\" title=\"jest-worker\"></a>jest-worker</h3><p>用于任务并行化的模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// heavy-task.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  myHeavyTask: <span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// long running CPU intensive task.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'./heavy-task.js'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// run 2 tasks in parallel with different arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    worker.myHeavyTask(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;),</span><br><span class=\"line\">    worker.myHeavyTask(&#123;<span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span>&#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pretty-format\"><a href=\"#pretty-format\" class=\"headerlink\" title=\"pretty-format\"></a>pretty-format</h3><p>导出将任何<code>javascript</code>值转换为可读字符串的函数。支持所有现成的内置<code>JavaScript</code>类型，并允许通过用户定义的插件扩展特定于应用程序的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prettyFormat = <span class=\"built_in\">require</span>(<span class=\"string\">'pretty-format'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> val = &#123;<span class=\"attr\">object</span>: &#123;&#125;&#125;;</span><br><span class=\"line\">val.circularReference = val;</span><br><span class=\"line\">val[<span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)] = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">val.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'prop'</span>, <span class=\"string\">'value'</span>]]);</span><br><span class=\"line\">val.array = [<span class=\"number\">-0</span>, <span class=\"literal\">Infinity</span>, <span class=\"literal\">NaN</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(prettyFormat(val));</span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev jest</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D jest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单测试实例\"><a href=\"#简单测试实例\" class=\"headerlink\" title=\"简单测试实例\"></a>简单测试实例</h2><p>新建<code>src， test</code>文件夹</p>\n<p><code>package.json</code>中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"jest\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sum.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sum.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/sum'</span>);</span><br><span class=\"line\">test(<span class=\"string\">'adds 1 + 2 to equal 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>npm run test</code>结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">✓ adds <span class=\"number\">1</span> + <span class=\"number\">2</span> to equal <span class=\"number\">3</span> (<span class=\"number\">3</span>ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: <span class=\"number\">1</span> passed, <span class=\"number\">1</span> total</span><br><span class=\"line\">Tests:       <span class=\"number\">1</span> passed, <span class=\"number\">1</span> total</span><br><span class=\"line\">Snapshots:   <span class=\"number\">0</span> total</span><br><span class=\"line\">Time:        <span class=\"number\">0.988</span>s, estimated <span class=\"number\">1</span>s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"普通匹配器\"><a href=\"#普通匹配器\" class=\"headerlink\" title=\"普通匹配器\"></a>普通匹配器</h2><h3 id=\"toBe\"><a href=\"#toBe\" class=\"headerlink\" title=\"toBe\"></a>toBe</h3><p>看是否精确匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>expect (2 + 2)</code> 返回一个”期望”的对象，<code>.toBe(4)</code> 是匹配器</p>\n<p><code>toBe</code> 使用 <code>Object.is</code>来测试是否完全相等</p>\n<h3 id=\"toEqual\"><a href=\"#toEqual\" class=\"headerlink\" title=\"toEqual\"></a>toEqual</h3><p>比较对象的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'object assignment'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  data[<span class=\"string\">'two'</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">  expect(data).toEqual(&#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>, <span class=\"attr\">two</span>: <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\".not\"></a>.not</h3><p>相反的匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'adding positive numbers is not zero'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">10</span>; b++) &#123;</span><br><span class=\"line\">      expect(a + b).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Truthiness\"><a href=\"#Truthiness\" class=\"headerlink\" title=\"Truthiness\"></a>Truthiness</h2><p>有时需要区分 <code>undefined、 null，和 false</code>，但有时你又不需要区分。 <code>Jest</code> 让你明确你想要什么。</p>\n<ul>\n<li><code>toBeNull</code> 只匹配 <code>null</code></li>\n<li><code>toBeUndefined</code> 只匹配 <code>undefined</code></li>\n<li><code>toBeDefined</code> 与 <code>toBeUndefined</code> 相反</li>\n<li><code>toBeTruthy</code> 匹配任何 <code>if</code> 语句为真</li>\n<li><code>toBeFalsy</code> 匹配任何 <code>if</code> 语句为假</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'null'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nu = <span class=\"literal\">null</span></span><br><span class=\"line\">  expect(nu).toBeNull()</span><br><span class=\"line\">  expect(nu).toBeDeined()</span><br><span class=\"line\">  expect(nu).toBeUndefined()</span><br><span class=\"line\">  expect(nu).toBeTruthy()</span><br><span class=\"line\">  expect(nu).toBeFalsy()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">test(<span class=\"string\">'zero'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nu = <span class=\"number\">0</span></span><br><span class=\"line\">  expect(nu).toBeNull()</span><br><span class=\"line\">  expect(nu).toBeDeined()</span><br><span class=\"line\">  expect(nu).toBeUndefined()</span><br><span class=\"line\">  expect(nu).toBeTruthy()</span><br><span class=\"line\">  expect(nu).toBeFalsy()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><ul>\n<li>toBeGreaterThan</li>\n<li>toBeGreaterThanOrEqual</li>\n<li>toBeLessThan</li>\n<li>toBeLessThanOrEqual</li>\n<li>toBe</li>\n<li>toEqual</li>\n<li>toBeCloseTo</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'two plus two'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\">  expect(value).toBeGreaterThan(<span class=\"number\">3</span>)</span><br><span class=\"line\">  expect(value).toBeGreaterThanOrEqual(<span class=\"number\">3</span>)</span><br><span class=\"line\">  expect(value).toBeLessThan(<span class=\"number\">5</span>)</span><br><span class=\"line\">  expect(value).toBeLessThanOrEqual(<span class=\"number\">4</span>)</span><br><span class=\"line\">  expect(value).toBe(<span class=\"number\">4</span>)</span><br><span class=\"line\">  expect(value).toEqual(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 比较浮点数相等，使用 toBeCloseTo 而不是 toEqual</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'toBeCloseTo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span></span><br><span class=\"line\">  expect(value).toBeCloseTo(<span class=\"number\">0.3</span>); <span class=\"comment\">// 这句可以运行</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(value).toEqual(0.3); // 这句不可以运行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`toMatch`</span></span><br><span class=\"line\">test(<span class=\"string\">'string'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">  expect(val).not.toMatch(<span class=\"regexp\">/v/</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">test(<span class=\"string\">'hbb in hbbaly'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">  expect(val).toMatch(<span class=\"regexp\">/hbb/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组或可迭代对象\"><a href=\"#数组或可迭代对象\" class=\"headerlink\" title=\"数组或可迭代对象\"></a>数组或可迭代对象</h2><p><code>toContain</code>来检查一个数组或可迭代对象是否包含某个特定项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the arr list has 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(arr).toContain(<span class=\"number\">3</span>);</span><br><span class=\"line\">  expect(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)).toContain(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例外\"><a href=\"#例外\" class=\"headerlink\" title=\"例外\"></a>例外</h2><p>测试的特定函数抛出一个错误，在它调用时，使用 <code>toThrow</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileAndroidCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConfigError(<span class=\"string\">'you are using the wrong JDK'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'compiling android goes as expected'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(compileAndroidCode).toThrow();</span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow(ConfigError);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// You can also use the exact error message or a regexp</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow('you are using the wrong JDK');</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(compileAndroidCode).toThrow(/JDK/);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h2><p>在<code>JavaScript</code>中执行异步代码是很常见的。 当你有以异步方式运行的代码时，<code>Jest</code> 需要知道当前它测试的代码是否已完成，然后它可以转移到另一个测试。</p>\n<p>使用单个参数调用 <code>done</code>，而不是将测试放在一个空参数的函数。 <code>Jest</code>会等<code>done</code>回调函数执行结束后，结束测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  callback(<span class=\"string\">'peanut butter'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>如果您的代码使用 <code>Promises</code>，还有一个更简单的方法来处理异步测试。 只需要从您的测试返回一个 <code>Promise</code>, <code>Jest</code> 会等待这一 <code>Promise</code> 来解决。 如果承诺被拒绝，则测试将自动失败。</p>\n<p>你想要 <code>Promise</code> 被拒绝，使用 <code>.catch</code> 方法。 请确保添加 <code>expect.assertions</code> 来验证一定数量的断言被调用。 否则一个<code>fulfilled</code>态的 <code>Promise</code> 不会让测试失败</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(err).toMatch(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchData</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fetchPromiseData = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bool = <span class=\"built_in\">Math</span>.random(<span class=\"number\">1</span>)&gt; <span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bool)&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'peanut butter'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchPromiseData</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h2><p>使用 <code>async</code> 和 <code>await</code>。 若要编写 <code>async</code> 测试，只要在函数前面使用 <code>async</code> 关键字传递到 <code>test</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios  <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  expect(data).not.toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fetchData =  <span class=\"keyword\">async</span>() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> axios.get(<span class=\"string\">'https://api.github.com/repos/facebook/jest'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多次测试重复设置\"><a href=\"#多次测试重复设置\" class=\"headerlink\" title=\"多次测试重复设置\"></a>多次测试重复设置</h2><p>有一些要为多次测试重复设置的工作，你可以使用 <code>beforeEach</code> 和 <code>afterEach</code>。 </p>\n<p>考虑一些与城市信息数据库进行交互的测试。 你必须在每个测试之前调用方法 <code>initializeCityDatabase()</code> ，同时必须在每个测试后，调用方法 <code>clearCityDatabase()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'Vienna'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has San Juan'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'San Juan'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'clear-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCity</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val ===<span class=\"string\">'San Juan'</span> || <span class=\"string\">'Vienna'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一次性设置\"><a href=\"#一次性设置\" class=\"headerlink\" title=\"一次性设置\"></a>一次性设置</h2><p>在某些情况下，你只需要在文件的开头做一次设置。 当这种设置是异步行为时，可能非常恼人，你不太可能一行就解决它。 <code>Jest</code> 提供 <code>beforeAll</code> 和 <code>afterAll</code> 处理这种情况。</p>\n<p>例如，如果 <code>initializeCityDatabase</code> 和 <code>clearCityDatabase</code> 都返回了 <code>promise</code> ，城市数据库可以在测试中重用，我们就能把我们的测试代码改成这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'Vienna'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'city database has San Juan'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(isCity(<span class=\"string\">'San Juan'</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearCityDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'clear-hbbaly'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCity</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val ===<span class=\"string\">'San Juan'</span> || <span class=\"string\">'Vienna'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>默认情况下，<code>before</code> 和 <code>after</code> 的块可以应用到文件中的每个测试。 此外可以通过 <code>describe</code> 块来将测试分组。 当 <code>before</code> 和 <code>after</code> 的块在 <code>describe</code> 块内部时，则其只适用于该 <code>describe</code> 块内的测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'matching cities to foods'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Applies only to tests in this describe block</span></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeFoodDatabase();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'Vienna &lt;3 sausage'</span>, () =&gt; &#123;</span><br><span class=\"line\">    expect(isValidCityFoodPair(<span class=\"string\">'Vienna'</span>, <span class=\"string\">'Wiener Schnitzel'</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'San Juan &lt;3 plantains'</span>, () =&gt; &#123;</span><br><span class=\"line\">    expect(isValidCityFoodPair(<span class=\"string\">'San Juan'</span>, <span class=\"string\">'Mofongo'</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeFoodDatabase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'set-hbbaly'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidCityFoodPair</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'San Juan'</span>, <span class=\"string\">'Mofongo'</span>, <span class=\"string\">'Vienna'</span>, <span class=\"string\">'Wiener Schnitzel'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(val) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test(<span class=\"string\">'city database has Vienna'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不能使用 isValidCityFoodPair</span></span><br><span class=\"line\">  <span class=\"comment\">// expect(isValidCityFoodPair('Vienna')).toBeTruthy();</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"desribe和test块的执行顺序\"><a href=\"#desribe和test块的执行顺序\" class=\"headerlink\" title=\"desribe和test块的执行顺序\"></a>desribe和test块的执行顺序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeAll'</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterAll'</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeEach'</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterEach'</span>));</span><br><span class=\"line\">test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - test'</span>));</span><br><span class=\"line\">describe(<span class=\"string\">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class=\"line\">  beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeAll'</span>));</span><br><span class=\"line\">  afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterAll'</span>));</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeEach'</span>));</span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterEach'</span>));</span><br><span class=\"line\">  test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - test'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● Console</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - test</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">7</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - beforeAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">9</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - beforeEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">11</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - test</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterEach</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">8</span></span><br><span class=\"line\">      <span class=\"number\">2</span> - afterAll</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log test/order.test.js:<span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"number\">1</span> - afterAll</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'outer'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-a'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'describe inner 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe inner 1'</span>);</span><br><span class=\"line\">    test(<span class=\"string\">'test 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe inner 1'</span>);</span><br><span class=\"line\">      expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  test(<span class=\"string\">'test 1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe outer'</span>);</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'describe inner 2'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe inner 2'</span>);</span><br><span class=\"line\">    test(<span class=\"string\">'test for describe inner 2'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'test for describe inner 2'</span>);</span><br><span class=\"line\">      expect(<span class=\"literal\">false</span>).toEqual(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'describe outer-c'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// describe outer-a</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-b</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 2</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-c</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe outer</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 2</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Jest</code> 会在所有真正的测试开始之前执行测试文件里所有的 <code>describe</code> 处理程序（<code>handlers</code>）。 这是在 <code>before*</code>和 <code>after*</code> 处理程序里面 （而不是在 <code>describe</code> 块中）进行准备工作和整理工作的另一个原因。 当 <code>describe</code> 块运行完后,，默认情况下，<code>Jest</code> 会按照 <code>test</code> 出现的顺序（译者注：原文是in the order they were encountered in the collection phase）依次运行所有测试,，等待每一个测试完成并整理好，然后才继续往下走。</p>\n<h2 id=\"通用建议\"><a href=\"#通用建议\" class=\"headerlink\" title=\"通用建议\"></a>通用建议</h2><p>如果测试失败，第一件要检查的事就是，当仅运行这条测试时，它是否仍然失败。 在 <code>Jest</code> 中很容易地只运行一个测试 — — 只需暂时将 <code>test</code> 命令更改为 <code>test.only</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">'this will be the only test that runs'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'this test will not run'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(<span class=\"string\">'A'</span>).toBe(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果你有一个测试，当它作为一个更大的用例中的一部分时，经常运行失败，但是当你单独运行它时，并不会失败，所以最好考虑其他测试对这个测试的影响。 通常可以通过修改 <code>beforeEach</code> 来清除一些共享的状态来修复这种问题。 如果不确定某些共享状态是否被修改，还可以尝试在 <code>beforeEach</code> 中 <code>log</code> 数据来 <code>debug</code>。</p>\n<h3 id=\"Mock-实现\"><a href=\"#Mock-实现\" class=\"headerlink\" title=\"Mock 实现\"></a>Mock 实现</h3><p><code>mockImplementation</code>方法非常有用,当需要定义从另一个模块创建的模拟函数的默认实现时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jest.mock(<span class=\"string\">'../src/sum.js'</span>); <span class=\"comment\">// this happens automatically with automocking</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/sum.js'</span>);</span><br><span class=\"line\">foo.mockImplementation(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo()); <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<p>需要重新创建复杂模拟函数,调用产生不同的结果时,使用<code>MockImplementationOnce</code>方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myMockFn = jest</span><br><span class=\"line\">  .fn()</span><br><span class=\"line\">  .mockImplementationOnce(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>))</span><br><span class=\"line\">  .mockImplementationOnce(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">myMockFn(<span class=\"function\">(<span class=\"params\">err, val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"><span class=\"comment\">// &gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">myMockFn(<span class=\"function\">(<span class=\"params\">err, val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(val));</span><br><span class=\"line\"><span class=\"comment\">// &gt; false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mock-name\"><a href=\"#mock-name\" class=\"headerlink\" title=\"mock name\"></a>mock name</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myMockFn = jest</span><br><span class=\"line\">  .fn()</span><br><span class=\"line\">  .mockReturnValue(<span class=\"string\">'default'</span>)</span><br><span class=\"line\">  .mockImplementation(<span class=\"function\"><span class=\"params\">scalar</span> =&gt;</span> <span class=\"number\">42</span> + scalar)</span><br><span class=\"line\">  .mockName(<span class=\"string\">'add42'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义匹配器\"><a href=\"#自定义匹配器\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次</span></span><br><span class=\"line\">expect(mockFunc).toBeCalled();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次，而且传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc).toBeCalledWith(arg1, arg2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数的最后一次调用传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc).lastCalledWith(arg1, arg2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有的 mock 的调用和名称都被写入了快照</span></span><br><span class=\"line\">expect(mockFunc).toMatchSnapshot();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次</span></span><br><span class=\"line\">expect(mockFunc.mock.calls.length).toBeGreaterThan(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数至少被调用一次，而且传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc.mock.calls).toContain([arg1, arg2]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个 mock 函数的最后一次调用传入了特定参数</span></span><br><span class=\"line\">expect(mockFunc.mock.calls[mockFunc.mock.calls.length - <span class=\"number\">1</span>]).toEqual([</span><br><span class=\"line\">  arg1,</span><br><span class=\"line\">  arg2,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  这个 mock 函数的最后一次调用的第一个参数是`42`</span></span><br><span class=\"line\"><span class=\"comment\">// （注意这个断言的规范是没有语法糖的）</span></span><br><span class=\"line\">expect(mockFunc.mock.calls[mockFunc.mock.calls.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>]).toBe(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 快照会检查 mock 函数被调用了同样的次数，</span></span><br><span class=\"line\"><span class=\"comment\">// 同样的顺序，和同样的参数 它还会在名称上断言。</span></span><br><span class=\"line\">expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);</span><br><span class=\"line\">expect(mockFunc.getMockName()).toBe(<span class=\"string\">'a mock name'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jest-Platform\"><a href=\"#Jest-Platform\" class=\"headerlink\" title=\"Jest Platform\"></a>Jest Platform</h2><p>您可以选择Jest的特定特性，并将它们作为独立的依赖使用。以下是可用包的列表</p>\n<h3 id=\"jest-changed-files\"><a href=\"#jest-changed-files\" class=\"headerlink\" title=\"jest-changed-files\"></a>jest-changed-files</h3><p>用于标识Git/Hg存储库中已修改文件的工具,<br>两个函数：</p>\n<ul>\n<li><p><code>getchangefilesforroots</code>返回一个<code>promise</code>，具有已更改文件和repos的对象。</p>\n</li>\n<li><p><code>findrepos</code>返回一个<code>promise</code>，解析为指定路径中包含的一组存储库</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;getChangedFilesForRoots&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-changed-files'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印出当前目录最后修改过的一组文件</span></span><br><span class=\"line\">getChangedFilesForRoots([<span class=\"string\">'./'</span>], &#123;</span><br><span class=\"line\">  lastCommit: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result.changedFiles));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-diff\"><a href=\"#jest-diff\" class=\"headerlink\" title=\"jest-diff\"></a>jest-diff</h3><p>用于可视化数据更改的工具。导出一个函数，该函数比较任何类型的两个值，并返回一个“漂亮打印”的字符串，说明两个参数之间的差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> diff = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-diff'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">5</span>&#125;&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: &#123;<span class=\"attr\">c</span>: <span class=\"number\">6</span>&#125;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = diff(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// print diff</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-docblock\"><a href=\"#jest-docblock\" class=\"headerlink\" title=\"jest-docblock\"></a>jest-docblock</h3><p>用于提取和分析JavaScript文件顶部注释的工具。导出释块内的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;parseWithComments&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-docblock'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"><span class=\"string\"> * This is a sample</span></span><br><span class=\"line\"><span class=\"string\"> *</span></span><br><span class=\"line\"><span class=\"string\"> * @flow</span></span><br><span class=\"line\"><span class=\"string\"> */</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> console.log('Hello World!');</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> parsed = parseWithComments(code);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints an object with two attributes: comments and pragmas.</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsed);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-get-type\"><a href=\"#jest-get-type\" class=\"headerlink\" title=\"jest-get-type\"></a>jest-get-type</h3><p>用于标识任何<code>javascript</code>值的类型的模块。导出一个函数，该函数返回一个字符串，该字符串的值类型作为参数传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getType = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-get-type'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nullValue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> undefinedValue = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 'array'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(array));</span><br><span class=\"line\"><span class=\"comment\">// prints 'null'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(nullValue));</span><br><span class=\"line\"><span class=\"comment\">// prints 'undefined'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getType(undefinedValue));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-validate\"><a href=\"#jest-validate\" class=\"headerlink\" title=\"jest-validate\"></a>jest-validate</h3><p>用于验证用户提交的配置的工具</p>\n<p>导出采用两个参数的函数：用户配置和包含示例配置和其他选项的对象。返回值是一个具有两个属性的对象：</p>\n<ul>\n<li><p><code>HasDeprecationWarnings</code>，一个布尔值，指示提交的配置是否有<code>Deprecation</code>警告，</p>\n</li>\n<li><p><code>Isvalid</code>，一个布尔值，指示配置是否正确。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;validate&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'jest-validate'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> configByUser = &#123;</span><br><span class=\"line\">  transform: <span class=\"string\">'&lt;rootDir&gt;/node_modules/my-custom-transform'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = validate(configByUser, &#123;</span><br><span class=\"line\">  comment: <span class=\"string\">'  Documentation: http://custom-docs.com'</span>,</span><br><span class=\"line\">  exampleConfig: &#123;<span class=\"attr\">transform</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/babel-jest'</span>&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jest-worker\"><a href=\"#jest-worker\" class=\"headerlink\" title=\"jest-worker\"></a>jest-worker</h3><p>用于任务并行化的模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// heavy-task.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  myHeavyTask: <span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// long running CPU intensive task.</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'./heavy-task.js'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// run 2 tasks in parallel with different arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    worker.myHeavyTask(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;),</span><br><span class=\"line\">    worker.myHeavyTask(&#123;<span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span>&#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pretty-format\"><a href=\"#pretty-format\" class=\"headerlink\" title=\"pretty-format\"></a>pretty-format</h3><p>导出将任何<code>javascript</code>值转换为可读字符串的函数。支持所有现成的内置<code>JavaScript</code>类型，并允许通过用户定义的插件扩展特定于应用程序的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prettyFormat = <span class=\"built_in\">require</span>(<span class=\"string\">'pretty-format'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> val = &#123;<span class=\"attr\">object</span>: &#123;&#125;&#125;;</span><br><span class=\"line\">val.circularReference = val;</span><br><span class=\"line\">val[<span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)] = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">val.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'prop'</span>, <span class=\"string\">'value'</span>]]);</span><br><span class=\"line\">val.array = [<span class=\"number\">-0</span>, <span class=\"literal\">Infinity</span>, <span class=\"literal\">NaN</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(prettyFormat(val));</span><br></pre></td></tr></table></figure>"},{"title":"清除浮动方法","comments":1,"description":"清除浮动方法","date":"2016-03-05T08:02:00.000Z","keywords":"清除浮动方法, html, Html, css","_content":"\n对于使用了`float`来布局有可能会造成父级元素的高度坍塌，所以我们有必要了解一下清除浮动的方法！\n\n## `float`带来的后果\n\n代码样式如下:\n\n`css`样式：\n\n```css\n#box{\n     background:#000;\n }\n .red{\n     float:left;\n     width:100px;\n     height:100px;\n     background:red;\n }\n .pink{\n     float:left;\n     width:100px;\n     height:100px;\n     background:pink;\n }\n .blue{\n     float:left;\n     width:100px;\n     height:100px;\n     background:blue;\n }\n```\n\n`html`布局：\n\n```html\n\n<div id='box'>\n  <div class='red'></div>\n  <div class='pink'></div>\n  <div class='blue'></div>\n</div>\n```\n\n三个盒子的父级元素`#box`的高度坍塌，没有被内容高度撑开!这是使用`float`造成的后果。下面介绍几种常用的清除浮动的方法：\n\n## 第一种方法（主流方法）\n\n使用`::after`伪类清除:\n\n```css\n\n#box:after{\n    content:'';\n    display:block;\n    clear:both;\n}\n```\n运行代码看到`#box`的高度为`100px`；已经清除浮动造成的后果！\n\n## 第二种方法\n\n给`#box`添加高度（可能会影响页面的布局）:\n\n```css\n\n#box{\n    height:200px;\n    background:#000;\n}\n```\n\n`#box`的高度为`200px`；已经清除浮动造成的后果！但是给`#box`高度固定，对于后面的布局可能会受影响。\n\n## 第三种方法\n\n给`#box`添加`overflow:hidden`:\n\n```css\n#box{\n    overflow:hidden;\n    background:#000;\n}\n```\n\n运行代码可以看到已经清除浮动造成的后果,但是因为超出隐藏！谨慎使用。\n\n## 第四种方法\n\n给`#box`中添加一个空的`div`标签 ，使用`style=’clear:both;`:\n\n```html\n<div id=\"box\" >\n  <div class='red'></div>\n  <div class='pink'></div>\n  <div class='blue'></div>\n  <div class='black'></div>\n  <div style=\"clear:both;\"></div>\n</div>\n```\n\n已经清除浮动造成的后果。\n\n上面前四个也是比较常用的，第一个是目前主流方法，其他方法也有但是使用有很大的局限性，比如这里也可以给`#box`添加浮动，但是这种方法没有彻底解决高度坍塌，所以不推荐使用。","source":"_posts/html-2.md","raw":"---\ntitle: 清除浮动方法\ncomments: true\ndescription: 清除浮动方法\ntags: \"Html\"\ndate: 2016-03-05 016:02:00\ncategories: \"Html\"\nkeywords: 清除浮动方法, html, Html, css \n---\n\n对于使用了`float`来布局有可能会造成父级元素的高度坍塌，所以我们有必要了解一下清除浮动的方法！\n\n## `float`带来的后果\n\n代码样式如下:\n\n`css`样式：\n\n```css\n#box{\n     background:#000;\n }\n .red{\n     float:left;\n     width:100px;\n     height:100px;\n     background:red;\n }\n .pink{\n     float:left;\n     width:100px;\n     height:100px;\n     background:pink;\n }\n .blue{\n     float:left;\n     width:100px;\n     height:100px;\n     background:blue;\n }\n```\n\n`html`布局：\n\n```html\n\n<div id='box'>\n  <div class='red'></div>\n  <div class='pink'></div>\n  <div class='blue'></div>\n</div>\n```\n\n三个盒子的父级元素`#box`的高度坍塌，没有被内容高度撑开!这是使用`float`造成的后果。下面介绍几种常用的清除浮动的方法：\n\n## 第一种方法（主流方法）\n\n使用`::after`伪类清除:\n\n```css\n\n#box:after{\n    content:'';\n    display:block;\n    clear:both;\n}\n```\n运行代码看到`#box`的高度为`100px`；已经清除浮动造成的后果！\n\n## 第二种方法\n\n给`#box`添加高度（可能会影响页面的布局）:\n\n```css\n\n#box{\n    height:200px;\n    background:#000;\n}\n```\n\n`#box`的高度为`200px`；已经清除浮动造成的后果！但是给`#box`高度固定，对于后面的布局可能会受影响。\n\n## 第三种方法\n\n给`#box`添加`overflow:hidden`:\n\n```css\n#box{\n    overflow:hidden;\n    background:#000;\n}\n```\n\n运行代码可以看到已经清除浮动造成的后果,但是因为超出隐藏！谨慎使用。\n\n## 第四种方法\n\n给`#box`中添加一个空的`div`标签 ，使用`style=’clear:both;`:\n\n```html\n<div id=\"box\" >\n  <div class='red'></div>\n  <div class='pink'></div>\n  <div class='blue'></div>\n  <div class='black'></div>\n  <div style=\"clear:both;\"></div>\n</div>\n```\n\n已经清除浮动造成的后果。\n\n上面前四个也是比较常用的，第一个是目前主流方法，其他方法也有但是使用有很大的局限性，比如这里也可以给`#box`添加浮动，但是这种方法没有彻底解决高度坍塌，所以不推荐使用。","slug":"html-2","published":1,"updated":"2020-12-02T06:49:34.124Z","layout":"post","photos":[],"link":"","_id":"cki71wakw0021tl9ktc4k7daa","content":"<p>对于使用了<code>float</code>来布局有可能会造成父级元素的高度坍塌，所以我们有必要了解一下清除浮动的方法！</p>\n<h2 id=\"float带来的后果\"><a href=\"#float带来的后果\" class=\"headerlink\" title=\"float带来的后果\"></a><code>float</code>带来的后果</h2><p>代码样式如下:</p>\n<p><code>css</code>样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.red</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.pink</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:pink;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.blue</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>html</code>布局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'box'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'red'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'pink'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'blue'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个盒子的父级元素<code>#box</code>的高度坍塌，没有被内容高度撑开!这是使用<code>float</code>造成的后果。下面介绍几种常用的清除浮动的方法：</p>\n<h2 id=\"第一种方法（主流方法）\"><a href=\"#第一种方法（主流方法）\" class=\"headerlink\" title=\"第一种方法（主流方法）\"></a>第一种方法（主流方法）</h2><p>使用<code>::after</code>伪类清除:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行代码看到<code>#box</code>的高度为<code>100px</code>；已经清除浮动造成的后果！</p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>给<code>#box</code>添加高度（可能会影响页面的布局）:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>#box</code>的高度为<code>200px</code>；已经清除浮动造成的后果！但是给<code>#box</code>高度固定，对于后面的布局可能会受影响。</p>\n<h2 id=\"第三种方法\"><a href=\"#第三种方法\" class=\"headerlink\" title=\"第三种方法\"></a>第三种方法</h2><p>给<code>#box</code>添加<code>overflow:hidden</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行代码可以看到已经清除浮动造成的后果,但是因为超出隐藏！谨慎使用。</p>\n<h2 id=\"第四种方法\"><a href=\"#第四种方法\" class=\"headerlink\" title=\"第四种方法\"></a>第四种方法</h2><p>给<code>#box</code>中添加一个空的<code>div</code>标签 ，使用<code>style=’clear:both;</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'red'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'pink'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'blue'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'black'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>已经清除浮动造成的后果。</p>\n<p>上面前四个也是比较常用的，第一个是目前主流方法，其他方法也有但是使用有很大的局限性，比如这里也可以给<code>#box</code>添加浮动，但是这种方法没有彻底解决高度坍塌，所以不推荐使用。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>对于使用了<code>float</code>来布局有可能会造成父级元素的高度坍塌，所以我们有必要了解一下清除浮动的方法！</p>\n<h2 id=\"float带来的后果\"><a href=\"#float带来的后果\" class=\"headerlink\" title=\"float带来的后果\"></a><code>float</code>带来的后果</h2><p>代码样式如下:</p>\n<p><code>css</code>样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.red</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.pink</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:pink;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.blue</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>html</code>布局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'box'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'red'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'pink'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'blue'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个盒子的父级元素<code>#box</code>的高度坍塌，没有被内容高度撑开!这是使用<code>float</code>造成的后果。下面介绍几种常用的清除浮动的方法：</p>\n<h2 id=\"第一种方法（主流方法）\"><a href=\"#第一种方法（主流方法）\" class=\"headerlink\" title=\"第一种方法（主流方法）\"></a>第一种方法（主流方法）</h2><p>使用<code>::after</code>伪类清除:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行代码看到<code>#box</code>的高度为<code>100px</code>；已经清除浮动造成的后果！</p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>给<code>#box</code>添加高度（可能会影响页面的布局）:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>#box</code>的高度为<code>200px</code>；已经清除浮动造成的后果！但是给<code>#box</code>高度固定，对于后面的布局可能会受影响。</p>\n<h2 id=\"第三种方法\"><a href=\"#第三种方法\" class=\"headerlink\" title=\"第三种方法\"></a>第三种方法</h2><p>给<code>#box</code>添加<code>overflow:hidden</code>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行代码可以看到已经清除浮动造成的后果,但是因为超出隐藏！谨慎使用。</p>\n<h2 id=\"第四种方法\"><a href=\"#第四种方法\" class=\"headerlink\" title=\"第四种方法\"></a>第四种方法</h2><p>给<code>#box</code>中添加一个空的<code>div</code>标签 ，使用<code>style=’clear:both;</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'red'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'pink'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'blue'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'black'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>已经清除浮动造成的后果。</p>\n<p>上面前四个也是比较常用的，第一个是目前主流方法，其他方法也有但是使用有很大的局限性，比如这里也可以给<code>#box</code>添加浮动，但是这种方法没有彻底解决高度坍塌，所以不推荐使用。</p>\n"},{"title":"canvas实现橡皮筋式选取框","comments":1,"description":"canvas实现橡皮筋式选取框, canvas, js, 选取","date":"2016-06-03T04:14:10.000Z","keywords":"canvas, js, 橡皮筋式选取框","_content":"canvas实现橡皮筋式选取框\n\n点击查看示例： [示例](http://www.hbbaly.com/wp-content/themes/blog/case/rubber.html)\n\n# canvas实现橡皮筋式选取框思路：\n\n有三个事件`mousedown`,`mousemove`,`mouseup`，鼠标坐标转化为`canvas`坐标`（canvas.getBoundingClientRect()）`。\n\n## `mousedown`\n\n选取框的起始点位于鼠标按下的位置。\n\n```js\n\ncanvas.onmousedown = function (e) {\n        var x = e.clientX,\n            y = e.clientY;\n        e.preventDefault();\n        zoomStart(x,y);   //橡皮筋选取框开始\n};\n\n//选取框起始位置\nfunction zoomStart(x,y) {\n        mousedown.x = x;\n        mousedown.y =y;\n        zoomRectangle.left =  mousedown.x;\n        zoomRectangle.top =  mousedown.y;\n        moveZoom();\n        showZoom();\n        flag = true;\n    }\n```\n## `mousemove`\n\n鼠标移动的距离，判断是向左还是向右向上还是向下，根据移动的距离取出选取框的宽高。\n```js\nwindow.onmousemove = function (e) {\n       var x = e.clientX,\n           y = e.clientY;\n       e.preventDefault();\n       if(flag) zoomStretch(x,y);\n   };\nfunction zoomStretch(x,y) {\n       //选取框top，left，width，height值\n       zoomRectangle.left = x< mousedown.x? x:mousedown.x;\n       zoomRectangle.top =  y< mousedown.y?y:mousedown.y;\n       zoomRectangle.width = Math.abs(x-mousedown.x);\n       zoomRectangle.height = Math.abs(y-mousedown.y);\n       moveZoom();\n       resizeZoom();\n   }\nfunction moveZoom() {\n        zoom.style.left = zoomRectangle.left +\"px\";\n        zoom.style.top = zoomRectangle.top +\"px\";\n}\nfunction resizeZoom() {\n        zoom.style.width = zoomRectangle.width +\"px\";\n        zoom.style.height = zoomRectangle.height +\"px\";\n}\n```\n\n## `mouseup`\n\n求出最终的选取框的宽高，原来图像消失，变为选取的图像。\n```js\nwindow.onmouseup = function (e) {\n       e.preventDefault();\n       zoomEnd();\n   };\nfunction zoomEnd() {\n        var bbox = canvas.getBoundingClientRect();\n       //选定的区间，放大到整个canvas\n        try{\n            context.drawImage(canvas,zoomRectangle.left-bbox.left,zoomRectangle.top-bbox.top,zoomRectangle.width,zoomRectangle.height,0,0,canvas.width,canvas.height)\n        }\n        catch(e){\n        }\n      //原来选取框相关数据归零\n        resetZoomRectangle();\n        zoom.style.width = 0;\n        zoom.style.height = 0;\n        hideZoom();\n        flag = false; （false判断是否进行选取动作）\n    }\nfunction showZoom() {\n      zoom.style.display = \"block\" ;\n}\nunction hideZoom() {\n       zoom.style.display = \"none\";\n}\n```\n\n## `重置键`\n\n```js\n//清除画布，重新绘制图像\nrButton.onclick = function () {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        context.drawImage(img,0,0,canvas.width,canvas.height);\n };\n ```\n\n代码差不多给了80%左右，关键步骤都已经给了，一些开始的准备代码没有写，还是思路重要。如果想要看相似的代码，点击上图。其实和拖动有很大的相似，只不过这个是结合`canvas`来写。（不支持`IE8`及以下）。\n\n这样选取框就做好啦","source":"_posts/js-1.md","raw":"---\ntitle: canvas实现橡皮筋式选取框\ncomments: true\ndescription: canvas实现橡皮筋式选取框, canvas, js, 选取\ntags: \"canvas\"\ndate: 2016-06-3 12:14:10\ncategories: \"js\"\nkeywords: canvas, js, 橡皮筋式选取框\n---\ncanvas实现橡皮筋式选取框\n\n点击查看示例： [示例](http://www.hbbaly.com/wp-content/themes/blog/case/rubber.html)\n\n# canvas实现橡皮筋式选取框思路：\n\n有三个事件`mousedown`,`mousemove`,`mouseup`，鼠标坐标转化为`canvas`坐标`（canvas.getBoundingClientRect()）`。\n\n## `mousedown`\n\n选取框的起始点位于鼠标按下的位置。\n\n```js\n\ncanvas.onmousedown = function (e) {\n        var x = e.clientX,\n            y = e.clientY;\n        e.preventDefault();\n        zoomStart(x,y);   //橡皮筋选取框开始\n};\n\n//选取框起始位置\nfunction zoomStart(x,y) {\n        mousedown.x = x;\n        mousedown.y =y;\n        zoomRectangle.left =  mousedown.x;\n        zoomRectangle.top =  mousedown.y;\n        moveZoom();\n        showZoom();\n        flag = true;\n    }\n```\n## `mousemove`\n\n鼠标移动的距离，判断是向左还是向右向上还是向下，根据移动的距离取出选取框的宽高。\n```js\nwindow.onmousemove = function (e) {\n       var x = e.clientX,\n           y = e.clientY;\n       e.preventDefault();\n       if(flag) zoomStretch(x,y);\n   };\nfunction zoomStretch(x,y) {\n       //选取框top，left，width，height值\n       zoomRectangle.left = x< mousedown.x? x:mousedown.x;\n       zoomRectangle.top =  y< mousedown.y?y:mousedown.y;\n       zoomRectangle.width = Math.abs(x-mousedown.x);\n       zoomRectangle.height = Math.abs(y-mousedown.y);\n       moveZoom();\n       resizeZoom();\n   }\nfunction moveZoom() {\n        zoom.style.left = zoomRectangle.left +\"px\";\n        zoom.style.top = zoomRectangle.top +\"px\";\n}\nfunction resizeZoom() {\n        zoom.style.width = zoomRectangle.width +\"px\";\n        zoom.style.height = zoomRectangle.height +\"px\";\n}\n```\n\n## `mouseup`\n\n求出最终的选取框的宽高，原来图像消失，变为选取的图像。\n```js\nwindow.onmouseup = function (e) {\n       e.preventDefault();\n       zoomEnd();\n   };\nfunction zoomEnd() {\n        var bbox = canvas.getBoundingClientRect();\n       //选定的区间，放大到整个canvas\n        try{\n            context.drawImage(canvas,zoomRectangle.left-bbox.left,zoomRectangle.top-bbox.top,zoomRectangle.width,zoomRectangle.height,0,0,canvas.width,canvas.height)\n        }\n        catch(e){\n        }\n      //原来选取框相关数据归零\n        resetZoomRectangle();\n        zoom.style.width = 0;\n        zoom.style.height = 0;\n        hideZoom();\n        flag = false; （false判断是否进行选取动作）\n    }\nfunction showZoom() {\n      zoom.style.display = \"block\" ;\n}\nunction hideZoom() {\n       zoom.style.display = \"none\";\n}\n```\n\n## `重置键`\n\n```js\n//清除画布，重新绘制图像\nrButton.onclick = function () {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        context.drawImage(img,0,0,canvas.width,canvas.height);\n };\n ```\n\n代码差不多给了80%左右，关键步骤都已经给了，一些开始的准备代码没有写，还是思路重要。如果想要看相似的代码，点击上图。其实和拖动有很大的相似，只不过这个是结合`canvas`来写。（不支持`IE8`及以下）。\n\n这样选取框就做好啦","slug":"js-1","published":1,"updated":"2020-12-02T06:49:34.126Z","layout":"post","photos":[],"link":"","_id":"cki71wakx0024tl9kv8mhbk55","content":"<p>canvas实现橡皮筋式选取框</p>\n<p>点击查看示例： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/rubber.html\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h1 id=\"canvas实现橡皮筋式选取框思路：\"><a href=\"#canvas实现橡皮筋式选取框思路：\" class=\"headerlink\" title=\"canvas实现橡皮筋式选取框思路：\"></a>canvas实现橡皮筋式选取框思路：</h1><p>有三个事件<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>，鼠标坐标转化为<code>canvas</code>坐标<code>（canvas.getBoundingClientRect()）</code>。</p>\n<h2 id=\"mousedown\"><a href=\"#mousedown\" class=\"headerlink\" title=\"mousedown\"></a><code>mousedown</code></h2><p>选取框的起始点位于鼠标按下的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">canvas.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = e.clientX,</span><br><span class=\"line\">            y = e.clientY;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        zoomStart(x,y);   <span class=\"comment\">//橡皮筋选取框开始</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选取框起始位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomStart</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">        mousedown.x = x;</span><br><span class=\"line\">        mousedown.y =y;</span><br><span class=\"line\">        zoomRectangle.left =  mousedown.x;</span><br><span class=\"line\">        zoomRectangle.top =  mousedown.y;</span><br><span class=\"line\">        moveZoom();</span><br><span class=\"line\">        showZoom();</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mousemove\"><a href=\"#mousemove\" class=\"headerlink\" title=\"mousemove\"></a><code>mousemove</code></h2><p>鼠标移动的距离，判断是向左还是向右向上还是向下，根据移动的距离取出选取框的宽高。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> x = e.clientX,</span><br><span class=\"line\">           y = e.clientY;</span><br><span class=\"line\">       e.preventDefault();</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(flag) zoomStretch(x,y);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomStretch</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//选取框top，left，width，height值</span></span><br><span class=\"line\">       zoomRectangle.left = x&lt; mousedown.x? x:mousedown.x;</span><br><span class=\"line\">       zoomRectangle.top =  y&lt; mousedown.y?y:mousedown.y;</span><br><span class=\"line\">       zoomRectangle.width = <span class=\"built_in\">Math</span>.abs(x-mousedown.x);</span><br><span class=\"line\">       zoomRectangle.height = <span class=\"built_in\">Math</span>.abs(y-mousedown.y);</span><br><span class=\"line\">       moveZoom();</span><br><span class=\"line\">       resizeZoom();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        zoom.style.left = zoomRectangle.left +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        zoom.style.top = zoomRectangle.top +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resizeZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        zoom.style.width = zoomRectangle.width +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        zoom.style.height = zoomRectangle.height +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mouseup\"><a href=\"#mouseup\" class=\"headerlink\" title=\"mouseup\"></a><code>mouseup</code></h2><p>求出最终的选取框的宽高，原来图像消失，变为选取的图像。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">       e.preventDefault();</span><br><span class=\"line\">       zoomEnd();</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bbox = canvas.getBoundingClientRect();</span><br><span class=\"line\">       <span class=\"comment\">//选定的区间，放大到整个canvas</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            context.drawImage(canvas,zoomRectangle.left-bbox.left,zoomRectangle.top-bbox.top,zoomRectangle.width,zoomRectangle.height,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">//原来选取框相关数据归零</span></span><br><span class=\"line\">        resetZoomRectangle();</span><br><span class=\"line\">        zoom.style.width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        zoom.style.height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        hideZoom();</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>; （<span class=\"literal\">false</span>判断是否进行选取动作）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      zoom.style.display = <span class=\"string\">\"block\"</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unction hideZoom() &#123;</span><br><span class=\"line\">       zoom.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重置键\"><a href=\"#重置键\" class=\"headerlink\" title=\"重置键\"></a><code>重置键</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除画布，重新绘制图像</span></span><br><span class=\"line\">rButton.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        context.drawImage(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码差不多给了80%左右，关键步骤都已经给了，一些开始的准备代码没有写，还是思路重要。如果想要看相似的代码，点击上图。其实和拖动有很大的相似，只不过这个是结合<code>canvas</code>来写。（不支持<code>IE8</code>及以下）。</p>\n<p>这样选取框就做好啦</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>canvas实现橡皮筋式选取框</p>\n<p>点击查看示例： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/rubber.html\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h1 id=\"canvas实现橡皮筋式选取框思路：\"><a href=\"#canvas实现橡皮筋式选取框思路：\" class=\"headerlink\" title=\"canvas实现橡皮筋式选取框思路：\"></a>canvas实现橡皮筋式选取框思路：</h1><p>有三个事件<code>mousedown</code>,<code>mousemove</code>,<code>mouseup</code>，鼠标坐标转化为<code>canvas</code>坐标<code>（canvas.getBoundingClientRect()）</code>。</p>\n<h2 id=\"mousedown\"><a href=\"#mousedown\" class=\"headerlink\" title=\"mousedown\"></a><code>mousedown</code></h2><p>选取框的起始点位于鼠标按下的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">canvas.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = e.clientX,</span><br><span class=\"line\">            y = e.clientY;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        zoomStart(x,y);   <span class=\"comment\">//橡皮筋选取框开始</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选取框起始位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomStart</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">        mousedown.x = x;</span><br><span class=\"line\">        mousedown.y =y;</span><br><span class=\"line\">        zoomRectangle.left =  mousedown.x;</span><br><span class=\"line\">        zoomRectangle.top =  mousedown.y;</span><br><span class=\"line\">        moveZoom();</span><br><span class=\"line\">        showZoom();</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mousemove\"><a href=\"#mousemove\" class=\"headerlink\" title=\"mousemove\"></a><code>mousemove</code></h2><p>鼠标移动的距离，判断是向左还是向右向上还是向下，根据移动的距离取出选取框的宽高。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> x = e.clientX,</span><br><span class=\"line\">           y = e.clientY;</span><br><span class=\"line\">       e.preventDefault();</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(flag) zoomStretch(x,y);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomStretch</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//选取框top，left，width，height值</span></span><br><span class=\"line\">       zoomRectangle.left = x&lt; mousedown.x? x:mousedown.x;</span><br><span class=\"line\">       zoomRectangle.top =  y&lt; mousedown.y?y:mousedown.y;</span><br><span class=\"line\">       zoomRectangle.width = <span class=\"built_in\">Math</span>.abs(x-mousedown.x);</span><br><span class=\"line\">       zoomRectangle.height = <span class=\"built_in\">Math</span>.abs(y-mousedown.y);</span><br><span class=\"line\">       moveZoom();</span><br><span class=\"line\">       resizeZoom();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        zoom.style.left = zoomRectangle.left +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        zoom.style.top = zoomRectangle.top +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resizeZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        zoom.style.width = zoomRectangle.width +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        zoom.style.height = zoomRectangle.height +<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mouseup\"><a href=\"#mouseup\" class=\"headerlink\" title=\"mouseup\"></a><code>mouseup</code></h2><p>求出最终的选取框的宽高，原来图像消失，变为选取的图像。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">       e.preventDefault();</span><br><span class=\"line\">       zoomEnd();</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zoomEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bbox = canvas.getBoundingClientRect();</span><br><span class=\"line\">       <span class=\"comment\">//选定的区间，放大到整个canvas</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            context.drawImage(canvas,zoomRectangle.left-bbox.left,zoomRectangle.top-bbox.top,zoomRectangle.width,zoomRectangle.height,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">//原来选取框相关数据归零</span></span><br><span class=\"line\">        resetZoomRectangle();</span><br><span class=\"line\">        zoom.style.width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        zoom.style.height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        hideZoom();</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>; （<span class=\"literal\">false</span>判断是否进行选取动作）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showZoom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      zoom.style.display = <span class=\"string\">\"block\"</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unction hideZoom() &#123;</span><br><span class=\"line\">       zoom.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重置键\"><a href=\"#重置键\" class=\"headerlink\" title=\"重置键\"></a><code>重置键</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清除画布，重新绘制图像</span></span><br><span class=\"line\">rButton.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        context.drawImage(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码差不多给了80%左右，关键步骤都已经给了，一些开始的准备代码没有写，还是思路重要。如果想要看相似的代码，点击上图。其实和拖动有很大的相似，只不过这个是结合<code>canvas</code>来写。（不支持<code>IE8</code>及以下）。</p>\n<p>这样选取框就做好啦</p>\n"},{"title":"闭包","comments":1,"description":"关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是JavaScript中的难点，很多地方也是会碰到闭包问题","date":"2016-10-12T07:39:10.000Z","keywords":"闭包","_content":"\n关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是`JavaScript`中的难点，很多地方也是会碰到闭包问题。\n\n我们知道如果变量不加上`var`关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。\n\n变量的作用域：全局变量和局部变量，作用域可以引用上一个作用域的参数或者变量，反之不可。\n\n比如：\n\n```js\nvar a = \"global\";  //全局变量\nfunction fn() {\n  var a = \"local\"; //局部变量\n  function fn1(){alert(a);}\n  return fn1();\n}\nfn();    //弹出local\n```\n\n在fn函数内声明了一个局部变量，定义了一个函数`fn1`并把`fn1（）`作为函数`fn`执行结果返回，a就是局部变量。\n\n```js\nvar a = \"global\";  //全局变量\nfunction fn() {\n    var a = \"local\"; //局部变量\n    function fn1(){alert(a);}\n    return fn1;\n}\nfn()();\n```\n\n看看上例弹出的是？\n\n我们来分析一遍：`fn()`执行后返回的`fn1`这个函数，再加上（）的时候，把`fn1`执行（也就是调用嵌套的fn1函数）, `fn1`内没有变量`a`，它会沿着作用域链向上一层查找变量`a`，调用上一层的局部变量`a`，所以弹出的还是`local`！\n\n闭包：内部函数使用了外部函数的参数与变量，而且这个参数或者变量将永久存在。\n\n```js\nfunction a(){\n  var n = 0;\n  function b() {\n    n++;\n    console.log(n);\n  }\n  b();  //1\n  b();  //2\n}\na();\n```\n\n这里内部函数b引用了外部函数a的变量n，最后执行函数a，相当于执行了两次函数b，n从0变为2。这是闭包的一个例子。\n\n当一个函数嵌套另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往出现闭包。\n\n```js\nfunction a(){\n  var n = 0;\n  function b() {\n    n++;\n    console.log(n);\n  }\n  return b;\n}\nvar c = a();\nc();    //1\nc();    //2\n```\n\n这里的答案和上例是一样的，这里用了`return b`，因为外部无法调用函数b，所以使用`return b` 与外部联系形成闭包。\n\nhtml代码：\n\n```html\n<div id=\"box\">\n  <ul>\n    <li>1111111</li>\n    <li>222222</li>\n    <li>3333333</li>\n    <li>444444</li>\n  </ul>\n</div>\n```\n\njs代码：\n\n```js\n  var aLi = document.querySelectorAll('#box ul li');\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n      alert(i);\n    }\n  }\n```\n\n点击每一个`li`都弹出4，因为`for`循环是一瞬间执行完毕，没有保存过程中的i，这种情况我们也可以使用闭包来做。\n\n```js\nvar aLi = document.getElementsByClassName('#box ul li');\nfor (var i = 0,length = aLi.length; i < length; i++) {\n  (function () {\n    var x = i;\n    aLi[x].onclick = function () {\n      alert(x);\n    }\n  })();\n}\n```\n\n这样点击相应的li就会弹出对应的序号。上例可以看出有两个函数，内部函数使用了外部函数的变量x，并且这个x永久的保存下来了，没有被回收。我们可以对js代码进行完善。\n\n```js\nvar aLi = document.getElementsByClassName('#box ul li');\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    (function (x) {\n      aLi[x].onclick = function () {\n        alert(x);\n      }\n  })(i);\n}\n```\n闭包的写法，看起来更加简洁。\n\n下面来看几道例题：\n\n1.\n\n```js\nfor (var i = 0; i < 4; i++) {\n  setTimeout(function () {\n    alert(i);\n  });\n}\n```\n\n弹出4个4，因为`for`循环是一瞬间执行，如果想要得到0,1,2,3可以使用闭包来做。\n\n2.\n\n```js\nvar name = \"window\";\n  var obj = {\n    name : \"local\",\n    fn : function(){\n      return function(){\n        return this.name;\n      };\n    }\n  };\nalert(obj.fn()());\n```\n\n弹出`window`，因为这个`this`是指向`window`的，所以`this.name = “window”`(因为匿名函数执行环境是全局)。\n\n3.\n\n```js\n  var name = \"Window\";\n  var obj = {\n    name : \"local\",\n      fn : function(){\n        var that = this;\n        return function(){\n          return that.name;\n        };\n      }\n  };\nalert(obj.fn()());\n```\n\n弹出`local`,使用了闭包，`that`指向的是`obj`。\n\n4.\n\n```js\n  var name = \"window\";\n  var obj = {\n    name : \"local\",\n      fn : function(){\n        return this.name;\n      }\n   };\n  alert(obj.fn());\n  alert((obj.fn)());\n  alert((obj.fn = obj.fn)());\n```\n\n把例3里面的代码稍微改一些，得到不同的结果。\n\n`(obj.fn())===>fn`里面的`this`指向的就是`fn`，所以`this.name=“local”`，弹出`local`。\n\n`((obj.fn)`与`obj.fn`相同，所以还是`local`。\n\n`(obj.fn = obj.fn)()`，把`obj.fn`赋值给`obj.fn`，不是引用，所以`this`指向不是`fn`而是`window`。弹出`window`。\n\n2,3,4例题提醒我们：在闭包使用`this`应注意的`this`的指向。\n\n5.\n\n```js\nfunction fn(){\n  var a = [];\n  for (var i=0; i < 10; i++){\n    a[i] = function(){\n      return i;\n    };\n  }\n  return a;\n}\nvar f = fn();\nfor (var i=0; i < f.length; i++){\n  console.log(f[i]());\n}\n```\n\n我们来分析一下：\n\n```js\nfunction fn(){\n  var a = [];  //新建数组\n  for (var i=0; i < 10; i++){\n    a[i] = function(){\n      return i;  //往数组里面添加i\n    };\n  }\n  return a;  //执行fn结果是返回数组a\n}\nvar f = fn();  //f = a\nfor (var i=0; i < f.length; i++){\n  console.log(f[i]);  //打印数组f,里面为function(){ return i;}\n  console.log(f[i]());\n}\n```\n\nf内存放着10个函数`function(){return i}`;  `fn[i]()`结果是返回10个10。\n","source":"_posts/js-11.md","raw":"---\ntitle: 闭包\ncomments: true\ndescription: 关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是JavaScript中的难点，很多地方也是会碰到闭包问题\ntags: \"js\"\ndate: 2016-10-12 15:39:10\ncategories: \"js\"\nkeywords: 闭包\n---\n\n关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是`JavaScript`中的难点，很多地方也是会碰到闭包问题。\n\n我们知道如果变量不加上`var`关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。\n\n变量的作用域：全局变量和局部变量，作用域可以引用上一个作用域的参数或者变量，反之不可。\n\n比如：\n\n```js\nvar a = \"global\";  //全局变量\nfunction fn() {\n  var a = \"local\"; //局部变量\n  function fn1(){alert(a);}\n  return fn1();\n}\nfn();    //弹出local\n```\n\n在fn函数内声明了一个局部变量，定义了一个函数`fn1`并把`fn1（）`作为函数`fn`执行结果返回，a就是局部变量。\n\n```js\nvar a = \"global\";  //全局变量\nfunction fn() {\n    var a = \"local\"; //局部变量\n    function fn1(){alert(a);}\n    return fn1;\n}\nfn()();\n```\n\n看看上例弹出的是？\n\n我们来分析一遍：`fn()`执行后返回的`fn1`这个函数，再加上（）的时候，把`fn1`执行（也就是调用嵌套的fn1函数）, `fn1`内没有变量`a`，它会沿着作用域链向上一层查找变量`a`，调用上一层的局部变量`a`，所以弹出的还是`local`！\n\n闭包：内部函数使用了外部函数的参数与变量，而且这个参数或者变量将永久存在。\n\n```js\nfunction a(){\n  var n = 0;\n  function b() {\n    n++;\n    console.log(n);\n  }\n  b();  //1\n  b();  //2\n}\na();\n```\n\n这里内部函数b引用了外部函数a的变量n，最后执行函数a，相当于执行了两次函数b，n从0变为2。这是闭包的一个例子。\n\n当一个函数嵌套另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往出现闭包。\n\n```js\nfunction a(){\n  var n = 0;\n  function b() {\n    n++;\n    console.log(n);\n  }\n  return b;\n}\nvar c = a();\nc();    //1\nc();    //2\n```\n\n这里的答案和上例是一样的，这里用了`return b`，因为外部无法调用函数b，所以使用`return b` 与外部联系形成闭包。\n\nhtml代码：\n\n```html\n<div id=\"box\">\n  <ul>\n    <li>1111111</li>\n    <li>222222</li>\n    <li>3333333</li>\n    <li>444444</li>\n  </ul>\n</div>\n```\n\njs代码：\n\n```js\n  var aLi = document.querySelectorAll('#box ul li');\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n      alert(i);\n    }\n  }\n```\n\n点击每一个`li`都弹出4，因为`for`循环是一瞬间执行完毕，没有保存过程中的i，这种情况我们也可以使用闭包来做。\n\n```js\nvar aLi = document.getElementsByClassName('#box ul li');\nfor (var i = 0,length = aLi.length; i < length; i++) {\n  (function () {\n    var x = i;\n    aLi[x].onclick = function () {\n      alert(x);\n    }\n  })();\n}\n```\n\n这样点击相应的li就会弹出对应的序号。上例可以看出有两个函数，内部函数使用了外部函数的变量x，并且这个x永久的保存下来了，没有被回收。我们可以对js代码进行完善。\n\n```js\nvar aLi = document.getElementsByClassName('#box ul li');\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    (function (x) {\n      aLi[x].onclick = function () {\n        alert(x);\n      }\n  })(i);\n}\n```\n闭包的写法，看起来更加简洁。\n\n下面来看几道例题：\n\n1.\n\n```js\nfor (var i = 0; i < 4; i++) {\n  setTimeout(function () {\n    alert(i);\n  });\n}\n```\n\n弹出4个4，因为`for`循环是一瞬间执行，如果想要得到0,1,2,3可以使用闭包来做。\n\n2.\n\n```js\nvar name = \"window\";\n  var obj = {\n    name : \"local\",\n    fn : function(){\n      return function(){\n        return this.name;\n      };\n    }\n  };\nalert(obj.fn()());\n```\n\n弹出`window`，因为这个`this`是指向`window`的，所以`this.name = “window”`(因为匿名函数执行环境是全局)。\n\n3.\n\n```js\n  var name = \"Window\";\n  var obj = {\n    name : \"local\",\n      fn : function(){\n        var that = this;\n        return function(){\n          return that.name;\n        };\n      }\n  };\nalert(obj.fn()());\n```\n\n弹出`local`,使用了闭包，`that`指向的是`obj`。\n\n4.\n\n```js\n  var name = \"window\";\n  var obj = {\n    name : \"local\",\n      fn : function(){\n        return this.name;\n      }\n   };\n  alert(obj.fn());\n  alert((obj.fn)());\n  alert((obj.fn = obj.fn)());\n```\n\n把例3里面的代码稍微改一些，得到不同的结果。\n\n`(obj.fn())===>fn`里面的`this`指向的就是`fn`，所以`this.name=“local”`，弹出`local`。\n\n`((obj.fn)`与`obj.fn`相同，所以还是`local`。\n\n`(obj.fn = obj.fn)()`，把`obj.fn`赋值给`obj.fn`，不是引用，所以`this`指向不是`fn`而是`window`。弹出`window`。\n\n2,3,4例题提醒我们：在闭包使用`this`应注意的`this`的指向。\n\n5.\n\n```js\nfunction fn(){\n  var a = [];\n  for (var i=0; i < 10; i++){\n    a[i] = function(){\n      return i;\n    };\n  }\n  return a;\n}\nvar f = fn();\nfor (var i=0; i < f.length; i++){\n  console.log(f[i]());\n}\n```\n\n我们来分析一下：\n\n```js\nfunction fn(){\n  var a = [];  //新建数组\n  for (var i=0; i < 10; i++){\n    a[i] = function(){\n      return i;  //往数组里面添加i\n    };\n  }\n  return a;  //执行fn结果是返回数组a\n}\nvar f = fn();  //f = a\nfor (var i=0; i < f.length; i++){\n  console.log(f[i]);  //打印数组f,里面为function(){ return i;}\n  console.log(f[i]());\n}\n```\n\nf内存放着10个函数`function(){return i}`;  `fn[i]()`结果是返回10个10。\n","slug":"js-11","published":1,"updated":"2020-12-02T06:49:34.127Z","layout":"post","photos":[],"link":"","_id":"cki71wakz0029tl9kgiu12ebp","content":"<p>关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是<code>JavaScript</code>中的难点，很多地方也是会碰到闭包问题。</p>\n<p>我们知道如果变量不加上<code>var</code>关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。</p>\n<p>变量的作用域：全局变量和局部变量，作用域可以引用上一个作用域的参数或者变量，反之不可。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"global\"</span>;  <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">\"local\"</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;alert(a);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();    <span class=\"comment\">//弹出local</span></span><br></pre></td></tr></table></figure>\n\n<p>在fn函数内声明了一个局部变量，定义了一个函数<code>fn1</code>并把<code>fn1（）</code>作为函数<code>fn</code>执行结果返回，a就是局部变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"global\"</span>;  <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">\"local\"</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;alert(a);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()();</span><br></pre></td></tr></table></figure>\n\n<p>看看上例弹出的是？</p>\n<p>我们来分析一遍：<code>fn()</code>执行后返回的<code>fn1</code>这个函数，再加上（）的时候，把<code>fn1</code>执行（也就是调用嵌套的fn1函数）, <code>fn1</code>内没有变量<code>a</code>，它会沿着作用域链向上一层查找变量<code>a</code>，调用上一层的局部变量<code>a</code>，所以弹出的还是<code>local</code>！</p>\n<p>闭包：内部函数使用了外部函数的参数与变量，而且这个参数或者变量将永久存在。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();  <span class=\"comment\">//1</span></span><br><span class=\"line\">  b();  <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>这里内部函数b引用了外部函数a的变量n，最后执行函数a，相当于执行了两次函数b，n从0变为2。这是闭包的一个例子。</p>\n<p>当一个函数嵌套另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往出现闭包。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a();</span><br><span class=\"line\">c();    <span class=\"comment\">//1</span></span><br><span class=\"line\">c();    <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的答案和上例是一样的，这里用了<code>return b</code>，因为外部无法调用函数b，所以使用<code>return b</code> 与外部联系形成闭包。</p>\n<p>html代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1111111<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>222222<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3333333<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>444444<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击每一个<code>li</code>都弹出4，因为<code>for</code>循环是一瞬间执行完毕，没有保存过程中的i，这种情况我们也可以使用闭包来做。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = i;</span><br><span class=\"line\">    aLi[x].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样点击相应的li就会弹出对应的序号。上例可以看出有两个函数，内部函数使用了外部函数的变量x，并且这个x永久的保存下来了，没有被回收。我们可以对js代码进行完善。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      aLi[x].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>闭包的写法，看起来更加简洁。</p>\n<p>下面来看几道例题：</p>\n<p>1.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>弹出4个4，因为<code>for</code>循环是一瞬间执行，如果想要得到0,1,2,3可以使用闭包来做。</p>\n<p>2.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">alert(obj.fn()());</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>window</code>，因为这个<code>this</code>是指向<code>window</code>的，所以<code>this.name = “window”</code>(因为匿名函数执行环境是全局)。</p>\n<p>3.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Window\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">      fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">alert(obj.fn()());</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>local</code>,使用了闭包，<code>that</code>指向的是<code>obj</code>。</p>\n<p>4.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">alert(obj.fn());</span><br><span class=\"line\">alert((obj.fn)());</span><br><span class=\"line\">alert((obj.fn = obj.fn)());</span><br></pre></td></tr></table></figure>\n\n<p>把例3里面的代码稍微改一些，得到不同的结果。</p>\n<p><code>(obj.fn())===&gt;fn</code>里面的<code>this</code>指向的就是<code>fn</code>，所以<code>this.name=“local”</code>，弹出<code>local</code>。</p>\n<p><code>((obj.fn)</code>与<code>obj.fn</code>相同，所以还是<code>local</code>。</p>\n<p><code>(obj.fn = obj.fn)()</code>，把<code>obj.fn</code>赋值给<code>obj.fn</code>，不是引用，所以<code>this</code>指向不是<code>fn</code>而是<code>window</code>。弹出<code>window</code>。</p>\n<p>2,3,4例题提醒我们：在闭包使用<code>this</code>应注意的<code>this</code>的指向。</p>\n<p>5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; f.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们来分析一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = [];  <span class=\"comment\">//新建数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;  <span class=\"comment\">//往数组里面添加i</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;  <span class=\"comment\">//执行fn结果是返回数组a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn();  <span class=\"comment\">//f = a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; f.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]);  <span class=\"comment\">//打印数组f,里面为function()&#123; return i;&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>f内存放着10个函数<code>function(){return i}</code>;  <code>fn[i]()</code>结果是返回10个10。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>关于闭包这个问题，我刚开始接触的时候，也是不懂，随着学习的深入和能力的提升，渐渐地开始理解。闭包是<code>JavaScript</code>中的难点，很多地方也是会碰到闭包问题。</p>\n<p>我们知道如果变量不加上<code>var</code>关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。</p>\n<p>变量的作用域：全局变量和局部变量，作用域可以引用上一个作用域的参数或者变量，反之不可。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"global\"</span>;  <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">\"local\"</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;alert(a);&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();    <span class=\"comment\">//弹出local</span></span><br></pre></td></tr></table></figure>\n\n<p>在fn函数内声明了一个局部变量，定义了一个函数<code>fn1</code>并把<code>fn1（）</code>作为函数<code>fn</code>执行结果返回，a就是局部变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"global\"</span>;  <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">\"local\"</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;alert(a);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()();</span><br></pre></td></tr></table></figure>\n\n<p>看看上例弹出的是？</p>\n<p>我们来分析一遍：<code>fn()</code>执行后返回的<code>fn1</code>这个函数，再加上（）的时候，把<code>fn1</code>执行（也就是调用嵌套的fn1函数）, <code>fn1</code>内没有变量<code>a</code>，它会沿着作用域链向上一层查找变量<code>a</code>，调用上一层的局部变量<code>a</code>，所以弹出的还是<code>local</code>！</p>\n<p>闭包：内部函数使用了外部函数的参数与变量，而且这个参数或者变量将永久存在。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b();  <span class=\"comment\">//1</span></span><br><span class=\"line\">  b();  <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>这里内部函数b引用了外部函数a的变量n，最后执行函数a，相当于执行了两次函数b，n从0变为2。这是闭包的一个例子。</p>\n<p>当一个函数嵌套另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往出现闭包。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a();</span><br><span class=\"line\">c();    <span class=\"comment\">//1</span></span><br><span class=\"line\">c();    <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的答案和上例是一样的，这里用了<code>return b</code>，因为外部无法调用函数b，所以使用<code>return b</code> 与外部联系形成闭包。</p>\n<p>html代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1111111<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>222222<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3333333<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>444444<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击每一个<code>li</code>都弹出4，因为<code>for</code>循环是一瞬间执行完毕，没有保存过程中的i，这种情况我们也可以使用闭包来做。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = i;</span><br><span class=\"line\">    aLi[x].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样点击相应的li就会弹出对应的序号。上例可以看出有两个函数，内部函数使用了外部函数的变量x，并且这个x永久的保存下来了，没有被回收。我们可以对js代码进行完善。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      aLi[x].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>闭包的写法，看起来更加简洁。</p>\n<p>下面来看几道例题：</p>\n<p>1.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>弹出4个4，因为<code>for</code>循环是一瞬间执行，如果想要得到0,1,2,3可以使用闭包来做。</p>\n<p>2.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">alert(obj.fn()());</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>window</code>，因为这个<code>this</code>是指向<code>window</code>的，所以<code>this.name = “window”</code>(因为匿名函数执行环境是全局)。</p>\n<p>3.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Window\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">      fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">alert(obj.fn()());</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>local</code>,使用了闭包，<code>that</code>指向的是<code>obj</code>。</p>\n<p>4.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name : <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    fn : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">alert(obj.fn());</span><br><span class=\"line\">alert((obj.fn)());</span><br><span class=\"line\">alert((obj.fn = obj.fn)());</span><br></pre></td></tr></table></figure>\n\n<p>把例3里面的代码稍微改一些，得到不同的结果。</p>\n<p><code>(obj.fn())===&gt;fn</code>里面的<code>this</code>指向的就是<code>fn</code>，所以<code>this.name=“local”</code>，弹出<code>local</code>。</p>\n<p><code>((obj.fn)</code>与<code>obj.fn</code>相同，所以还是<code>local</code>。</p>\n<p><code>(obj.fn = obj.fn)()</code>，把<code>obj.fn</code>赋值给<code>obj.fn</code>，不是引用，所以<code>this</code>指向不是<code>fn</code>而是<code>window</code>。弹出<code>window</code>。</p>\n<p>2,3,4例题提醒我们：在闭包使用<code>this</code>应注意的<code>this</code>的指向。</p>\n<p>5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; f.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们来分析一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = [];  <span class=\"comment\">//新建数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;  <span class=\"comment\">//往数组里面添加i</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;  <span class=\"comment\">//执行fn结果是返回数组a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn();  <span class=\"comment\">//f = a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; f.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]);  <span class=\"comment\">//打印数组f,里面为function()&#123; return i;&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>f内存放着10个函数<code>function(){return i}</code>;  <code>fn[i]()</code>结果是返回10个10。</p>\n"},{"title":"作用域相关知识","comments":1,"description":"执行环境是JavaScript中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内","date":"2016-10-10T10:35:50.000Z","keywords":"作用域相关知识","_content":"\n## 执行环境及作用域\n\n执行环境是`JavaScript`中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内。\n\n全局执行环境是最外围的执行环境。每个函数都有自己的执行环境。当代码在某一个环境中执行时，会创建变量对象的一个作用域链，这个作用域链的用途，保证对执行对象有权利访问所有的变量和函数的有序访问。作用域链中的下一个变量对象来自来自其包含环境，在下一个对象则来自下一个包含环境，直到全局执行环境。（这也就是子作用域可以访问父作用域的参数和变量，反之不行）\n\n## JavaScript的解析顺序\n\n（定义）先解析`var`、`function`参数；\n该步骤的`var`只定义当前某个变量，后面的= 赋值不解析\n该步骤的函数只定义函数，函数的执行不解析\n重名只留后面的一个，`var`和函数重名函数优先\n（执行）再从上至下执行其他代码，每个作用域要访问变量时，先从自身找，找不到再往上一级找。\n示例：\n\n```js\nalert( a );\nfunction a() {\n  alert(a);\n}\nvar a = 520;\nalert( a );\na();\n```\n\n解析顺序：\n\n先找`var ====> a`;\n```js\nfunction a(){\n  alert(1);\n};\n```\n\n从上往下执行：\n\n```js\nalert(a);   //undefined（只定义了，但是没有赋值）\na = 520;\nalert(a);   // 520;\na();   //520 （函数a执行，弹出变量a）；\n```\n\n以后在做解析顺序方面的问题可以按照这个顺序来解析！\n\n当然凡事都有例外：\n\n```js\nvar a = function () {  // 函数表达式\n         alert( 1 )；\n };\nfunction a() {  // 函数声明\n        alert( 2 )；\n}；\na();  //1;\n```\n\n这里得到的结果是弹出1；因为解析器在执行环境中对函数声明与函数表达式并不是一视同仁，解析器会先读取函数声明，并使其在执行任何代码之前可以访问，相当于把函数声明放到源代码的顶部，后面的函数表达式覆盖了函数声明。\n\n## 函数声明与函数表达式的区别\n\n```js\nfunction a(){\n  function b() {\n    return 1;\n  }；\n  return b();\n  function b() {\n    return 2;\n  }；\n}；\nalert(a());   //2\n```\n\n这里咱们来进行解析：\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a()====>function b(){}`；\n\n`return b()`;  函数内有两个同名的函数，后面的覆盖前面的,执行后面的函数声                                                 明，因为有`return`所以不执行后面的代码，弹出2。\n\n下面来看几个例子：\n\n```js\nfunction a(){\n  var b = function() {\n    return 3;\n  };\n  return b();\n  var b = function() {\n    return 8;\n  };\n}\nalert(a());    //3\n```\n\n答案是3；\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a()====>1`.找`var ===>var b = undefined`;           `var b = undefined` 第一个变量b引用函数`function() {  return 3;  }`;`return b() ===> return 3`;===>弹出3；\n\n```js\nfunction a(){\n  return b();\n  var b = function() {\n    return 3;\n  };\n  var b = function() {\n    return 8;\n  };\n}\nalert(a());    //报错：Uncaught TypeError: b is not a function\n```\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a();====>1`.找`var ===>var b = undefined`;`var b = undefined`;`return b() ===> b为undefined`，不是函数;===>报错；\n\n使用函数声明应该注意的事项：\n\n```js\n function a() {\n  if(0) {\n    function x() { alert(1); }；\n  }\n  return x;\n }\nalert(a());\n```\n\n在`chorme`，`firefox`，以及`IE`中`edge`都是弹出`undefined`；在我的电脑上只有最高`IE10`，随意在`IE10`及以下都是弹出： `function x() { alert(1); }` 。\n\n## JavaScript没有块级作用域\n\n任何一对花括号｛｝中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。在`C`,`C++`,`Java`中在{}内的语句执行完后会被销毁，但是在`JavaScript`中，则是不一样。\n\n```js\nif (1){\n  var a = 1;\n}\nalert(a);\n```\n\n在`JavaScript`中`if`语句中的变量a会被添加到当前的执行环境，并没有被销毁。\n\n在`for`语句也是一样：\n\n```js\nfor (var i = 0; i < 6; i++) {\n  var a = i;\n}\nalert(a);\n```\n\n注意的是：\n\n```js\nfunction a () {\n  var b = 1;\n}\nalert(window.b);\n```\n\n为了避免报错使用`alert（window.b）`；因为如果`function (){}`不是块级的话，b也相当于全局变量，但事实是`JavaScript`中`function (){}`是可以开辟作用域的，所以这个是因为外部环境不能使用内部的变量（不能由外到内）。\n怎么可以使`if`语句及`for`语句形成一个块级作用域呢？\n\n### 第一种方法\n\n我们可以在语句外包裹一个`function（）{}`,这样就可以解决这个问题。\n\n```js\nfunction a() {\n  for (var i = 0; i < 6; i++) {\n    var b = i;\n  }\n}\nalert(i);\n```\n\n这里`alert（window.i）`弹出`undefined`。\n\n### 第二种方法\n\n使用`ES6`中的`let`\n\n```js\nfor (let i = 0; i < 6; i++) {\n  var b = i;\n }\nalert(window.b);\n```\n\n弹出`undefined`；\n\n## ES6中的let与var的区别\n\n`let`命令与`var`还是有很大的区别的。\n\n### 没有预解析。\n\n```js\nalert(a);   //undefined,没有报错\nvar a = 1;\nalert(b);   //报错\nlet b = 2;\nalert(b);  //2\n```\n\n可以得出：`var`有预解析，而`let`没有预解析，只能在`let`定义后才能使用。\n\n### 作用域的不同\n用`let`定义的变量的作用域是一个块级`{}`。\n\n```js\n{\n  let a = 1;\n  alert(a);   //1；\n}\n{\n  let a = 1;\n}\nalert(a);  //报错\n```\n\n得知：`let`定义的变量只在`let`所在的代码块内有效。\n\n`let`很适合用在`for`循环内。\n\n```html\n<div id=\"box\">\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n  </ul>\n</div>\n```\n\n```js\nlet li = document.querySelectorAll('#box ul li');\nfor (var i = 0; i < li.length; i++) {\n       li[i].i = i;\n       li[i].onclick = function () {\n             alert(i); //点击任意一个li弹出的都是5。\n       }\n};\nlet li = document.querySelectorAll('#box ul li');\nfor (let i = 0; i < li.length; i++) {\n       li[i].i = i;\n       li[i].onclick = function () {\n            alert(i); //弹出i；。\n      }\n}\n```\n\n把`var`改成了`let`，在`for`内保存了每一个i，不会像`var`那样。\n\n### 暂时性死区\n\n```js\nvar a = 1;\nif (1){\n  let a = 5;\n  alert(5);\n}\n```\n\n在一个块级中使用`let`声明变量，这个变量不会受到块级之外的变量影响。\n\n## 不能再同一个块级作用域中，同时重复定义同一个变量。\n\n```js\nfunction () {\n  var b = 1;\n  let b = 2;\n}\nfunction () {\n  let b = 1;\n  let b = 2;\n}\n```\n\n上面两个这样会报错，前一个函数原因：b重复声明（`Identifier 'b' has already been declared`），后者原因：`Unexpected token (`。\n给函数加上函数名两个就都不会报错。\n\n```js\nfunction a() {\n  let b = 1;\n  let b = 2;\n}\n```\n\n本来只是想写关于作用域的文章，写着写着就发现，涉及的知识点越来越多。只好写到这里了。\n\n本文参考了`JavaScript`高级程序设计第三版\n\n阮一峰大神写的ES6入门: http://es6.ruanyifeng.com/\n","source":"_posts/js-10.md","raw":"---\ntitle: 作用域相关知识\ncomments: true\ndescription: 执行环境是JavaScript中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内\ntags: \"js\"\ndate: 2016-10-10 18:35:50\ncategories: \"js\"\nkeywords: 作用域相关知识\n---\n\n## 执行环境及作用域\n\n执行环境是`JavaScript`中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内。\n\n全局执行环境是最外围的执行环境。每个函数都有自己的执行环境。当代码在某一个环境中执行时，会创建变量对象的一个作用域链，这个作用域链的用途，保证对执行对象有权利访问所有的变量和函数的有序访问。作用域链中的下一个变量对象来自来自其包含环境，在下一个对象则来自下一个包含环境，直到全局执行环境。（这也就是子作用域可以访问父作用域的参数和变量，反之不行）\n\n## JavaScript的解析顺序\n\n（定义）先解析`var`、`function`参数；\n该步骤的`var`只定义当前某个变量，后面的= 赋值不解析\n该步骤的函数只定义函数，函数的执行不解析\n重名只留后面的一个，`var`和函数重名函数优先\n（执行）再从上至下执行其他代码，每个作用域要访问变量时，先从自身找，找不到再往上一级找。\n示例：\n\n```js\nalert( a );\nfunction a() {\n  alert(a);\n}\nvar a = 520;\nalert( a );\na();\n```\n\n解析顺序：\n\n先找`var ====> a`;\n```js\nfunction a(){\n  alert(1);\n};\n```\n\n从上往下执行：\n\n```js\nalert(a);   //undefined（只定义了，但是没有赋值）\na = 520;\nalert(a);   // 520;\na();   //520 （函数a执行，弹出变量a）；\n```\n\n以后在做解析顺序方面的问题可以按照这个顺序来解析！\n\n当然凡事都有例外：\n\n```js\nvar a = function () {  // 函数表达式\n         alert( 1 )；\n };\nfunction a() {  // 函数声明\n        alert( 2 )；\n}；\na();  //1;\n```\n\n这里得到的结果是弹出1；因为解析器在执行环境中对函数声明与函数表达式并不是一视同仁，解析器会先读取函数声明，并使其在执行任何代码之前可以访问，相当于把函数声明放到源代码的顶部，后面的函数表达式覆盖了函数声明。\n\n## 函数声明与函数表达式的区别\n\n```js\nfunction a(){\n  function b() {\n    return 1;\n  }；\n  return b();\n  function b() {\n    return 2;\n  }；\n}；\nalert(a());   //2\n```\n\n这里咱们来进行解析：\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a()====>function b(){}`；\n\n`return b()`;  函数内有两个同名的函数，后面的覆盖前面的,执行后面的函数声                                                 明，因为有`return`所以不执行后面的代码，弹出2。\n\n下面来看几个例子：\n\n```js\nfunction a(){\n  var b = function() {\n    return 3;\n  };\n  return b();\n  var b = function() {\n    return 8;\n  };\n}\nalert(a());    //3\n```\n\n答案是3；\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a()====>1`.找`var ===>var b = undefined`;           `var b = undefined` 第一个变量b引用函数`function() {  return 3;  }`;`return b() ===> return 3`;===>弹出3；\n\n```js\nfunction a(){\n  return b();\n  var b = function() {\n    return 3;\n  };\n  var b = function() {\n    return 8;\n  };\n}\nalert(a());    //报错：Uncaught TypeError: b is not a function\n```\n\n解析顺序：\n\n1. 先找`var ====>`没有\n\n   找：`function a(){}`；\n\n2. 从上往下执行：\n\n`alert(a);  ===> a();====>1`.找`var ===>var b = undefined`;`var b = undefined`;`return b() ===> b为undefined`，不是函数;===>报错；\n\n使用函数声明应该注意的事项：\n\n```js\n function a() {\n  if(0) {\n    function x() { alert(1); }；\n  }\n  return x;\n }\nalert(a());\n```\n\n在`chorme`，`firefox`，以及`IE`中`edge`都是弹出`undefined`；在我的电脑上只有最高`IE10`，随意在`IE10`及以下都是弹出： `function x() { alert(1); }` 。\n\n## JavaScript没有块级作用域\n\n任何一对花括号｛｝中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。在`C`,`C++`,`Java`中在{}内的语句执行完后会被销毁，但是在`JavaScript`中，则是不一样。\n\n```js\nif (1){\n  var a = 1;\n}\nalert(a);\n```\n\n在`JavaScript`中`if`语句中的变量a会被添加到当前的执行环境，并没有被销毁。\n\n在`for`语句也是一样：\n\n```js\nfor (var i = 0; i < 6; i++) {\n  var a = i;\n}\nalert(a);\n```\n\n注意的是：\n\n```js\nfunction a () {\n  var b = 1;\n}\nalert(window.b);\n```\n\n为了避免报错使用`alert（window.b）`；因为如果`function (){}`不是块级的话，b也相当于全局变量，但事实是`JavaScript`中`function (){}`是可以开辟作用域的，所以这个是因为外部环境不能使用内部的变量（不能由外到内）。\n怎么可以使`if`语句及`for`语句形成一个块级作用域呢？\n\n### 第一种方法\n\n我们可以在语句外包裹一个`function（）{}`,这样就可以解决这个问题。\n\n```js\nfunction a() {\n  for (var i = 0; i < 6; i++) {\n    var b = i;\n  }\n}\nalert(i);\n```\n\n这里`alert（window.i）`弹出`undefined`。\n\n### 第二种方法\n\n使用`ES6`中的`let`\n\n```js\nfor (let i = 0; i < 6; i++) {\n  var b = i;\n }\nalert(window.b);\n```\n\n弹出`undefined`；\n\n## ES6中的let与var的区别\n\n`let`命令与`var`还是有很大的区别的。\n\n### 没有预解析。\n\n```js\nalert(a);   //undefined,没有报错\nvar a = 1;\nalert(b);   //报错\nlet b = 2;\nalert(b);  //2\n```\n\n可以得出：`var`有预解析，而`let`没有预解析，只能在`let`定义后才能使用。\n\n### 作用域的不同\n用`let`定义的变量的作用域是一个块级`{}`。\n\n```js\n{\n  let a = 1;\n  alert(a);   //1；\n}\n{\n  let a = 1;\n}\nalert(a);  //报错\n```\n\n得知：`let`定义的变量只在`let`所在的代码块内有效。\n\n`let`很适合用在`for`循环内。\n\n```html\n<div id=\"box\">\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n  </ul>\n</div>\n```\n\n```js\nlet li = document.querySelectorAll('#box ul li');\nfor (var i = 0; i < li.length; i++) {\n       li[i].i = i;\n       li[i].onclick = function () {\n             alert(i); //点击任意一个li弹出的都是5。\n       }\n};\nlet li = document.querySelectorAll('#box ul li');\nfor (let i = 0; i < li.length; i++) {\n       li[i].i = i;\n       li[i].onclick = function () {\n            alert(i); //弹出i；。\n      }\n}\n```\n\n把`var`改成了`let`，在`for`内保存了每一个i，不会像`var`那样。\n\n### 暂时性死区\n\n```js\nvar a = 1;\nif (1){\n  let a = 5;\n  alert(5);\n}\n```\n\n在一个块级中使用`let`声明变量，这个变量不会受到块级之外的变量影响。\n\n## 不能再同一个块级作用域中，同时重复定义同一个变量。\n\n```js\nfunction () {\n  var b = 1;\n  let b = 2;\n}\nfunction () {\n  let b = 1;\n  let b = 2;\n}\n```\n\n上面两个这样会报错，前一个函数原因：b重复声明（`Identifier 'b' has already been declared`），后者原因：`Unexpected token (`。\n给函数加上函数名两个就都不会报错。\n\n```js\nfunction a() {\n  let b = 1;\n  let b = 2;\n}\n```\n\n本来只是想写关于作用域的文章，写着写着就发现，涉及的知识点越来越多。只好写到这里了。\n\n本文参考了`JavaScript`高级程序设计第三版\n\n阮一峰大神写的ES6入门: http://es6.ruanyifeng.com/\n","slug":"js-10","published":1,"updated":"2020-12-02T06:49:34.126Z","layout":"post","photos":[],"link":"","_id":"cki71wakz002ctl9k8npmjzqm","content":"<h2 id=\"执行环境及作用域\"><a href=\"#执行环境及作用域\" class=\"headerlink\" title=\"执行环境及作用域\"></a>执行环境及作用域</h2><p>执行环境是<code>JavaScript</code>中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内。</p>\n<p>全局执行环境是最外围的执行环境。每个函数都有自己的执行环境。当代码在某一个环境中执行时，会创建变量对象的一个作用域链，这个作用域链的用途，保证对执行对象有权利访问所有的变量和函数的有序访问。作用域链中的下一个变量对象来自来自其包含环境，在下一个对象则来自下一个包含环境，直到全局执行环境。（这也就是子作用域可以访问父作用域的参数和变量，反之不行）</p>\n<h2 id=\"JavaScript的解析顺序\"><a href=\"#JavaScript的解析顺序\" class=\"headerlink\" title=\"JavaScript的解析顺序\"></a>JavaScript的解析顺序</h2><p>（定义）先解析<code>var</code>、<code>function</code>参数；<br>该步骤的<code>var</code>只定义当前某个变量，后面的= 赋值不解析<br>该步骤的函数只定义函数，函数的执行不解析<br>重名只留后面的一个，<code>var</code>和函数重名函数优先<br>（执行）再从上至下执行其他代码，每个作用域要访问变量时，先从自身找，找不到再往上一级找。<br>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( a );</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">520</span>;</span><br><span class=\"line\">alert( a );</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>解析顺序：</p>\n<p>先找<code>var ====&gt; a</code>;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从上往下执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);   <span class=\"comment\">//undefined（只定义了，但是没有赋值）</span></span><br><span class=\"line\">a = <span class=\"number\">520</span>;</span><br><span class=\"line\">alert(a);   <span class=\"comment\">// 520;</span></span><br><span class=\"line\">a();   <span class=\"comment\">//520 （函数a执行，弹出变量a）；</span></span><br></pre></td></tr></table></figure>\n\n<p>以后在做解析顺序方面的问题可以按照这个顺序来解析！</p>\n<p>当然凡事都有例外：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\">         alert( <span class=\"number\">1</span> )；</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">        alert( <span class=\"number\">2</span> )；</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">a();  <span class=\"comment\">//1;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里得到的结果是弹出1；因为解析器在执行环境中对函数声明与函数表达式并不是一视同仁，解析器会先读取函数声明，并使其在执行任何代码之前可以访问，相当于把函数声明放到源代码的顶部，后面的函数表达式覆盖了函数声明。</p>\n<h2 id=\"函数声明与函数表达式的区别\"><a href=\"#函数声明与函数表达式的区别\" class=\"headerlink\" title=\"函数声明与函数表达式的区别\"></a>函数声明与函数表达式的区别</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">alert(a());   <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这里咱们来进行解析：</p>\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a()====&gt;function b(){}</code>；</p>\n<p><code>return b()</code>;  函数内有两个同名的函数，后面的覆盖前面的,执行后面的函数声                                                 明，因为有<code>return</code>所以不执行后面的代码，弹出2。</p>\n<p>下面来看几个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a());    <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>答案是3；</p>\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a()====&gt;1</code>.找<code>var ===&gt;var b = undefined</code>;           <code>var b = undefined</code> 第一个变量b引用函数<code>function() {  return 3;  }</code>;<code>return b() ===&gt; return 3</code>;===&gt;弹出3；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a());    <span class=\"comment\">//报错：Uncaught TypeError: b is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a();====&gt;1</code>.找<code>var ===&gt;var b = undefined</code>;<code>var b = undefined</code>;<code>return b() ===&gt; b为undefined</code>，不是函数;===&gt;报错；</p>\n<p>使用函数声明应该注意的事项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">1</span>); &#125;；</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">alert(a());</span><br></pre></td></tr></table></figure>\n\n<p>在<code>chorme</code>，<code>firefox</code>，以及<code>IE</code>中<code>edge</code>都是弹出<code>undefined</code>；在我的电脑上只有最高<code>IE10</code>，随意在<code>IE10</code>及以下都是弹出： <code>function x() { alert(1); }</code> 。</p>\n<h2 id=\"JavaScript没有块级作用域\"><a href=\"#JavaScript没有块级作用域\" class=\"headerlink\" title=\"JavaScript没有块级作用域\"></a>JavaScript没有块级作用域</h2><p>任何一对花括号｛｝中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。在<code>C</code>,<code>C++</code>,<code>Java</code>中在{}内的语句执行完后会被销毁，但是在<code>JavaScript</code>中，则是不一样。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>JavaScript</code>中<code>if</code>语句中的变量a会被添加到当前的执行环境，并没有被销毁。</p>\n<p>在<code>for</code>语句也是一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<p>注意的是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b);</span><br></pre></td></tr></table></figure>\n\n<p>为了避免报错使用<code>alert（window.b）</code>；因为如果<code>function (){}</code>不是块级的话，b也相当于全局变量，但事实是<code>JavaScript</code>中<code>function (){}</code>是可以开辟作用域的，所以这个是因为外部环境不能使用内部的变量（不能由外到内）。<br>怎么可以使<code>if</code>语句及<code>for</code>语句形成一个块级作用域呢？</p>\n<h3 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h3><p>我们可以在语句外包裹一个<code>function（）{}</code>,这样就可以解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(i);</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>alert（window.i）</code>弹出<code>undefined</code>。</p>\n<h3 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h3><p>使用<code>ES6</code>中的<code>let</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b);</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>undefined</code>；</p>\n<h2 id=\"ES6中的let与var的区别\"><a href=\"#ES6中的let与var的区别\" class=\"headerlink\" title=\"ES6中的let与var的区别\"></a>ES6中的let与var的区别</h2><p><code>let</code>命令与<code>var</code>还是有很大的区别的。</p>\n<h3 id=\"没有预解析。\"><a href=\"#没有预解析。\" class=\"headerlink\" title=\"没有预解析。\"></a>没有预解析。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);   <span class=\"comment\">//undefined,没有报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">alert(b);   <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">alert(b);  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>可以得出：<code>var</code>有预解析，而<code>let</code>没有预解析，只能在<code>let</code>定义后才能使用。</p>\n<h3 id=\"作用域的不同\"><a href=\"#作用域的不同\" class=\"headerlink\" title=\"作用域的不同\"></a>作用域的不同</h3><p>用<code>let</code>定义的变量的作用域是一个块级<code>{}</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  alert(a);   <span class=\"comment\">//1；</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);  <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>得知：<code>let</code>定义的变量只在<code>let</code>所在的代码块内有效。</p>\n<p><code>let</code>很适合用在<code>for</code>循环内。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> li = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">       li[i].i = i;</span><br><span class=\"line\">       li[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             alert(i); <span class=\"comment\">//点击任意一个li弹出的都是5。</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> li = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">       li[i].i = i;</span><br><span class=\"line\">       li[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(i); <span class=\"comment\">//弹出i；。</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把<code>var</code>改成了<code>let</code>，在<code>for</code>内保存了每一个i，不会像<code>var</code>那样。</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个块级中使用<code>let</code>声明变量，这个变量不会受到块级之外的变量影响。</p>\n<h2 id=\"不能再同一个块级作用域中，同时重复定义同一个变量。\"><a href=\"#不能再同一个块级作用域中，同时重复定义同一个变量。\" class=\"headerlink\" title=\"不能再同一个块级作用域中，同时重复定义同一个变量。\"></a>不能再同一个块级作用域中，同时重复定义同一个变量。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面两个这样会报错，前一个函数原因：b重复声明（<code>Identifier &#39;b&#39; has already been declared</code>），后者原因：<code>Unexpected token (</code>。<br>给函数加上函数名两个就都不会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本来只是想写关于作用域的文章，写着写着就发现，涉及的知识点越来越多。只好写到这里了。</p>\n<p>本文参考了<code>JavaScript</code>高级程序设计第三版</p>\n<p>阮一峰大神写的ES6入门: <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"执行环境及作用域\"><a href=\"#执行环境及作用域\" class=\"headerlink\" title=\"执行环境及作用域\"></a>执行环境及作用域</h2><p>执行环境是<code>JavaScript</code>中很重要的概念，定义了变量或者函数可以访问其他数据，每一个执行环境，都有一个关联的变量对象，其内定义的所有变量和函数都保存在这个对象内。</p>\n<p>全局执行环境是最外围的执行环境。每个函数都有自己的执行环境。当代码在某一个环境中执行时，会创建变量对象的一个作用域链，这个作用域链的用途，保证对执行对象有权利访问所有的变量和函数的有序访问。作用域链中的下一个变量对象来自来自其包含环境，在下一个对象则来自下一个包含环境，直到全局执行环境。（这也就是子作用域可以访问父作用域的参数和变量，反之不行）</p>\n<h2 id=\"JavaScript的解析顺序\"><a href=\"#JavaScript的解析顺序\" class=\"headerlink\" title=\"JavaScript的解析顺序\"></a>JavaScript的解析顺序</h2><p>（定义）先解析<code>var</code>、<code>function</code>参数；<br>该步骤的<code>var</code>只定义当前某个变量，后面的= 赋值不解析<br>该步骤的函数只定义函数，函数的执行不解析<br>重名只留后面的一个，<code>var</code>和函数重名函数优先<br>（执行）再从上至下执行其他代码，每个作用域要访问变量时，先从自身找，找不到再往上一级找。<br>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( a );</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">520</span>;</span><br><span class=\"line\">alert( a );</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p>解析顺序：</p>\n<p>先找<code>var ====&gt; a</code>;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从上往下执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);   <span class=\"comment\">//undefined（只定义了，但是没有赋值）</span></span><br><span class=\"line\">a = <span class=\"number\">520</span>;</span><br><span class=\"line\">alert(a);   <span class=\"comment\">// 520;</span></span><br><span class=\"line\">a();   <span class=\"comment\">//520 （函数a执行，弹出变量a）；</span></span><br></pre></td></tr></table></figure>\n\n<p>以后在做解析顺序方面的问题可以按照这个顺序来解析！</p>\n<p>当然凡事都有例外：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\">         alert( <span class=\"number\">1</span> )；</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">        alert( <span class=\"number\">2</span> )；</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">a();  <span class=\"comment\">//1;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里得到的结果是弹出1；因为解析器在执行环境中对函数声明与函数表达式并不是一视同仁，解析器会先读取函数声明，并使其在执行任何代码之前可以访问，相当于把函数声明放到源代码的顶部，后面的函数表达式覆盖了函数声明。</p>\n<h2 id=\"函数声明与函数表达式的区别\"><a href=\"#函数声明与函数表达式的区别\" class=\"headerlink\" title=\"函数声明与函数表达式的区别\"></a>函数声明与函数表达式的区别</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;；</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">alert(a());   <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>这里咱们来进行解析：</p>\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a()====&gt;function b(){}</code>；</p>\n<p><code>return b()</code>;  函数内有两个同名的函数，后面的覆盖前面的,执行后面的函数声                                                 明，因为有<code>return</code>所以不执行后面的代码，弹出2。</p>\n<p>下面来看几个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a());    <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>答案是3；</p>\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a()====&gt;1</code>.找<code>var ===&gt;var b = undefined</code>;           <code>var b = undefined</code> 第一个变量b引用函数<code>function() {  return 3;  }</code>;<code>return b() ===&gt; return 3</code>;===&gt;弹出3；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a());    <span class=\"comment\">//报错：Uncaught TypeError: b is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>解析顺序：</p>\n<ol>\n<li><p>先找<code>var ====&gt;</code>没有</p>\n<p>找：<code>function a(){}</code>；</p>\n</li>\n<li><p>从上往下执行：</p>\n</li>\n</ol>\n<p><code>alert(a);  ===&gt; a();====&gt;1</code>.找<code>var ===&gt;var b = undefined</code>;<code>var b = undefined</code>;<code>return b() ===&gt; b为undefined</code>，不是函数;===&gt;报错；</p>\n<p>使用函数声明应该注意的事项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">1</span>); &#125;；</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">alert(a());</span><br></pre></td></tr></table></figure>\n\n<p>在<code>chorme</code>，<code>firefox</code>，以及<code>IE</code>中<code>edge</code>都是弹出<code>undefined</code>；在我的电脑上只有最高<code>IE10</code>，随意在<code>IE10</code>及以下都是弹出： <code>function x() { alert(1); }</code> 。</p>\n<h2 id=\"JavaScript没有块级作用域\"><a href=\"#JavaScript没有块级作用域\" class=\"headerlink\" title=\"JavaScript没有块级作用域\"></a>JavaScript没有块级作用域</h2><p>任何一对花括号｛｝中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。在<code>C</code>,<code>C++</code>,<code>Java</code>中在{}内的语句执行完后会被销毁，但是在<code>JavaScript</code>中，则是不一样。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>JavaScript</code>中<code>if</code>语句中的变量a会被添加到当前的执行环境，并没有被销毁。</p>\n<p>在<code>for</code>语句也是一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<p>注意的是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b);</span><br></pre></td></tr></table></figure>\n\n<p>为了避免报错使用<code>alert（window.b）</code>；因为如果<code>function (){}</code>不是块级的话，b也相当于全局变量，但事实是<code>JavaScript</code>中<code>function (){}</code>是可以开辟作用域的，所以这个是因为外部环境不能使用内部的变量（不能由外到内）。<br>怎么可以使<code>if</code>语句及<code>for</code>语句形成一个块级作用域呢？</p>\n<h3 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h3><p>我们可以在语句外包裹一个<code>function（）{}</code>,这样就可以解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(i);</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>alert（window.i）</code>弹出<code>undefined</code>。</p>\n<h3 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h3><p>使用<code>ES6</code>中的<code>let</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = i;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.b);</span><br></pre></td></tr></table></figure>\n\n<p>弹出<code>undefined</code>；</p>\n<h2 id=\"ES6中的let与var的区别\"><a href=\"#ES6中的let与var的区别\" class=\"headerlink\" title=\"ES6中的let与var的区别\"></a>ES6中的let与var的区别</h2><p><code>let</code>命令与<code>var</code>还是有很大的区别的。</p>\n<h3 id=\"没有预解析。\"><a href=\"#没有预解析。\" class=\"headerlink\" title=\"没有预解析。\"></a>没有预解析。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);   <span class=\"comment\">//undefined,没有报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">alert(b);   <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">alert(b);  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<p>可以得出：<code>var</code>有预解析，而<code>let</code>没有预解析，只能在<code>let</code>定义后才能使用。</p>\n<h3 id=\"作用域的不同\"><a href=\"#作用域的不同\" class=\"headerlink\" title=\"作用域的不同\"></a>作用域的不同</h3><p>用<code>let</code>定义的变量的作用域是一个块级<code>{}</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  alert(a);   <span class=\"comment\">//1；</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a);  <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<p>得知：<code>let</code>定义的变量只在<code>let</code>所在的代码块内有效。</p>\n<p><code>let</code>很适合用在<code>for</code>循环内。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> li = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">       li[i].i = i;</span><br><span class=\"line\">       li[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">             alert(i); <span class=\"comment\">//点击任意一个li弹出的都是5。</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> li = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#box ul li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">       li[i].i = i;</span><br><span class=\"line\">       li[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(i); <span class=\"comment\">//弹出i；。</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把<code>var</code>改成了<code>let</code>，在<code>for</code>内保存了每一个i，不会像<code>var</code>那样。</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个块级中使用<code>let</code>声明变量，这个变量不会受到块级之外的变量影响。</p>\n<h2 id=\"不能再同一个块级作用域中，同时重复定义同一个变量。\"><a href=\"#不能再同一个块级作用域中，同时重复定义同一个变量。\" class=\"headerlink\" title=\"不能再同一个块级作用域中，同时重复定义同一个变量。\"></a>不能再同一个块级作用域中，同时重复定义同一个变量。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面两个这样会报错，前一个函数原因：b重复声明（<code>Identifier &#39;b&#39; has already been declared</code>），后者原因：<code>Unexpected token (</code>。<br>给函数加上函数名两个就都不会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本来只是想写关于作用域的文章，写着写着就发现，涉及的知识点越来越多。只好写到这里了。</p>\n<p>本文参考了<code>JavaScript</code>高级程序设计第三版</p>\n<p>阮一峰大神写的ES6入门: <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a></p>\n"},{"title":"console的使用","comments":1,"description":"console拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用console来调试","date":"2016-04-22T02:29:10.000Z","keywords":"console的使用","_content":"\n`console`拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用`console`来调试。\n\n## console.log()\n\n这个就不用多介绍了，主要是来输出一个或者多个的变量或者字符串\n\n## console.table()\n\n主要是输出一个对象\n\n```js\nlet [arr1,arr2] = [[1,2,3,4,5,6],{\n    name:'hbb',\n    age:20\n}]\nconsole.table(arr1)\nconsole.table(arr2)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/I4C6JHIXQ1OYVW-1.png)\n\n\n可以看到以表格的形式输出对象。\n\n## console.time()与console.timeEnd()\n\n可以得出一段代码运行时间\n\n```js\nconsole.time()\nlet arr = [1,2,3,4,5,67,8,12,3,43546,56,76,11]\nlet arr1 = arr.filter(val=>val>10)\nconsole.log(arr1)\nconsole.timeEnd()\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/25XLL0H9VIN53W92C8.png)\n\n## console.dir()\n\n可以显示一个对象所有的属性和方法。\n\n```js\nlet arr = [1,2,3,4,5,67,8,12,3,43546,56,76,11]\nconsole.dir(arr)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/GE68P1MV_SF97B2@C1EM.png)\n\n## console.assert()\n\n判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。\n\n```js\nlet a = 1\nconsole.assert(a)\nconsole.assert(a===2)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/EGSYYTZAX4U60IL3TR1X.png)\n\n## console.trace()\n\n来追踪函数的调用轨迹。（函数是如何被调用的，在其中加入`console.trace()`方法就可以了）\n\n```js\nlet fun = function (param) {\n  console.trace()\n  param.filter(val=>val>5)\n}\nfun([1,2,3,4,5,6])\nfun([1,12,31,41,15,16])\nfun([1,2,31,4,15,6])\nfun([1,2,13,41,5,6])\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/R8VLQ881S0D977OE0T4VH.png)\n\n\n实践中基本就用到过这么多，还有其他的一些方法：https://developer.mozilla.org/en-US/docs/Web/API/console","source":"_posts/js-13.md","raw":"---\ntitle: console的使用\ncomments: true\ndescription: console拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用console来调试\ntags: \"js\"\ndate: 2016-4-22 10:29:10\ncategories: \"js\"\nkeywords: console的使用\n---\n\n`console`拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用`console`来调试。\n\n## console.log()\n\n这个就不用多介绍了，主要是来输出一个或者多个的变量或者字符串\n\n## console.table()\n\n主要是输出一个对象\n\n```js\nlet [arr1,arr2] = [[1,2,3,4,5,6],{\n    name:'hbb',\n    age:20\n}]\nconsole.table(arr1)\nconsole.table(arr2)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/I4C6JHIXQ1OYVW-1.png)\n\n\n可以看到以表格的形式输出对象。\n\n## console.time()与console.timeEnd()\n\n可以得出一段代码运行时间\n\n```js\nconsole.time()\nlet arr = [1,2,3,4,5,67,8,12,3,43546,56,76,11]\nlet arr1 = arr.filter(val=>val>10)\nconsole.log(arr1)\nconsole.timeEnd()\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/25XLL0H9VIN53W92C8.png)\n\n## console.dir()\n\n可以显示一个对象所有的属性和方法。\n\n```js\nlet arr = [1,2,3,4,5,67,8,12,3,43546,56,76,11]\nconsole.dir(arr)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/GE68P1MV_SF97B2@C1EM.png)\n\n## console.assert()\n\n判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。\n\n```js\nlet a = 1\nconsole.assert(a)\nconsole.assert(a===2)\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/EGSYYTZAX4U60IL3TR1X.png)\n\n## console.trace()\n\n来追踪函数的调用轨迹。（函数是如何被调用的，在其中加入`console.trace()`方法就可以了）\n\n```js\nlet fun = function (param) {\n  console.trace()\n  param.filter(val=>val>5)\n}\nfun([1,2,3,4,5,6])\nfun([1,12,31,41,15,16])\nfun([1,2,31,4,15,6])\nfun([1,2,13,41,5,6])\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/R8VLQ881S0D977OE0T4VH.png)\n\n\n实践中基本就用到过这么多，还有其他的一些方法：https://developer.mozilla.org/en-US/docs/Web/API/console","slug":"js-13","published":1,"updated":"2020-12-02T06:49:34.128Z","layout":"post","photos":[],"link":"","_id":"cki71wal1002gtl9k1ytftmeh","content":"<p><code>console</code>拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用<code>console</code>来调试。</p>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log()\"></a>console.log()</h2><p>这个就不用多介绍了，主要是来输出一个或者多个的变量或者字符串</p>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table()\"></a>console.table()</h2><p>主要是输出一个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(arr1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(arr2)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/I4C6JHIXQ1OYVW-1.png\" alt></p>\n<p>可以看到以表格的形式输出对象。</p>\n<h2 id=\"console-time-与console-timeEnd\"><a href=\"#console-time-与console-timeEnd\" class=\"headerlink\" title=\"console.time()与console.timeEnd()\"></a>console.time()与console.timeEnd()</h2><p>可以得出一段代码运行时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time()</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">67</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>,<span class=\"number\">43546</span>,<span class=\"number\">56</span>,<span class=\"number\">76</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val&gt;<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/25XLL0H9VIN53W92C8.png\" alt></p>\n<h2 id=\"console-dir\"><a href=\"#console-dir\" class=\"headerlink\" title=\"console.dir()\"></a>console.dir()</h2><p>可以显示一个对象所有的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">67</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>,<span class=\"number\">43546</span>,<span class=\"number\">56</span>,<span class=\"number\">76</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(arr)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/GE68P1MV_SF97B2@C1EM.png\" alt></p>\n<h2 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert()\"></a>console.assert()</h2><p>判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(a===<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/EGSYYTZAX4U60IL3TR1X.png\" alt></p>\n<h2 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace()\"></a>console.trace()</h2><p>来追踪函数的调用轨迹。（函数是如何被调用的，在其中加入<code>console.trace()</code>方法就可以了）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.trace()</span><br><span class=\"line\">  param.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val&gt;<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">12</span>,<span class=\"number\">31</span>,<span class=\"number\">41</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">31</span>,<span class=\"number\">4</span>,<span class=\"number\">15</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">13</span>,<span class=\"number\">41</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/R8VLQ881S0D977OE0T4VH.png\" alt></p>\n<p>实践中基本就用到过这么多，还有其他的一些方法：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/console</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><code>console</code>拥有多个方法可以更好显示我们想要调试的内容。在平时调试js代码，我比较喜欢使用<code>console</code>来调试。</p>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log()\"></a>console.log()</h2><p>这个就不用多介绍了，主要是来输出一个或者多个的变量或者字符串</p>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table()\"></a>console.table()</h2><p>主要是输出一个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [arr1,arr2] = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(arr1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(arr2)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/I4C6JHIXQ1OYVW-1.png\" alt></p>\n<p>可以看到以表格的形式输出对象。</p>\n<h2 id=\"console-time-与console-timeEnd\"><a href=\"#console-time-与console-timeEnd\" class=\"headerlink\" title=\"console.time()与console.timeEnd()\"></a>console.time()与console.timeEnd()</h2><p>可以得出一段代码运行时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time()</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">67</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>,<span class=\"number\">43546</span>,<span class=\"number\">56</span>,<span class=\"number\">76</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val&gt;<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/25XLL0H9VIN53W92C8.png\" alt></p>\n<h2 id=\"console-dir\"><a href=\"#console-dir\" class=\"headerlink\" title=\"console.dir()\"></a>console.dir()</h2><p>可以显示一个对象所有的属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">67</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>,<span class=\"number\">43546</span>,<span class=\"number\">56</span>,<span class=\"number\">76</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(arr)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/GE68P1MV_SF97B2@C1EM.png\" alt></p>\n<h2 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert()\"></a>console.assert()</h2><p>判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(a===<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/EGSYYTZAX4U60IL3TR1X.png\" alt></p>\n<h2 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace()\"></a>console.trace()</h2><p>来追踪函数的调用轨迹。（函数是如何被调用的，在其中加入<code>console.trace()</code>方法就可以了）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.trace()</span><br><span class=\"line\">  param.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val&gt;<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">12</span>,<span class=\"number\">31</span>,<span class=\"number\">41</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">31</span>,<span class=\"number\">4</span>,<span class=\"number\">15</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">fun([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">13</span>,<span class=\"number\">41</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/R8VLQ881S0D977OE0T4VH.png\" alt></p>\n<p>实践中基本就用到过这么多，还有其他的一些方法：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/console</a></p>\n"},{"title":"移动端浏览器的判别","comments":1,"description":"移动端浏览器的判别","date":"2016-10-22T02:29:10.000Z","keywords":"移动端浏览器的判别","_content":"\n在做移动端的网页的时候，兼容手机上不同的浏览器也是一个痛苦的事情。\n\n我们可以现在`script`部分打印出`console.log(navigator）`：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/5_NWLPB1_HT_68TX4WB5.png)\n\n可以根据这个`navigator`来判断是否移动端以及是哪个浏览器。\n\n```js\nvar u = navigator.userAgent, app = navigator.appVersion;\nreturn {//移动终端浏览器版本信息  \n         trident: u.indexOf('Trident') > -1, //IE内核  \n         presto: u.indexOf('Presto') > -1, //opera内核  \n         webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核  \n         gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核  \n         mobile: !!u.match(/AppleWebKit.*Mobile.*/)||!!u.match(/AppleWebKit/), //是否为移动终端  \n         ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端  \n         android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器  \n         iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器  \n         iPad: u.indexOf('iPad') > -1, //是否iPad  \n         webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部  \n };\n```\n比如：如果我在`ios`系统，`uc`浏览器内表现得和其他系统或者浏览器不同，我们可以根据上面的单独对`ios`系统的`uc`浏览器处理。\n\n```js\nvar browser = !!navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/)&&navigator.userAgent.indexOf('UCBrowser') > -1\n```\n如果`browser`为true，那就是`ios`系统下的`uc`浏览器。单独有一套代码来消除特定的`bug`。\n\n\n\n\n","source":"_posts/js-12.md","raw":"---\ntitle: 移动端浏览器的判别\ncomments: true\ndescription: 移动端浏览器的判别\ntags: \"js\"\ndate: 2016-10-22 10:29:10\ncategories: \"js\"\nkeywords: 移动端浏览器的判别\n---\n\n在做移动端的网页的时候，兼容手机上不同的浏览器也是一个痛苦的事情。\n\n我们可以现在`script`部分打印出`console.log(navigator）`：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/5_NWLPB1_HT_68TX4WB5.png)\n\n可以根据这个`navigator`来判断是否移动端以及是哪个浏览器。\n\n```js\nvar u = navigator.userAgent, app = navigator.appVersion;\nreturn {//移动终端浏览器版本信息  \n         trident: u.indexOf('Trident') > -1, //IE内核  \n         presto: u.indexOf('Presto') > -1, //opera内核  \n         webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核  \n         gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核  \n         mobile: !!u.match(/AppleWebKit.*Mobile.*/)||!!u.match(/AppleWebKit/), //是否为移动终端  \n         ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端  \n         android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器  \n         iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器  \n         iPad: u.indexOf('iPad') > -1, //是否iPad  \n         webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部  \n };\n```\n比如：如果我在`ios`系统，`uc`浏览器内表现得和其他系统或者浏览器不同，我们可以根据上面的单独对`ios`系统的`uc`浏览器处理。\n\n```js\nvar browser = !!navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/)&&navigator.userAgent.indexOf('UCBrowser') > -1\n```\n如果`browser`为true，那就是`ios`系统下的`uc`浏览器。单独有一套代码来消除特定的`bug`。\n\n\n\n\n","slug":"js-12","published":1,"updated":"2020-12-02T06:49:34.127Z","layout":"post","photos":[],"link":"","_id":"cki71wal1002itl9khn7wnxc9","content":"<p>在做移动端的网页的时候，兼容手机上不同的浏览器也是一个痛苦的事情。</p>\n<p>我们可以现在<code>script</code>部分打印出<code>console.log(navigator）</code>：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/5_NWLPB1_HT_68TX4WB5.png\" alt></p>\n<p>可以根据这个<code>navigator</code>来判断是否移动端以及是哪个浏览器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> u = navigator.userAgent, app = navigator.appVersion;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"comment\">//移动终端浏览器版本信息  </span></span><br><span class=\"line\">         trident: u.indexOf(<span class=\"string\">'Trident'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//IE内核  </span></span><br><span class=\"line\">         presto: u.indexOf(<span class=\"string\">'Presto'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//opera内核  </span></span><br><span class=\"line\">         webKit: u.indexOf(<span class=\"string\">'AppleWebKit'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//苹果、谷歌内核  </span></span><br><span class=\"line\">         gecko: u.indexOf(<span class=\"string\">'Gecko'</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; u.indexOf(<span class=\"string\">'KHTML'</span>) == <span class=\"number\">-1</span>, <span class=\"comment\">//火狐内核  </span></span><br><span class=\"line\">         mobile: !!u.match(<span class=\"regexp\">/AppleWebKit.*Mobile.*/</span>)||!!u.match(<span class=\"regexp\">/AppleWebKit/</span>), <span class=\"comment\">//是否为移动终端  </span></span><br><span class=\"line\">         ios: !!u.match(<span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class=\"comment\">//ios终端  </span></span><br><span class=\"line\">         android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//android终端或者uc浏览器  </span></span><br><span class=\"line\">         iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Mac'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//是否为iPhone或者QQHD浏览器  </span></span><br><span class=\"line\">         iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//是否iPad  </span></span><br><span class=\"line\">         webApp: u.indexOf(<span class=\"string\">'Safari'</span>) == <span class=\"number\">-1</span> <span class=\"comment\">//是否web应该程序，没有头部与底部  </span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>比如：如果我在<code>ios</code>系统，<code>uc</code>浏览器内表现得和其他系统或者浏览器不同，我们可以根据上面的单独对<code>ios</code>系统的<code>uc</code>浏览器处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> browser = !!navigator.userAgent.match(<span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)&amp;&amp;navigator.userAgent.indexOf(<span class=\"string\">'UCBrowser'</span>) &gt; <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<code>browser</code>为true，那就是<code>ios</code>系统下的<code>uc</code>浏览器。单独有一套代码来消除特定的<code>bug</code>。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在做移动端的网页的时候，兼容手机上不同的浏览器也是一个痛苦的事情。</p>\n<p>我们可以现在<code>script</code>部分打印出<code>console.log(navigator）</code>：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/5_NWLPB1_HT_68TX4WB5.png\" alt></p>\n<p>可以根据这个<code>navigator</code>来判断是否移动端以及是哪个浏览器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> u = navigator.userAgent, app = navigator.appVersion;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"comment\">//移动终端浏览器版本信息  </span></span><br><span class=\"line\">         trident: u.indexOf(<span class=\"string\">'Trident'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//IE内核  </span></span><br><span class=\"line\">         presto: u.indexOf(<span class=\"string\">'Presto'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//opera内核  </span></span><br><span class=\"line\">         webKit: u.indexOf(<span class=\"string\">'AppleWebKit'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//苹果、谷歌内核  </span></span><br><span class=\"line\">         gecko: u.indexOf(<span class=\"string\">'Gecko'</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; u.indexOf(<span class=\"string\">'KHTML'</span>) == <span class=\"number\">-1</span>, <span class=\"comment\">//火狐内核  </span></span><br><span class=\"line\">         mobile: !!u.match(<span class=\"regexp\">/AppleWebKit.*Mobile.*/</span>)||!!u.match(<span class=\"regexp\">/AppleWebKit/</span>), <span class=\"comment\">//是否为移动终端  </span></span><br><span class=\"line\">         ios: !!u.match(<span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class=\"comment\">//ios终端  </span></span><br><span class=\"line\">         android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//android终端或者uc浏览器  </span></span><br><span class=\"line\">         iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Mac'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//是否为iPhone或者QQHD浏览器  </span></span><br><span class=\"line\">         iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>, <span class=\"comment\">//是否iPad  </span></span><br><span class=\"line\">         webApp: u.indexOf(<span class=\"string\">'Safari'</span>) == <span class=\"number\">-1</span> <span class=\"comment\">//是否web应该程序，没有头部与底部  </span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>比如：如果我在<code>ios</code>系统，<code>uc</code>浏览器内表现得和其他系统或者浏览器不同，我们可以根据上面的单独对<code>ios</code>系统的<code>uc</code>浏览器处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> browser = !!navigator.userAgent.match(<span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)&amp;&amp;navigator.userAgent.indexOf(<span class=\"string\">'UCBrowser'</span>) &gt; <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<code>browser</code>为true，那就是<code>ios</code>系统下的<code>uc</code>浏览器。单独有一套代码来消除特定的<code>bug</code>。</p>\n"},{"title":"跨域技术","comments":1,"description":"跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。","date":"2016-09-22T02:29:10.000Z","keywords":"跨域技术","_content":"\n## CORS:跨域资源共享\n\n(Cross-Origin Resource Sharing），跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。\n\n### `IE`对`CORS`的实现：\n\n引入了`XDR`（XDomainREquest），这个与XHR类似，但能安全可靠的实现跨域通信。与XHR的不同之处：\n\n`cookie`不会随便请求发送，也不会随响应返回。\n智能设置请求头部信息中的 `Content-Type`字段 。\n不能访问响应头部信息 。\n只支持`get`和`post`请求。\n`XDR`使用方法:\n\n1、创建XDR对象；\n2、调用open（）方法，这里open方法只有两个参数，因为所有XDR请求都是异步执行的；\n\n3、调用send（）方法。\n\n```js\nvar xdr = new XDomainRequest();\n xdr.onload = function () {\n     alert(xdr.responseText);\n };\n xdr.onerror = function () { //错误处理程序\n     alert(\"An error occurred.\");\n };\n xdr.open(\"post\",\"http://www.somewhert-else.com/page/\");\n xdr.send(null);\n```\n\n由于导致`XDR`请求失败的因素有很多，因此不要忘记通过`onerror`事件处理程序来捕获该事件。\n\n为了支持`post`请求，`XDR`对象提供了`contentType`属性，用来表示发送数据的格式：\n\n```js\nvar xdr = new XDomainRequest();\nxdr.onload = function () {\n    alert(xdr.responseText);\n};\nxdr.onerror = function () { //错误处理程序\n    alert(\"An error occurred.\");\n};\nxdr.open(\"post\",\"http://www.somewhert-else.com/page/\");\nxdr.contentType = \"application/x-www-form-urlencoded\";\nxdr.send(\"name1=value1&name2=value2\");\n```\n\n这个属性是通过XDR对象影响头部信息的唯一方式。\n\n### 其他浏览器对CORS的实现\n\n要请求位于另一个域的资源，使用标准的`XHR`对象并在`open（）`方法传入绝对url：\n\n```js\nvar xhr =createXHR();\nxhr.onreadystatechange = function () {\nif (xhr.readyState===4){\nif((xhr.status>=200&&xhr.status<300 || xhr.status===304)){\n            alert(xhr.responseText)\n        }else{\n            alert(\"Request was unsuccessful:\" +xhr.status);\n        }\n    }\n};\nxhr.open(\"get\",\"http://www.somewhert-else.com/page/\");\nxdr.send(null);\n```\n\n要使所有浏览器都支持简单的请求，检测`XHR`是否支持`CORS`的最简单的方式，就是检查是否存在`withCredentials` 属性。在结合检测`XDomainRequest`对象是否存在，就可以兼顾所有浏览器。\n\n```js\nfunction createCORSRequest (method,url) {\nvar xhr = new XMLHttpRequest();\nif (\"withCredentails\" in xhr) {\n        xhr.open(method,url,true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        xhr = new XDomainRequest();\n        xhr.open(method,url);\n    } else {\n        xhr = null;\n    }\nreturn xhr;\n}\nvar request = createCORSRequest(\"get\",\"http://www.somewhere-else.com/page/\");\nif(request) {\n    request.onload = function (){\n//对responseText处理\n    };\n    request.send();\n}\n```\n\n## 图像Ping\n一个网页可以从任何网页中加载图像，不用担心跨域不跨域。使用它们的`onload`和`onerror`事件处理程序来确定是否接受到了响应。\n\n图像`Ping`是与服务器进行简单/单向的跨域通信的一种方式。请求的数据是通过查询字符串的方式发送的。\n\n```js\nvar img = new Image();\nimg.onload =img.onerror = function () {\n    alert(\"Done!\");\n};\nimg.src = \"http://www.example.com/test?name=Nicholas\";\n```\n\n## JSONP\n\n关于`JSONP`内容可以查看：http://www.hbbaly.com/2017/10/08/jsonp/\n\n## Comet\n\n`Ajax`是一种从页面向服务器请求数据的技术，而`Comet`是一种服务器向页面推送数据的技术。`Comet`能够让信息近乎实时的被推送到页面上，非常适合处理体育比赛的分数和股票报价。\n\n有两种实现`Comet`的方式：长轮询和流。\n\n长轮询是短轮询的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，接着又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。\n\n`HTTP`流： 浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性的向浏览器发送数据。\n\n用XHR对象实现`HTTP`流的典型代码：\n\n```js\nfunction createStreamingClient (url,progress,finished) {\nvar xhr = new XMLHttpRequest();\nvar received = 0;\n    xhr.open(\"get\",url,true);\n    xhr.onreadystatechange = function () {\nvar result;\nif (xhr.readyState == 3) {\n//只取得最近数据并调整计数器\n            result = xhr.responseText.substring(received);\n            received += result.length;\n//调用progress函数\n            progress(result);\n        } else if (xhr.readyState == 4) {\n            finished(xhr.responseText);\n        }\n    };\n    xhr.send(null);\nreturn xhr;\n}\nvar client = createStreamingClient(\"s.php\",function(data){\n    alert(\"Received\" + data);\n},function (data) {\n    alert(\"Done!\")\n});\n```\n\n## SSE 服务器发送事件\n\n`SSE`是围绕只读`Comet`交互推出的`API`，用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。\n\n首先，要创建一个新的`EventSource`对象，并传入一个入口点，传入的`URL`必须与原页面同源。`EventSource`的实例有一个`readyState`属性，值为0表示正连接到服务器，1为表示打开了连接，2为表示关闭了连接。\n\n## Web Sockets\n\n其目标是在一个单独的持久连接上提供全双工/双向通信。\n在`JavaScript`中创建了`Web Sockets`之后，会有一个`HTTP`请求发送到服务器以发起连接，在取得服务器响应后，建立的连接会使用`HTTP`升级从`HTTP`协议交换为`Web Socket` 协议。\n使用自定义协议的好处是：能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。\n\n1、实例`WebSocket`对象，并传入`URL`\n\n`var socket = new WebSocket(\"ws://www.example.com/server.php\");`\n`\n必须传入绝对URL\n实例化`WebSocket`对象后，浏览器会马上尝试创建连接。\n\n2、发送和接收数据\n\n```js\nvar message ={\n  time: new Date(),\n  text:\"hello world\"\n}\nsocket.send(JSON.stringify(message));\n```\n\n`WebSocket`只能通过连接发送纯文本数据，因此将数据序列化为`JSON`字符串。\n\n\n参考资料：JavaScript高级程序设计","source":"_posts/js-14.md","raw":"---\ntitle: 跨域技术\ncomments: true\ndescription: 跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。\ntags: \"js\"\ndate: 2016-9-22 10:29:10\ncategories: \"js\"\nkeywords: 跨域技术\n---\n\n## CORS:跨域资源共享\n\n(Cross-Origin Resource Sharing），跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。\n\n### `IE`对`CORS`的实现：\n\n引入了`XDR`（XDomainREquest），这个与XHR类似，但能安全可靠的实现跨域通信。与XHR的不同之处：\n\n`cookie`不会随便请求发送，也不会随响应返回。\n智能设置请求头部信息中的 `Content-Type`字段 。\n不能访问响应头部信息 。\n只支持`get`和`post`请求。\n`XDR`使用方法:\n\n1、创建XDR对象；\n2、调用open（）方法，这里open方法只有两个参数，因为所有XDR请求都是异步执行的；\n\n3、调用send（）方法。\n\n```js\nvar xdr = new XDomainRequest();\n xdr.onload = function () {\n     alert(xdr.responseText);\n };\n xdr.onerror = function () { //错误处理程序\n     alert(\"An error occurred.\");\n };\n xdr.open(\"post\",\"http://www.somewhert-else.com/page/\");\n xdr.send(null);\n```\n\n由于导致`XDR`请求失败的因素有很多，因此不要忘记通过`onerror`事件处理程序来捕获该事件。\n\n为了支持`post`请求，`XDR`对象提供了`contentType`属性，用来表示发送数据的格式：\n\n```js\nvar xdr = new XDomainRequest();\nxdr.onload = function () {\n    alert(xdr.responseText);\n};\nxdr.onerror = function () { //错误处理程序\n    alert(\"An error occurred.\");\n};\nxdr.open(\"post\",\"http://www.somewhert-else.com/page/\");\nxdr.contentType = \"application/x-www-form-urlencoded\";\nxdr.send(\"name1=value1&name2=value2\");\n```\n\n这个属性是通过XDR对象影响头部信息的唯一方式。\n\n### 其他浏览器对CORS的实现\n\n要请求位于另一个域的资源，使用标准的`XHR`对象并在`open（）`方法传入绝对url：\n\n```js\nvar xhr =createXHR();\nxhr.onreadystatechange = function () {\nif (xhr.readyState===4){\nif((xhr.status>=200&&xhr.status<300 || xhr.status===304)){\n            alert(xhr.responseText)\n        }else{\n            alert(\"Request was unsuccessful:\" +xhr.status);\n        }\n    }\n};\nxhr.open(\"get\",\"http://www.somewhert-else.com/page/\");\nxdr.send(null);\n```\n\n要使所有浏览器都支持简单的请求，检测`XHR`是否支持`CORS`的最简单的方式，就是检查是否存在`withCredentials` 属性。在结合检测`XDomainRequest`对象是否存在，就可以兼顾所有浏览器。\n\n```js\nfunction createCORSRequest (method,url) {\nvar xhr = new XMLHttpRequest();\nif (\"withCredentails\" in xhr) {\n        xhr.open(method,url,true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        xhr = new XDomainRequest();\n        xhr.open(method,url);\n    } else {\n        xhr = null;\n    }\nreturn xhr;\n}\nvar request = createCORSRequest(\"get\",\"http://www.somewhere-else.com/page/\");\nif(request) {\n    request.onload = function (){\n//对responseText处理\n    };\n    request.send();\n}\n```\n\n## 图像Ping\n一个网页可以从任何网页中加载图像，不用担心跨域不跨域。使用它们的`onload`和`onerror`事件处理程序来确定是否接受到了响应。\n\n图像`Ping`是与服务器进行简单/单向的跨域通信的一种方式。请求的数据是通过查询字符串的方式发送的。\n\n```js\nvar img = new Image();\nimg.onload =img.onerror = function () {\n    alert(\"Done!\");\n};\nimg.src = \"http://www.example.com/test?name=Nicholas\";\n```\n\n## JSONP\n\n关于`JSONP`内容可以查看：http://www.hbbaly.com/2017/10/08/jsonp/\n\n## Comet\n\n`Ajax`是一种从页面向服务器请求数据的技术，而`Comet`是一种服务器向页面推送数据的技术。`Comet`能够让信息近乎实时的被推送到页面上，非常适合处理体育比赛的分数和股票报价。\n\n有两种实现`Comet`的方式：长轮询和流。\n\n长轮询是短轮询的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，接着又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。\n\n`HTTP`流： 浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性的向浏览器发送数据。\n\n用XHR对象实现`HTTP`流的典型代码：\n\n```js\nfunction createStreamingClient (url,progress,finished) {\nvar xhr = new XMLHttpRequest();\nvar received = 0;\n    xhr.open(\"get\",url,true);\n    xhr.onreadystatechange = function () {\nvar result;\nif (xhr.readyState == 3) {\n//只取得最近数据并调整计数器\n            result = xhr.responseText.substring(received);\n            received += result.length;\n//调用progress函数\n            progress(result);\n        } else if (xhr.readyState == 4) {\n            finished(xhr.responseText);\n        }\n    };\n    xhr.send(null);\nreturn xhr;\n}\nvar client = createStreamingClient(\"s.php\",function(data){\n    alert(\"Received\" + data);\n},function (data) {\n    alert(\"Done!\")\n});\n```\n\n## SSE 服务器发送事件\n\n`SSE`是围绕只读`Comet`交互推出的`API`，用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。\n\n首先，要创建一个新的`EventSource`对象，并传入一个入口点，传入的`URL`必须与原页面同源。`EventSource`的实例有一个`readyState`属性，值为0表示正连接到服务器，1为表示打开了连接，2为表示关闭了连接。\n\n## Web Sockets\n\n其目标是在一个单独的持久连接上提供全双工/双向通信。\n在`JavaScript`中创建了`Web Sockets`之后，会有一个`HTTP`请求发送到服务器以发起连接，在取得服务器响应后，建立的连接会使用`HTTP`升级从`HTTP`协议交换为`Web Socket` 协议。\n使用自定义协议的好处是：能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。\n\n1、实例`WebSocket`对象，并传入`URL`\n\n`var socket = new WebSocket(\"ws://www.example.com/server.php\");`\n`\n必须传入绝对URL\n实例化`WebSocket`对象后，浏览器会马上尝试创建连接。\n\n2、发送和接收数据\n\n```js\nvar message ={\n  time: new Date(),\n  text:\"hello world\"\n}\nsocket.send(JSON.stringify(message));\n```\n\n`WebSocket`只能通过连接发送纯文本数据，因此将数据序列化为`JSON`字符串。\n\n\n参考资料：JavaScript高级程序设计","slug":"js-14","published":1,"updated":"2020-12-02T06:49:34.129Z","layout":"post","photos":[],"link":"","_id":"cki71wal3002mtl9kace9syfd","content":"<h2 id=\"CORS-跨域资源共享\"><a href=\"#CORS-跨域资源共享\" class=\"headerlink\" title=\"CORS:跨域资源共享\"></a>CORS:跨域资源共享</h2><p>(Cross-Origin Resource Sharing），跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。</p>\n<h3 id=\"IE对CORS的实现：\"><a href=\"#IE对CORS的实现：\" class=\"headerlink\" title=\"IE对CORS的实现：\"></a><code>IE</code>对<code>CORS</code>的实现：</h3><p>引入了<code>XDR</code>（XDomainREquest），这个与XHR类似，但能安全可靠的实现跨域通信。与XHR的不同之处：</p>\n<p><code>cookie</code>不会随便请求发送，也不会随响应返回。<br>智能设置请求头部信息中的 <code>Content-Type</code>字段 。<br>不能访问响应头部信息 。<br>只支持<code>get</code>和<code>post</code>请求。<br><code>XDR</code>使用方法:</p>\n<p>1、创建XDR对象；<br>2、调用open（）方法，这里open方法只有两个参数，因为所有XDR请求都是异步执行的；</p>\n<p>3、调用send（）方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xdr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\"> xdr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(xdr.responseText);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> xdr.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//错误处理程序</span></span><br><span class=\"line\">     alert(<span class=\"string\">\"An error occurred.\"</span>);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> xdr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\"> xdr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>由于导致<code>XDR</code>请求失败的因素有很多，因此不要忘记通过<code>onerror</code>事件处理程序来捕获该事件。</p>\n<p>为了支持<code>post</code>请求，<code>XDR</code>对象提供了<code>contentType</code>属性，用来表示发送数据的格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xdr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\">xdr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(xdr.responseText);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xdr.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//错误处理程序</span></span><br><span class=\"line\">    alert(<span class=\"string\">\"An error occurred.\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xdr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\">xdr.contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span>;</span><br><span class=\"line\">xdr.send(<span class=\"string\">\"name1=value1&amp;name2=value2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个属性是通过XDR对象影响头部信息的唯一方式。</p>\n<h3 id=\"其他浏览器对CORS的实现\"><a href=\"#其他浏览器对CORS的实现\" class=\"headerlink\" title=\"其他浏览器对CORS的实现\"></a>其他浏览器对CORS的实现</h3><p>要请求位于另一个域的资源，使用标准的<code>XHR</code>对象并在<code>open（）</code>方法传入绝对url：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr =createXHR();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xhr.readyState===<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span> || xhr.status===<span class=\"number\">304</span>))&#123;</span><br><span class=\"line\">            alert(xhr.responseText)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"Request was unsuccessful:\"</span> +xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\">xdr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>要使所有浏览器都支持简单的请求，检测<code>XHR</code>是否支持<code>CORS</code>的最简单的方式，就是检查是否存在<code>withCredentials</code> 属性。在结合检测<code>XDomainRequest</code>对象是否存在，就可以兼顾所有浏览器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCORSRequest</span> (<span class=\"params\">method,url</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"withCredentails\"</span> <span class=\"keyword\">in</span> xhr) &#123;</span><br><span class=\"line\">        xhr.open(method,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XDomainRequest != <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\">        xhr.open(method,url);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = createCORSRequest(<span class=\"string\">\"get\"</span>,<span class=\"string\">\"http://www.somewhere-else.com/page/\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(request) &#123;</span><br><span class=\"line\">    request.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//对responseText处理</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图像Ping\"><a href=\"#图像Ping\" class=\"headerlink\" title=\"图像Ping\"></a>图像Ping</h2><p>一个网页可以从任何网页中加载图像，不用担心跨域不跨域。使用它们的<code>onload</code>和<code>onerror</code>事件处理程序来确定是否接受到了响应。</p>\n<p>图像<code>Ping</code>是与服务器进行简单/单向的跨域通信的一种方式。请求的数据是通过查询字符串的方式发送的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.onload =img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.src = <span class=\"string\">\"http://www.example.com/test?name=Nicholas\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>关于<code>JSONP</code>内容可以查看：<a href=\"http://www.hbbaly.com/2017/10/08/jsonp/\" target=\"_blank\" rel=\"noopener\">http://www.hbbaly.com/2017/10/08/jsonp/</a></p>\n<h2 id=\"Comet\"><a href=\"#Comet\" class=\"headerlink\" title=\"Comet\"></a>Comet</h2><p><code>Ajax</code>是一种从页面向服务器请求数据的技术，而<code>Comet</code>是一种服务器向页面推送数据的技术。<code>Comet</code>能够让信息近乎实时的被推送到页面上，非常适合处理体育比赛的分数和股票报价。</p>\n<p>有两种实现<code>Comet</code>的方式：长轮询和流。</p>\n<p>长轮询是短轮询的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，接着又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。</p>\n<p><code>HTTP</code>流： 浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性的向浏览器发送数据。</p>\n<p>用XHR对象实现<code>HTTP</code>流的典型代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStreamingClient</span> (<span class=\"params\">url,progress,finished</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">var</span> received = <span class=\"number\">0</span>;</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"get\"</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//只取得最近数据并调整计数器</span></span><br><span class=\"line\">            result = xhr.responseText.substring(received);</span><br><span class=\"line\">            received += result.length;</span><br><span class=\"line\"><span class=\"comment\">//调用progress函数</span></span><br><span class=\"line\">            progress(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            finished(xhr.responseText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = createStreamingClient(<span class=\"string\">\"s.php\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Received\"</span> + data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSE-服务器发送事件\"><a href=\"#SSE-服务器发送事件\" class=\"headerlink\" title=\"SSE 服务器发送事件\"></a>SSE 服务器发送事件</h2><p><code>SSE</code>是围绕只读<code>Comet</code>交互推出的<code>API</code>，用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。</p>\n<p>首先，要创建一个新的<code>EventSource</code>对象，并传入一个入口点，传入的<code>URL</code>必须与原页面同源。<code>EventSource</code>的实例有一个<code>readyState</code>属性，值为0表示正连接到服务器，1为表示打开了连接，2为表示关闭了连接。</p>\n<h2 id=\"Web-Sockets\"><a href=\"#Web-Sockets\" class=\"headerlink\" title=\"Web Sockets\"></a>Web Sockets</h2><p>其目标是在一个单独的持久连接上提供全双工/双向通信。<br>在<code>JavaScript</code>中创建了<code>Web Sockets</code>之后，会有一个<code>HTTP</code>请求发送到服务器以发起连接，在取得服务器响应后，建立的连接会使用<code>HTTP</code>升级从<code>HTTP</code>协议交换为<code>Web Socket</code> 协议。<br>使用自定义协议的好处是：能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。</p>\n<p>1、实例<code>WebSocket</code>对象，并传入<code>URL</code></p>\n<p><code>var socket = new WebSocket(&quot;ws://www.example.com/server.php&quot;);</code><br><code>必须传入绝对URL\n实例化</code>WebSocket`对象后，浏览器会马上尝试创建连接。</p>\n<p>2、发送和接收数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message =&#123;</span><br><span class=\"line\">  time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">  text:<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">socket.send(<span class=\"built_in\">JSON</span>.stringify(message));</span><br></pre></td></tr></table></figure>\n\n<p><code>WebSocket</code>只能通过连接发送纯文本数据，因此将数据序列化为<code>JSON</code>字符串。</p>\n<p>参考资料：JavaScript高级程序设计</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"CORS-跨域资源共享\"><a href=\"#CORS-跨域资源共享\" class=\"headerlink\" title=\"CORS:跨域资源共享\"></a>CORS:跨域资源共享</h2><p>(Cross-Origin Resource Sharing），跨源资源共享，是W3C的一个工作草案，定义了在必须访问跨源资源时，浏览器与服务器该如何沟通。其背后的基本思想是使用自定义的HTTP头部，让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是应该失败。</p>\n<h3 id=\"IE对CORS的实现：\"><a href=\"#IE对CORS的实现：\" class=\"headerlink\" title=\"IE对CORS的实现：\"></a><code>IE</code>对<code>CORS</code>的实现：</h3><p>引入了<code>XDR</code>（XDomainREquest），这个与XHR类似，但能安全可靠的实现跨域通信。与XHR的不同之处：</p>\n<p><code>cookie</code>不会随便请求发送，也不会随响应返回。<br>智能设置请求头部信息中的 <code>Content-Type</code>字段 。<br>不能访问响应头部信息 。<br>只支持<code>get</code>和<code>post</code>请求。<br><code>XDR</code>使用方法:</p>\n<p>1、创建XDR对象；<br>2、调用open（）方法，这里open方法只有两个参数，因为所有XDR请求都是异步执行的；</p>\n<p>3、调用send（）方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xdr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\"> xdr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     alert(xdr.responseText);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> xdr.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//错误处理程序</span></span><br><span class=\"line\">     alert(<span class=\"string\">\"An error occurred.\"</span>);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> xdr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\"> xdr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>由于导致<code>XDR</code>请求失败的因素有很多，因此不要忘记通过<code>onerror</code>事件处理程序来捕获该事件。</p>\n<p>为了支持<code>post</code>请求，<code>XDR</code>对象提供了<code>contentType</code>属性，用来表示发送数据的格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xdr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\">xdr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(xdr.responseText);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xdr.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//错误处理程序</span></span><br><span class=\"line\">    alert(<span class=\"string\">\"An error occurred.\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xdr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\">xdr.contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span>;</span><br><span class=\"line\">xdr.send(<span class=\"string\">\"name1=value1&amp;name2=value2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个属性是通过XDR对象影响头部信息的唯一方式。</p>\n<h3 id=\"其他浏览器对CORS的实现\"><a href=\"#其他浏览器对CORS的实现\" class=\"headerlink\" title=\"其他浏览器对CORS的实现\"></a>其他浏览器对CORS的实现</h3><p>要请求位于另一个域的资源，使用标准的<code>XHR</code>对象并在<code>open（）</code>方法传入绝对url：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr =createXHR();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xhr.readyState===<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span> || xhr.status===<span class=\"number\">304</span>))&#123;</span><br><span class=\"line\">            alert(xhr.responseText)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"Request was unsuccessful:\"</span> +xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>,<span class=\"string\">\"http://www.somewhert-else.com/page/\"</span>);</span><br><span class=\"line\">xdr.send(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>要使所有浏览器都支持简单的请求，检测<code>XHR</code>是否支持<code>CORS</code>的最简单的方式，就是检查是否存在<code>withCredentials</code> 属性。在结合检测<code>XDomainRequest</code>对象是否存在，就可以兼顾所有浏览器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCORSRequest</span> (<span class=\"params\">method,url</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"withCredentails\"</span> <span class=\"keyword\">in</span> xhr) &#123;</span><br><span class=\"line\">        xhr.open(method,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XDomainRequest != <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XDomainRequest();</span><br><span class=\"line\">        xhr.open(method,url);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = createCORSRequest(<span class=\"string\">\"get\"</span>,<span class=\"string\">\"http://www.somewhere-else.com/page/\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(request) &#123;</span><br><span class=\"line\">    request.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//对responseText处理</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图像Ping\"><a href=\"#图像Ping\" class=\"headerlink\" title=\"图像Ping\"></a>图像Ping</h2><p>一个网页可以从任何网页中加载图像，不用担心跨域不跨域。使用它们的<code>onload</code>和<code>onerror</code>事件处理程序来确定是否接受到了响应。</p>\n<p>图像<code>Ping</code>是与服务器进行简单/单向的跨域通信的一种方式。请求的数据是通过查询字符串的方式发送的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.onload =img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done!\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.src = <span class=\"string\">\"http://www.example.com/test?name=Nicholas\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>关于<code>JSONP</code>内容可以查看：<a href=\"http://www.hbbaly.com/2017/10/08/jsonp/\" target=\"_blank\" rel=\"noopener\">http://www.hbbaly.com/2017/10/08/jsonp/</a></p>\n<h2 id=\"Comet\"><a href=\"#Comet\" class=\"headerlink\" title=\"Comet\"></a>Comet</h2><p><code>Ajax</code>是一种从页面向服务器请求数据的技术，而<code>Comet</code>是一种服务器向页面推送数据的技术。<code>Comet</code>能够让信息近乎实时的被推送到页面上，非常适合处理体育比赛的分数和股票报价。</p>\n<p>有两种实现<code>Comet</code>的方式：长轮询和流。</p>\n<p>长轮询是短轮询的一个翻版，即浏览器定时向服务器发送请求，看有没有更新的数据。页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，接着又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。</p>\n<p><code>HTTP</code>流： 浏览器向服务器发送一个请求，而服务器保持连接打开，然后周期性的向浏览器发送数据。</p>\n<p>用XHR对象实现<code>HTTP</code>流的典型代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStreamingClient</span> (<span class=\"params\">url,progress,finished</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">var</span> received = <span class=\"number\">0</span>;</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"get\"</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//只取得最近数据并调整计数器</span></span><br><span class=\"line\">            result = xhr.responseText.substring(received);</span><br><span class=\"line\">            received += result.length;</span><br><span class=\"line\"><span class=\"comment\">//调用progress函数</span></span><br><span class=\"line\">            progress(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            finished(xhr.responseText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> client = createStreamingClient(<span class=\"string\">\"s.php\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Received\"</span> + data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SSE-服务器发送事件\"><a href=\"#SSE-服务器发送事件\" class=\"headerlink\" title=\"SSE 服务器发送事件\"></a>SSE 服务器发送事件</h2><p><code>SSE</code>是围绕只读<code>Comet</code>交互推出的<code>API</code>，用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。</p>\n<p>首先，要创建一个新的<code>EventSource</code>对象，并传入一个入口点，传入的<code>URL</code>必须与原页面同源。<code>EventSource</code>的实例有一个<code>readyState</code>属性，值为0表示正连接到服务器，1为表示打开了连接，2为表示关闭了连接。</p>\n<h2 id=\"Web-Sockets\"><a href=\"#Web-Sockets\" class=\"headerlink\" title=\"Web Sockets\"></a>Web Sockets</h2><p>其目标是在一个单独的持久连接上提供全双工/双向通信。<br>在<code>JavaScript</code>中创建了<code>Web Sockets</code>之后，会有一个<code>HTTP</code>请求发送到服务器以发起连接，在取得服务器响应后，建立的连接会使用<code>HTTP</code>升级从<code>HTTP</code>协议交换为<code>Web Socket</code> 协议。<br>使用自定义协议的好处是：能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。</p>\n<p>1、实例<code>WebSocket</code>对象，并传入<code>URL</code></p>\n<p><code>var socket = new WebSocket(&quot;ws://www.example.com/server.php&quot;);</code><br><code>必须传入绝对URL\n实例化</code>WebSocket`对象后，浏览器会马上尝试创建连接。</p>\n<p>2、发送和接收数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message =&#123;</span><br><span class=\"line\">  time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">  text:<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">socket.send(<span class=\"built_in\">JSON</span>.stringify(message));</span><br></pre></td></tr></table></figure>\n\n<p><code>WebSocket</code>只能通过连接发送纯文本数据，因此将数据序列化为<code>JSON</code>字符串。</p>\n<p>参考资料：JavaScript高级程序设计</p>\n"},{"title":"正则表达式","comments":1,"description":"正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。","date":"2016-09-22T02:29:10.000Z","keywords":"正则表达式","_content":"\n## 正则表达式\n用来匹配某一段字符串满不满足某个规则的对象。\n\n找出字符里面的数字集合['123','60','753']：\n\n```js\nvar str = \"123gou60dan753\";\nvar arr = [];\nvar s = \"\";\nfor (var i = 0,length=str.length; i < length; i++) {\n  if ( !isNaN(str.charAt(i)) ){\n    s += str.charAt(i);\n  }else if ( s ){\n    arr.push( s );\n    s = \"\";\n  }\n}\nif ( s ){\n  arr.push( s );\n}\n```\n\n使用正则我们只需一行代码搞定：\n\n```js\nvar str = \"123gou888dan753\";\nvar arr = str.match(/\\d+/g);\n```\n\n\n### reg.test(str)\n\n返回一个布尔值，匹配成功返回`true`，匹配失败返回`false`。\n\n/正则表达式主体/修饰符(可选)，如下：\n\n```js\nvar r = /123/;\nvar str = \"狗蛋123\";\nalert( r.test( str ) ); //true;\n```\n\n如果匹配的是字符串该怎么转化：\n\n```js\nvar a = \"123\";\nvar r = new RegExp(a);\nvar str = \"狗蛋123\";\nalert( r.test( str ) );   //true;\n```\n\n## 转义：\\\n\n1. 当我们在匹配有特殊意义的字符的时候，我们需要加 \\ 符号。特殊字符有哪些？\n/ \\ { } ? + * ( )\n\n2. \\符号，在配合一些特定的字符的时候，有特殊的意义。\\n \\r \\t 字符串里面也有这些\n\\S 非空格\n\n\\s 空格\n\n\\d 数字\n\n\\D 非数字\n\n\\w 字符（数字、字母、_）\n\n\\W 非字符\n\n\\b 独立部分 起始、结束、连词符(除了\\w包含的之外)\n\n\\B 非独立部分\n\n**匹配一个空格**\n\n```js\nvar reg = /\\S/;\nvar str = \"789  8\";\nalert( reg.test(str) );  //true;\n```\n\n**匹配两个数字**\n\n```js\nvar reg = /\\d\\d/;\nvar str = \"Goudan00\";\nalert( reg.test(str) );  //true;\n```\n\n**匹配字符**\n\n```js\nvar reg = /\\w/;\nvar str =\"狗_蛋\";\nalert( reg.test(str) ); //true;\n```\n\n**匹配以1234开头或者结尾**\n\n```js\nvar reg = /\\b1234\\b/;\nvar str = \"1234-dgfdgsd\";\nalert( reg.test(str) ); //true;\n```\n\n## 量词\n\n量词：{}\n\n```js\n{5} n = 5\n{1,3} 1 <= n <= 3\n{2,} 2 <= n\n```\n\n有几种非常特殊的量词，可以用特定的符号来表示\n\n```js\n{0,1} ?\n{1,} +\n{0,} *\nvar r = /1{5}/;\nvar str = \"1狗蛋11111111\";\nalert( r.test( str ) ); //true\n```\n\n## match（）\n\n`str.match(reg)`,返回一个数组，包含着匹配内容的类数组，如果匹配不成功返回`null`\n\n```js\nvar reg = /1{3,}/;\nvar str = \"狗蛋111111\";\nconsole.log( str.match(reg) );  // 0：\"111111\"\n```\n\n## 标识\n\ni 不区分大小写\n\nm 换行匹配\n\ng 全局匹配\n\n```js\nvar reg = /1{2}/g;\nvar str = \"11狗11蛋11\";\nconsole.log( str.match(reg) ); //0：\"11\"，1:\"11，\"2:\"11\"，length:3\nvar reg = /abc/gi;\nvar str = \"Abc\";\nconsole.log( str.match(reg) ); //0:'Abc'\n```\n\nRegExp的使用\n\n```js\nvar x = \"ig\";\nvar str = \"123Gou888dgn753\";\nvar reg = new RegExp(\"\\g\" , x);\nconsole.log( str.match(reg) ); //[\"G\", \"g\"]\n```\n\n## 子集\n\n```js\nvar reg = /狗蛋((12)(3))/;\nvar str = \"去去去狗蛋123我我我\";\nconsole.log( str.match(reg) );  // 0:\"狗蛋123\",1:\"123\",2:\"12\",3:\"3\"\n```\n\n`match` 在匹配加了标识g的正则的时候，成功的话返回的是一个真正的数组，并且不包含子集。\n\n```js\nvar reg = /1212(12){2,3}/g;\nvar str = \"12121212\";\nconsole.log( str.match(reg) );  // [\"12121212\"]\n```\n\n## 字符集\n字符集： []\n\n1. 一段连续的内容：\n\n[0-9]\n\n[a-z]\n\n[A-Z]\n\n[\\u4e00-\\u9fa5]\n\n2. 或者 |\n\n3. 除了 [^]\n\n放在字符集最开始才有除了的意思，否则就是没有特殊意义\n\n注意：\n\n①：- 在字符集里面（可能）是有特殊意义的，所以在字符集里面要匹配 \"-\" 本身最好加 \\；\n\n②：- 在字符集之外是没有特殊意义的；\n\n③：大多数在正则里面有特殊意义的字符，在字符集里面都没有特殊意义；(){}?+*\n\n```js\nvar reg = /[0-9]/;\nvar str = \"hsha12\";\nconsole.log( str.match(reg) ); //0:\"1\"\nvar reg = /a|bc/g; //整体的或者   a  bc   \nvar str = \"ac123bc\";\nconsole.log( str.match(reg) );\nvar reg = /(a|b)c/g; //局部的子集内的或者  ac  bc\nvar str = \"ac123bc\";\nconsole.log( str.match(reg) );\nvar reg = /[a\\-0]/g;\nvar str = \"a-b10\";\nconsole.log( str.match(reg) ); //[\"a\", \"-\", \"0\"]\nvar reg = /[(a{8,9})]/;\nvar str = \"a1bxa2a\";\nconsole.log( str.match(reg) ); //[\"a\", index: 0, input: \"a1bxa2a\"]\nvar reg = /[a^b]/g;\nvar str = \"^ac\";\nconsole.log( str.match(reg) ); //[\"^\", \"a\"]\n```\n\n## 使用字符串方法\n\n1. 字符集后面也能加量词\n\n2. 数字转义是有特殊意义的，在字符串里面也是一样，但是不需要去了解是什么东西\n\n```js\nvar reg = /[abc]{3}/;\nvar str = \"cab\";\nconsole.log( str.match( reg ) );//0:\"cab\"\nvar reg = /a\\1/;\nvar str = \"aaa\\1\";\nconsole.log( str.match( reg ) );\n```\n\n`search()` 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。匹配失败返回-1。\n\n```js\nvar reg = /hbb/;\nvar str = \"hbbalyhbb\";\nconsole.log( str.match( reg ) );//[\"hbb\", index: 0, input: \"hbbalyhbb\"]\n```\n\n`split（`）方法：以XX为分隔符，被分割的组成一个数组。\n\n```js\nvar reg = /[bc]/;\nvar str = \"xybqwercnpm\";\nconsole.log( str.split(reg) ); // [\"xy\", \"qwer\", \"npm\"]\nstr.replace(reg ,str)，str 字符串，reg 正则表达式。\n```\n\n1. string 将匹配成功的部分替换为 该字符串。\n\n2. function 将匹配成功的部分替换为 该函数的返回值，该函数形参分别对应 ==== 匹配整体，第一个子项，第二个子项…………\n\n最终返回新字符串（不改变原来的字符串str）\n\n```js\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace( reg , \"6666666\" ); //ly666666666666666666666\nvar str = \"abc\";\nvar nS = str.replace(\"a\" , \"x\");\nconsole.log( nS );//xbc\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace(reg , function () {\nreturn \"x\";\n});\nconsole.log( nS ); //lyxxx\nvar reg = /hbb(a)(ly)/;\nvar str = \"ssshbbalyppp\";\nvar nS = str.replace(reg , function (i,j,k) {\n    console.log( i + \"---\" + j + \"---\" + k ); //hbbaly---a---ly\n});\nconsole.log( nS ); //sssundefinedppp\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace(reg , function (f) {\nreturn f+\"x\";\n});\nconsole.log( nS ); //lyaxbxcx\n```\n\n## 特殊字符\n.  ：正则里面代表任意字符\n\n^ ： 在字符集之外，代表起始部分\n\n$ ： 代表结束部分\n\n特殊字符：\n\n/ \\ { } ( ) [ ] . ^ $ + * ? |（字符集里面要注意与上面不同）。\n\n惰性： 给任意量词后加 ? 变成惰性匹配，尽量往少着匹配\n\n```js\nvar reg = /./;\nvar str = \"bagb\";\nconsole.log( str.match( reg ) );  //0:\"b\"\nvar reg = /^b/;\nvar str = \"bagb\";\nconsole.log( str.match( reg ) );  //[\"b\", index: 0, input: \"bagb\"]\nvar reg = /a{2,4}?/;\nvar str = \"aaaaa\";\nconsole.log( str.match( reg ) );  //[\"aa\", index: 0, input: \"aaaaa\"]\n```\n\n常用的一些正则表达式：\n\n```js\nqq : /^[1-9]\\d{4,9}$/,//QQ号\nuser : /^[a-zA-Z_]\\w{5,17}$/,//用户名\npwd : /^[\\w~!@#%$^&*()+{}:\"<>?|`,/\\[\\]\\-\\\\\\.]{6,18}$/,//密码\ntel : /^1[3-8]\\d{9}$/,//手机号\nmail : /^[1-9a-z_]\\w{5,17}@[\\da-z]{2,}(\\.[a-z]{2,4}){1,2}$/i,//邮箱\nIDCard : /^[1-9]\\d{16}[\\dx]$/i//身份证号\n```","source":"_posts/js-15.md","raw":"---\ntitle: 正则表达式\ncomments: true\ndescription: 正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。\ntags: \"js\"\ndate: 2016-9-22 10:29:10\ncategories: \"regular\"\nkeywords: 正则表达式\n---\n\n## 正则表达式\n用来匹配某一段字符串满不满足某个规则的对象。\n\n找出字符里面的数字集合['123','60','753']：\n\n```js\nvar str = \"123gou60dan753\";\nvar arr = [];\nvar s = \"\";\nfor (var i = 0,length=str.length; i < length; i++) {\n  if ( !isNaN(str.charAt(i)) ){\n    s += str.charAt(i);\n  }else if ( s ){\n    arr.push( s );\n    s = \"\";\n  }\n}\nif ( s ){\n  arr.push( s );\n}\n```\n\n使用正则我们只需一行代码搞定：\n\n```js\nvar str = \"123gou888dan753\";\nvar arr = str.match(/\\d+/g);\n```\n\n\n### reg.test(str)\n\n返回一个布尔值，匹配成功返回`true`，匹配失败返回`false`。\n\n/正则表达式主体/修饰符(可选)，如下：\n\n```js\nvar r = /123/;\nvar str = \"狗蛋123\";\nalert( r.test( str ) ); //true;\n```\n\n如果匹配的是字符串该怎么转化：\n\n```js\nvar a = \"123\";\nvar r = new RegExp(a);\nvar str = \"狗蛋123\";\nalert( r.test( str ) );   //true;\n```\n\n## 转义：\\\n\n1. 当我们在匹配有特殊意义的字符的时候，我们需要加 \\ 符号。特殊字符有哪些？\n/ \\ { } ? + * ( )\n\n2. \\符号，在配合一些特定的字符的时候，有特殊的意义。\\n \\r \\t 字符串里面也有这些\n\\S 非空格\n\n\\s 空格\n\n\\d 数字\n\n\\D 非数字\n\n\\w 字符（数字、字母、_）\n\n\\W 非字符\n\n\\b 独立部分 起始、结束、连词符(除了\\w包含的之外)\n\n\\B 非独立部分\n\n**匹配一个空格**\n\n```js\nvar reg = /\\S/;\nvar str = \"789  8\";\nalert( reg.test(str) );  //true;\n```\n\n**匹配两个数字**\n\n```js\nvar reg = /\\d\\d/;\nvar str = \"Goudan00\";\nalert( reg.test(str) );  //true;\n```\n\n**匹配字符**\n\n```js\nvar reg = /\\w/;\nvar str =\"狗_蛋\";\nalert( reg.test(str) ); //true;\n```\n\n**匹配以1234开头或者结尾**\n\n```js\nvar reg = /\\b1234\\b/;\nvar str = \"1234-dgfdgsd\";\nalert( reg.test(str) ); //true;\n```\n\n## 量词\n\n量词：{}\n\n```js\n{5} n = 5\n{1,3} 1 <= n <= 3\n{2,} 2 <= n\n```\n\n有几种非常特殊的量词，可以用特定的符号来表示\n\n```js\n{0,1} ?\n{1,} +\n{0,} *\nvar r = /1{5}/;\nvar str = \"1狗蛋11111111\";\nalert( r.test( str ) ); //true\n```\n\n## match（）\n\n`str.match(reg)`,返回一个数组，包含着匹配内容的类数组，如果匹配不成功返回`null`\n\n```js\nvar reg = /1{3,}/;\nvar str = \"狗蛋111111\";\nconsole.log( str.match(reg) );  // 0：\"111111\"\n```\n\n## 标识\n\ni 不区分大小写\n\nm 换行匹配\n\ng 全局匹配\n\n```js\nvar reg = /1{2}/g;\nvar str = \"11狗11蛋11\";\nconsole.log( str.match(reg) ); //0：\"11\"，1:\"11，\"2:\"11\"，length:3\nvar reg = /abc/gi;\nvar str = \"Abc\";\nconsole.log( str.match(reg) ); //0:'Abc'\n```\n\nRegExp的使用\n\n```js\nvar x = \"ig\";\nvar str = \"123Gou888dgn753\";\nvar reg = new RegExp(\"\\g\" , x);\nconsole.log( str.match(reg) ); //[\"G\", \"g\"]\n```\n\n## 子集\n\n```js\nvar reg = /狗蛋((12)(3))/;\nvar str = \"去去去狗蛋123我我我\";\nconsole.log( str.match(reg) );  // 0:\"狗蛋123\",1:\"123\",2:\"12\",3:\"3\"\n```\n\n`match` 在匹配加了标识g的正则的时候，成功的话返回的是一个真正的数组，并且不包含子集。\n\n```js\nvar reg = /1212(12){2,3}/g;\nvar str = \"12121212\";\nconsole.log( str.match(reg) );  // [\"12121212\"]\n```\n\n## 字符集\n字符集： []\n\n1. 一段连续的内容：\n\n[0-9]\n\n[a-z]\n\n[A-Z]\n\n[\\u4e00-\\u9fa5]\n\n2. 或者 |\n\n3. 除了 [^]\n\n放在字符集最开始才有除了的意思，否则就是没有特殊意义\n\n注意：\n\n①：- 在字符集里面（可能）是有特殊意义的，所以在字符集里面要匹配 \"-\" 本身最好加 \\；\n\n②：- 在字符集之外是没有特殊意义的；\n\n③：大多数在正则里面有特殊意义的字符，在字符集里面都没有特殊意义；(){}?+*\n\n```js\nvar reg = /[0-9]/;\nvar str = \"hsha12\";\nconsole.log( str.match(reg) ); //0:\"1\"\nvar reg = /a|bc/g; //整体的或者   a  bc   \nvar str = \"ac123bc\";\nconsole.log( str.match(reg) );\nvar reg = /(a|b)c/g; //局部的子集内的或者  ac  bc\nvar str = \"ac123bc\";\nconsole.log( str.match(reg) );\nvar reg = /[a\\-0]/g;\nvar str = \"a-b10\";\nconsole.log( str.match(reg) ); //[\"a\", \"-\", \"0\"]\nvar reg = /[(a{8,9})]/;\nvar str = \"a1bxa2a\";\nconsole.log( str.match(reg) ); //[\"a\", index: 0, input: \"a1bxa2a\"]\nvar reg = /[a^b]/g;\nvar str = \"^ac\";\nconsole.log( str.match(reg) ); //[\"^\", \"a\"]\n```\n\n## 使用字符串方法\n\n1. 字符集后面也能加量词\n\n2. 数字转义是有特殊意义的，在字符串里面也是一样，但是不需要去了解是什么东西\n\n```js\nvar reg = /[abc]{3}/;\nvar str = \"cab\";\nconsole.log( str.match( reg ) );//0:\"cab\"\nvar reg = /a\\1/;\nvar str = \"aaa\\1\";\nconsole.log( str.match( reg ) );\n```\n\n`search()` 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。匹配失败返回-1。\n\n```js\nvar reg = /hbb/;\nvar str = \"hbbalyhbb\";\nconsole.log( str.match( reg ) );//[\"hbb\", index: 0, input: \"hbbalyhbb\"]\n```\n\n`split（`）方法：以XX为分隔符，被分割的组成一个数组。\n\n```js\nvar reg = /[bc]/;\nvar str = \"xybqwercnpm\";\nconsole.log( str.split(reg) ); // [\"xy\", \"qwer\", \"npm\"]\nstr.replace(reg ,str)，str 字符串，reg 正则表达式。\n```\n\n1. string 将匹配成功的部分替换为 该字符串。\n\n2. function 将匹配成功的部分替换为 该函数的返回值，该函数形参分别对应 ==== 匹配整体，第一个子项，第二个子项…………\n\n最终返回新字符串（不改变原来的字符串str）\n\n```js\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace( reg , \"6666666\" ); //ly666666666666666666666\nvar str = \"abc\";\nvar nS = str.replace(\"a\" , \"x\");\nconsole.log( nS );//xbc\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace(reg , function () {\nreturn \"x\";\n});\nconsole.log( nS ); //lyxxx\nvar reg = /hbb(a)(ly)/;\nvar str = \"ssshbbalyppp\";\nvar nS = str.replace(reg , function (i,j,k) {\n    console.log( i + \"---\" + j + \"---\" + k ); //hbbaly---a---ly\n});\nconsole.log( nS ); //sssundefinedppp\nvar reg = /[abc]/g;\nvar str = \"lyabc\";\nvar nS = str.replace(reg , function (f) {\nreturn f+\"x\";\n});\nconsole.log( nS ); //lyaxbxcx\n```\n\n## 特殊字符\n.  ：正则里面代表任意字符\n\n^ ： 在字符集之外，代表起始部分\n\n$ ： 代表结束部分\n\n特殊字符：\n\n/ \\ { } ( ) [ ] . ^ $ + * ? |（字符集里面要注意与上面不同）。\n\n惰性： 给任意量词后加 ? 变成惰性匹配，尽量往少着匹配\n\n```js\nvar reg = /./;\nvar str = \"bagb\";\nconsole.log( str.match( reg ) );  //0:\"b\"\nvar reg = /^b/;\nvar str = \"bagb\";\nconsole.log( str.match( reg ) );  //[\"b\", index: 0, input: \"bagb\"]\nvar reg = /a{2,4}?/;\nvar str = \"aaaaa\";\nconsole.log( str.match( reg ) );  //[\"aa\", index: 0, input: \"aaaaa\"]\n```\n\n常用的一些正则表达式：\n\n```js\nqq : /^[1-9]\\d{4,9}$/,//QQ号\nuser : /^[a-zA-Z_]\\w{5,17}$/,//用户名\npwd : /^[\\w~!@#%$^&*()+{}:\"<>?|`,/\\[\\]\\-\\\\\\.]{6,18}$/,//密码\ntel : /^1[3-8]\\d{9}$/,//手机号\nmail : /^[1-9a-z_]\\w{5,17}@[\\da-z]{2,}(\\.[a-z]{2,4}){1,2}$/i,//邮箱\nIDCard : /^[1-9]\\d{16}[\\dx]$/i//身份证号\n```","slug":"js-15","published":1,"updated":"2020-12-02T06:49:34.130Z","layout":"post","photos":[],"link":"","_id":"cki71wal4002otl9kz5cbzk1x","content":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>用来匹配某一段字符串满不满足某个规则的对象。</p>\n<p>找出字符里面的数字集合[‘123’,’60’,’753’]：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123gou60dan753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length=str.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !<span class=\"built_in\">isNaN</span>(str.charAt(i)) )&#123;</span><br><span class=\"line\">    s += str.charAt(i);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( s )&#123;</span><br><span class=\"line\">    arr.push( s );</span><br><span class=\"line\">    s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( s )&#123;</span><br><span class=\"line\">  arr.push( s );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用正则我们只需一行代码搞定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123gou888dan753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reg-test-str\"><a href=\"#reg-test-str\" class=\"headerlink\" title=\"reg.test(str)\"></a>reg.test(str)</h3><p>返回一个布尔值，匹配成功返回<code>true</code>，匹配失败返回<code>false</code>。</p>\n<p>/正则表达式主体/修饰符(可选)，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/123/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋123\"</span>;</span><br><span class=\"line\">alert( r.test( str ) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果匹配的是字符串该怎么转化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋123\"</span>;</span><br><span class=\"line\">alert( r.test( str ) );   <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转义：\"><a href=\"#转义：\" class=\"headerlink\" title=\"转义：\\\"></a>转义：\\</h2><ol>\n<li><p>当我们在匹配有特殊意义的字符的时候，我们需要加 \\ 符号。特殊字符有哪些？<br>/ \\ { } ? + * ( )</p>\n</li>\n<li><p>\\符号，在配合一些特定的字符的时候，有特殊的意义。\\n \\r \\t 字符串里面也有这些<br>\\S 非空格</p>\n</li>\n</ol>\n<p>\\s 空格</p>\n<p>\\d 数字</p>\n<p>\\D 非数字</p>\n<p>\\w 字符（数字、字母、_）</p>\n<p>\\W 非字符</p>\n<p>\\b 独立部分 起始、结束、连词符(除了\\w包含的之外)</p>\n<p>\\B 非独立部分</p>\n<p><strong>匹配一个空格</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\S/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"789  8\"</span>;</span><br><span class=\"line\">alert( reg.test(str) );  <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配两个数字</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d\\d/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Goudan00\"</span>;</span><br><span class=\"line\">alert( reg.test(str) );  <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配字符</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">\"狗_蛋\"</span>;</span><br><span class=\"line\">alert( reg.test(str) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配以1234开头或者结尾</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b1234\\b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"1234-dgfdgsd\"</span>;</span><br><span class=\"line\">alert( reg.test(str) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><p>量词：{}</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">5</span>&#125; n = <span class=\"number\">5</span></span><br><span class=\"line\">&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125; <span class=\"number\">1</span> &lt;= n &lt;= <span class=\"number\">3</span></span><br><span class=\"line\">&#123;<span class=\"number\">2</span>,&#125; <span class=\"number\">2</span> &lt;= n</span><br></pre></td></tr></table></figure>\n\n<p>有几种非常特殊的量词，可以用特定的符号来表示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125; ?</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>,&#125; +</span><br><span class=\"line\">&#123;<span class=\"number\">0</span>,&#125; *</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/1&#123;5&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"1狗蛋11111111\"</span>;</span><br><span class=\"line\">alert( r.test( str ) ); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"match（）\"><a href=\"#match（）\" class=\"headerlink\" title=\"match（）\"></a>match（）</h2><p><code>str.match(reg)</code>,返回一个数组，包含着匹配内容的类数组，如果匹配不成功返回<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1&#123;3,&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋111111\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// 0：\"111111\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标识\"><a href=\"#标识\" class=\"headerlink\" title=\"标识\"></a>标识</h2><p>i 不区分大小写</p>\n<p>m 换行匹配</p>\n<p>g 全局匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1&#123;2&#125;/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"11狗11蛋11\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0：\"11\"，1:\"11，\"2:\"11\"，length:3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abc/gi</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Abc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0:'Abc'</span></span><br></pre></td></tr></table></figure>\n\n<p>RegExp的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"ig\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123Gou888dgn753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\g\"</span> , x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"G\", \"g\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子集\"><a href=\"#子集\" class=\"headerlink\" title=\"子集\"></a>子集</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/狗蛋((12)(3))/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"去去去狗蛋123我我我\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// 0:\"狗蛋123\",1:\"123\",2:\"12\",3:\"3\"</span></span><br></pre></td></tr></table></figure>\n\n<p><code>match</code> 在匹配加了标识g的正则的时候，成功的话返回的是一个真正的数组，并且不包含子集。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1212(12)&#123;2,3&#125;/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"12121212\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// [\"12121212\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>字符集： []</p>\n<ol>\n<li>一段连续的内容：</li>\n</ol>\n<p>[0-9]</p>\n<p>[a-z]</p>\n<p>[A-Z]</p>\n<p>[\\u4e00-\\u9fa5]</p>\n<ol start=\"2\">\n<li><p>或者 |</p>\n</li>\n<li><p>除了 [^]</p>\n</li>\n</ol>\n<p>放在字符集最开始才有除了的意思，否则就是没有特殊意义</p>\n<p>注意：</p>\n<p>①：- 在字符集里面（可能）是有特殊意义的，所以在字符集里面要匹配 “-“ 本身最好加 \\；</p>\n<p>②：- 在字符集之外是没有特殊意义的；</p>\n<p>③：大多数在正则里面有特殊意义的字符，在字符集里面都没有特殊意义；(){}?+*</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[0-9]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hsha12\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0:\"1\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a|bc/g</span>; <span class=\"comment\">//整体的或者   a  bc   </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ac123bc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(a|b)c/g</span>; <span class=\"comment\">//局部的子集内的或者  ac  bc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ac123bc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[a\\-0]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"a-b10\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"a\", \"-\", \"0\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[(a&#123;8,9&#125;)]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"a1bxa2a\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"a\", index: 0, input: \"a1bxa2a\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[a^b]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"^ac\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"^\", \"a\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用字符串方法\"><a href=\"#使用字符串方法\" class=\"headerlink\" title=\"使用字符串方法\"></a>使用字符串方法</h2><ol>\n<li><p>字符集后面也能加量词</p>\n</li>\n<li><p>数字转义是有特殊意义的，在字符串里面也是一样，但是不需要去了解是什么东西</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]&#123;3&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"cab\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );<span class=\"comment\">//0:\"cab\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a\\1/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"aaa\\1\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );</span><br></pre></td></tr></table></figure>\n\n<p><code>search()</code> 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。匹配失败返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/hbb/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hbbalyhbb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );<span class=\"comment\">//[\"hbb\", index: 0, input: \"hbbalyhbb\"]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>split（</code>）方法：以XX为分隔符，被分割的组成一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[bc]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"xybqwercnpm\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.split(reg) ); <span class=\"comment\">// [\"xy\", \"qwer\", \"npm\"]</span></span><br><span class=\"line\">str.replace(reg ,str)，str 字符串，reg 正则表达式。</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>string 将匹配成功的部分替换为 该字符串。</p>\n</li>\n<li><p>function 将匹配成功的部分替换为 该函数的返回值，该函数形参分别对应 ==== 匹配整体，第一个子项，第二个子项…………</p>\n</li>\n</ol>\n<p>最终返回新字符串（不改变原来的字符串str）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace( reg , <span class=\"string\">\"6666666\"</span> ); <span class=\"comment\">//ly666666666666666666666</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(<span class=\"string\">\"a\"</span> , <span class=\"string\">\"x\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS );<span class=\"comment\">//xbc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//lyxxx</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/hbb(a)(ly)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ssshbbalyppp\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i,j,k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i + <span class=\"string\">\"---\"</span> + j + <span class=\"string\">\"---\"</span> + k ); <span class=\"comment\">//hbbaly---a---ly</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//sssundefinedppp</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> f+<span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//lyaxbxcx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><p>.  ：正则里面代表任意字符</p>\n<p>^ ： 在字符集之外，代表起始部分</p>\n<p>$ ： 代表结束部分</p>\n<p>特殊字符：</p>\n<p>/ \\ { } ( ) [ ] . ^ $ + * ? |（字符集里面要注意与上面不同）。</p>\n<p>惰性： 给任意量词后加 ? 变成惰性匹配，尽量往少着匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/./</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"bagb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//0:\"b\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"bagb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//[\"b\", index: 0, input: \"bagb\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a&#123;2,4&#125;?/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"aaaaa\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//[\"aa\", index: 0, input: \"aaaaa\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>常用的一些正则表达式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qq : <span class=\"regexp\">/^[1-9]\\d&#123;4,9&#125;$/</span>,<span class=\"comment\">//QQ号</span></span><br><span class=\"line\">user : <span class=\"regexp\">/^[a-zA-Z_]\\w&#123;5,17&#125;$/</span>,<span class=\"comment\">//用户名</span></span><br><span class=\"line\">pwd : <span class=\"regexp\">/^[\\w~!@#%$^&amp;*()+&#123;&#125;:\"&lt;&gt;?|`,/\\[\\]\\-\\\\\\.]&#123;6,18&#125;$/</span>,<span class=\"comment\">//密码</span></span><br><span class=\"line\">tel : <span class=\"regexp\">/^1[3-8]\\d&#123;9&#125;$/</span>,<span class=\"comment\">//手机号</span></span><br><span class=\"line\">mail : <span class=\"regexp\">/^[1-9a-z_]\\w&#123;5,17&#125;@[\\da-z]&#123;2,&#125;(\\.[a-z]&#123;2,4&#125;)&#123;1,2&#125;$/i</span>,<span class=\"comment\">//邮箱</span></span><br><span class=\"line\">IDCard : <span class=\"regexp\">/^[1-9]\\d&#123;16&#125;[\\dx]$/i</span><span class=\"comment\">//身份证号</span></span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>用来匹配某一段字符串满不满足某个规则的对象。</p>\n<p>找出字符里面的数字集合[‘123’,’60’,’753’]：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123gou60dan753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length=str.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !<span class=\"built_in\">isNaN</span>(str.charAt(i)) )&#123;</span><br><span class=\"line\">    s += str.charAt(i);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( s )&#123;</span><br><span class=\"line\">    arr.push( s );</span><br><span class=\"line\">    s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( s )&#123;</span><br><span class=\"line\">  arr.push( s );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用正则我们只需一行代码搞定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123gou888dan753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reg-test-str\"><a href=\"#reg-test-str\" class=\"headerlink\" title=\"reg.test(str)\"></a>reg.test(str)</h3><p>返回一个布尔值，匹配成功返回<code>true</code>，匹配失败返回<code>false</code>。</p>\n<p>/正则表达式主体/修饰符(可选)，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/123/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋123\"</span>;</span><br><span class=\"line\">alert( r.test( str ) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果匹配的是字符串该怎么转化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋123\"</span>;</span><br><span class=\"line\">alert( r.test( str ) );   <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转义：\"><a href=\"#转义：\" class=\"headerlink\" title=\"转义：\\\"></a>转义：\\</h2><ol>\n<li><p>当我们在匹配有特殊意义的字符的时候，我们需要加 \\ 符号。特殊字符有哪些？<br>/ \\ { } ? + * ( )</p>\n</li>\n<li><p>\\符号，在配合一些特定的字符的时候，有特殊的意义。\\n \\r \\t 字符串里面也有这些<br>\\S 非空格</p>\n</li>\n</ol>\n<p>\\s 空格</p>\n<p>\\d 数字</p>\n<p>\\D 非数字</p>\n<p>\\w 字符（数字、字母、_）</p>\n<p>\\W 非字符</p>\n<p>\\b 独立部分 起始、结束、连词符(除了\\w包含的之外)</p>\n<p>\\B 非独立部分</p>\n<p><strong>匹配一个空格</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\S/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"789  8\"</span>;</span><br><span class=\"line\">alert( reg.test(str) );  <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配两个数字</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d\\d/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Goudan00\"</span>;</span><br><span class=\"line\">alert( reg.test(str) );  <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配字符</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str =<span class=\"string\">\"狗_蛋\"</span>;</span><br><span class=\"line\">alert( reg.test(str) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>匹配以1234开头或者结尾</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b1234\\b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"1234-dgfdgsd\"</span>;</span><br><span class=\"line\">alert( reg.test(str) ); <span class=\"comment\">//true;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><p>量词：{}</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">5</span>&#125; n = <span class=\"number\">5</span></span><br><span class=\"line\">&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125; <span class=\"number\">1</span> &lt;= n &lt;= <span class=\"number\">3</span></span><br><span class=\"line\">&#123;<span class=\"number\">2</span>,&#125; <span class=\"number\">2</span> &lt;= n</span><br></pre></td></tr></table></figure>\n\n<p>有几种非常特殊的量词，可以用特定的符号来表示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125; ?</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>,&#125; +</span><br><span class=\"line\">&#123;<span class=\"number\">0</span>,&#125; *</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"regexp\">/1&#123;5&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"1狗蛋11111111\"</span>;</span><br><span class=\"line\">alert( r.test( str ) ); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"match（）\"><a href=\"#match（）\" class=\"headerlink\" title=\"match（）\"></a>match（）</h2><p><code>str.match(reg)</code>,返回一个数组，包含着匹配内容的类数组，如果匹配不成功返回<code>null</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1&#123;3,&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"狗蛋111111\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// 0：\"111111\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标识\"><a href=\"#标识\" class=\"headerlink\" title=\"标识\"></a>标识</h2><p>i 不区分大小写</p>\n<p>m 换行匹配</p>\n<p>g 全局匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1&#123;2&#125;/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"11狗11蛋11\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0：\"11\"，1:\"11，\"2:\"11\"，length:3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/abc/gi</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"Abc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0:'Abc'</span></span><br></pre></td></tr></table></figure>\n\n<p>RegExp的使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">\"ig\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123Gou888dgn753\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\g\"</span> , x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"G\", \"g\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子集\"><a href=\"#子集\" class=\"headerlink\" title=\"子集\"></a>子集</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/狗蛋((12)(3))/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"去去去狗蛋123我我我\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// 0:\"狗蛋123\",1:\"123\",2:\"12\",3:\"3\"</span></span><br></pre></td></tr></table></figure>\n\n<p><code>match</code> 在匹配加了标识g的正则的时候，成功的话返回的是一个真正的数组，并且不包含子集。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/1212(12)&#123;2,3&#125;/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"12121212\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );  <span class=\"comment\">// [\"12121212\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>字符集： []</p>\n<ol>\n<li>一段连续的内容：</li>\n</ol>\n<p>[0-9]</p>\n<p>[a-z]</p>\n<p>[A-Z]</p>\n<p>[\\u4e00-\\u9fa5]</p>\n<ol start=\"2\">\n<li><p>或者 |</p>\n</li>\n<li><p>除了 [^]</p>\n</li>\n</ol>\n<p>放在字符集最开始才有除了的意思，否则就是没有特殊意义</p>\n<p>注意：</p>\n<p>①：- 在字符集里面（可能）是有特殊意义的，所以在字符集里面要匹配 “-“ 本身最好加 \\；</p>\n<p>②：- 在字符集之外是没有特殊意义的；</p>\n<p>③：大多数在正则里面有特殊意义的字符，在字符集里面都没有特殊意义；(){}?+*</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[0-9]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hsha12\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//0:\"1\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a|bc/g</span>; <span class=\"comment\">//整体的或者   a  bc   </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ac123bc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(a|b)c/g</span>; <span class=\"comment\">//局部的子集内的或者  ac  bc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ac123bc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) );</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[a\\-0]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"a-b10\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"a\", \"-\", \"0\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[(a&#123;8,9&#125;)]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"a1bxa2a\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"a\", index: 0, input: \"a1bxa2a\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[a^b]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"^ac\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match(reg) ); <span class=\"comment\">//[\"^\", \"a\"]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用字符串方法\"><a href=\"#使用字符串方法\" class=\"headerlink\" title=\"使用字符串方法\"></a>使用字符串方法</h2><ol>\n<li><p>字符集后面也能加量词</p>\n</li>\n<li><p>数字转义是有特殊意义的，在字符串里面也是一样，但是不需要去了解是什么东西</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]&#123;3&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"cab\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );<span class=\"comment\">//0:\"cab\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a\\1/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"aaa\\1\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );</span><br></pre></td></tr></table></figure>\n\n<p><code>search()</code> 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。匹配失败返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/hbb/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hbbalyhbb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );<span class=\"comment\">//[\"hbb\", index: 0, input: \"hbbalyhbb\"]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>split（</code>）方法：以XX为分隔符，被分割的组成一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[bc]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"xybqwercnpm\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.split(reg) ); <span class=\"comment\">// [\"xy\", \"qwer\", \"npm\"]</span></span><br><span class=\"line\">str.replace(reg ,str)，str 字符串，reg 正则表达式。</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>string 将匹配成功的部分替换为 该字符串。</p>\n</li>\n<li><p>function 将匹配成功的部分替换为 该函数的返回值，该函数形参分别对应 ==== 匹配整体，第一个子项，第二个子项…………</p>\n</li>\n</ol>\n<p>最终返回新字符串（不改变原来的字符串str）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace( reg , <span class=\"string\">\"6666666\"</span> ); <span class=\"comment\">//ly666666666666666666666</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(<span class=\"string\">\"a\"</span> , <span class=\"string\">\"x\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS );<span class=\"comment\">//xbc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//lyxxx</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/hbb(a)(ly)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"ssshbbalyppp\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i,j,k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i + <span class=\"string\">\"---\"</span> + j + <span class=\"string\">\"---\"</span> + k ); <span class=\"comment\">//hbbaly---a---ly</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//sssundefinedppp</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[abc]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"lyabc\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nS = str.replace(reg , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> f+<span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( nS ); <span class=\"comment\">//lyaxbxcx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><p>.  ：正则里面代表任意字符</p>\n<p>^ ： 在字符集之外，代表起始部分</p>\n<p>$ ： 代表结束部分</p>\n<p>特殊字符：</p>\n<p>/ \\ { } ( ) [ ] . ^ $ + * ? |（字符集里面要注意与上面不同）。</p>\n<p>惰性： 给任意量词后加 ? 变成惰性匹配，尽量往少着匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/./</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"bagb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//0:\"b\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"bagb\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//[\"b\", index: 0, input: \"bagb\"]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a&#123;2,4&#125;?/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"aaaaa\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( str.match( reg ) );  <span class=\"comment\">//[\"aa\", index: 0, input: \"aaaaa\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>常用的一些正则表达式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qq : <span class=\"regexp\">/^[1-9]\\d&#123;4,9&#125;$/</span>,<span class=\"comment\">//QQ号</span></span><br><span class=\"line\">user : <span class=\"regexp\">/^[a-zA-Z_]\\w&#123;5,17&#125;$/</span>,<span class=\"comment\">//用户名</span></span><br><span class=\"line\">pwd : <span class=\"regexp\">/^[\\w~!@#%$^&amp;*()+&#123;&#125;:\"&lt;&gt;?|`,/\\[\\]\\-\\\\\\.]&#123;6,18&#125;$/</span>,<span class=\"comment\">//密码</span></span><br><span class=\"line\">tel : <span class=\"regexp\">/^1[3-8]\\d&#123;9&#125;$/</span>,<span class=\"comment\">//手机号</span></span><br><span class=\"line\">mail : <span class=\"regexp\">/^[1-9a-z_]\\w&#123;5,17&#125;@[\\da-z]&#123;2,&#125;(\\.[a-z]&#123;2,4&#125;)&#123;1,2&#125;$/i</span>,<span class=\"comment\">//邮箱</span></span><br><span class=\"line\">IDCard : <span class=\"regexp\">/^[1-9]\\d&#123;16&#125;[\\dx]$/i</span><span class=\"comment\">//身份证号</span></span><br></pre></td></tr></table></figure>"},{"title":"let与const命令","comments":1,"description":"let与const命令","date":"2016-06-19T02:29:10.000Z","keywords":"let与const命令","_content":"\n## let\n\n`let`命令与`var`命令类似，但是差别也是很大。\n\n（1）`let`命令只在`let`命令所在的代码块内有效。比如在`for`循环中\n\n```js\nfor(var i=0;i<5;i++){\n  console.log(i)  //0,1,2,3,4\n}\nconsole.log(i)  //5\nfor(let j = 0;j<5;j++){\n  console.log(j)   //0,1,2,3,4\n}\nconsole.log(j)  //Uncaught ReferenceError: j is not defined\n```\n\n计数器`j`只在`for`循环体内有效，在循环体外引用就会报错\n（2）`var` 存在变量提升，`let`不存在\n\n```js\nconsole.log(a)  // undefined\nvar a = 1\nconsole.log(b)  //b is not defined\nlet b = 0\n```\n\n（3） let不允许在同一个作用于内，声明同一个变量\n\n```js\n{\n    let a = 1\n    var a = 0  //Identifier 'a' has already been declared\n}\n{\n    let a = 1\n    let a = 0  //Identifier 'a' has already been declared\n}\n```\n\n（4）在代码块内，使用let命令声明变量之前，该变量都是不可用的\n```js\nvar a = 0\nfunction func(){\n    console.log(a)   //Uncaught ReferenceError: a is not defined\n    let a = 1;\n    console.log(a)   //1\n}\nfunc()\n```\n\n我们可以看到在使用`let`的时候，`func`函数形成了块级作用域，使用`let`命令声明变量之前，该变量都是不可用的。\n\n## const\n\n（1）const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n```js\nconst a = 1;\na = 1;   //Assignment to constant variable.\n```\n\n（2）如果`const`只声明不赋值，就会报错。\n\n```\nconst a ;  //Uncaught SyntaxError: Missing initializer in const declaration\n```\n（3）`const`的作用域与`let`命令相同：只在声明所在的块级作用域内有效，与`let`一样不可重复声明，在代码块内，使用`const`命令声明变量之前，该变量都是不可用的。\n\n（4）`const`实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\n\n```js\nconst arr = []\narr.push('a'),\nconsole.log(arr,arr.length) // ['a'],1\n arr = ['a']   //Uncaught TypeError: Assignment to constant variable\n//\nconst json = {\n    name:'hbb'\n}\njson.age = 20\nconsole.log(json)\njson = {\n    name:'hbb',\n    age:20\n}   //Uncaught TypeError: Assignment to constant variable\n\n```","source":"_posts/js-16.md","raw":"---\ntitle: let与const命令\ncomments: true\ndescription: let与const命令\ntags: \"es6\"\ndate: 2016-6-19 10:29:10\ncategories: \"js\"\nkeywords: let与const命令\n---\n\n## let\n\n`let`命令与`var`命令类似，但是差别也是很大。\n\n（1）`let`命令只在`let`命令所在的代码块内有效。比如在`for`循环中\n\n```js\nfor(var i=0;i<5;i++){\n  console.log(i)  //0,1,2,3,4\n}\nconsole.log(i)  //5\nfor(let j = 0;j<5;j++){\n  console.log(j)   //0,1,2,3,4\n}\nconsole.log(j)  //Uncaught ReferenceError: j is not defined\n```\n\n计数器`j`只在`for`循环体内有效，在循环体外引用就会报错\n（2）`var` 存在变量提升，`let`不存在\n\n```js\nconsole.log(a)  // undefined\nvar a = 1\nconsole.log(b)  //b is not defined\nlet b = 0\n```\n\n（3） let不允许在同一个作用于内，声明同一个变量\n\n```js\n{\n    let a = 1\n    var a = 0  //Identifier 'a' has already been declared\n}\n{\n    let a = 1\n    let a = 0  //Identifier 'a' has already been declared\n}\n```\n\n（4）在代码块内，使用let命令声明变量之前，该变量都是不可用的\n```js\nvar a = 0\nfunction func(){\n    console.log(a)   //Uncaught ReferenceError: a is not defined\n    let a = 1;\n    console.log(a)   //1\n}\nfunc()\n```\n\n我们可以看到在使用`let`的时候，`func`函数形成了块级作用域，使用`let`命令声明变量之前，该变量都是不可用的。\n\n## const\n\n（1）const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n```js\nconst a = 1;\na = 1;   //Assignment to constant variable.\n```\n\n（2）如果`const`只声明不赋值，就会报错。\n\n```\nconst a ;  //Uncaught SyntaxError: Missing initializer in const declaration\n```\n（3）`const`的作用域与`let`命令相同：只在声明所在的块级作用域内有效，与`let`一样不可重复声明，在代码块内，使用`const`命令声明变量之前，该变量都是不可用的。\n\n（4）`const`实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。\n\n```js\nconst arr = []\narr.push('a'),\nconsole.log(arr,arr.length) // ['a'],1\n arr = ['a']   //Uncaught TypeError: Assignment to constant variable\n//\nconst json = {\n    name:'hbb'\n}\njson.age = 20\nconsole.log(json)\njson = {\n    name:'hbb',\n    age:20\n}   //Uncaught TypeError: Assignment to constant variable\n\n```","slug":"js-16","published":1,"updated":"2020-12-02T06:49:34.131Z","layout":"post","photos":[],"link":"","_id":"cki71wal5002rtl9kvyldes20","content":"<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p><code>let</code>命令与<code>var</code>命令类似，但是差别也是很大。</p>\n<p>（1）<code>let</code>命令只在<code>let</code>命令所在的代码块内有效。比如在<code>for</code>循环中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j)   <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j)  <span class=\"comment\">//Uncaught ReferenceError: j is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>计数器<code>j</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错<br>（2）<code>var</code> 存在变量提升，<code>let</code>不存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)  <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>（3） let不允许在同一个作用于内，声明同一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（4）在代码块内，使用let命令声明变量之前，该变量都是不可用的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func()</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到在使用<code>let</code>的时候，<code>func</code>函数形成了块级作用域，使用<code>let</code>命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>（1）const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;   <span class=\"comment\">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）如果<code>const</code>只声明不赋值，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a ;  //Uncaught SyntaxError: Missing initializer in const declaration</span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效，与<code>let</code>一样不可重复声明，在代码块内，使用<code>const</code>命令声明变量之前，该变量都是不可用的。</p>\n<p>（4）<code>const</code>实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">arr.push(<span class=\"string\">'a'</span>),</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr.length) <span class=\"comment\">// ['a'],1</span></span><br><span class=\"line\"> arr = [<span class=\"string\">'a'</span>]   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json.age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p><code>let</code>命令与<code>var</code>命令类似，但是差别也是很大。</p>\n<p>（1）<code>let</code>命令只在<code>let</code>命令所在的代码块内有效。比如在<code>for</code>循环中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)  <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j)   <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j)  <span class=\"comment\">//Uncaught ReferenceError: j is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>计数器<code>j</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错<br>（2）<code>var</code> 存在变量提升，<code>let</code>不存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)  <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>（3） let不允许在同一个作用于内，声明同一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>  <span class=\"comment\">//Identifier 'a' has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（4）在代码块内，使用let命令声明变量之前，该变量都是不可用的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)   <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func()</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到在使用<code>let</code>的时候，<code>func</code>函数形成了块级作用域，使用<code>let</code>命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>（1）const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;   <span class=\"comment\">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）如果<code>const</code>只声明不赋值，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a ;  //Uncaught SyntaxError: Missing initializer in const declaration</span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效，与<code>let</code>一样不可重复声明，在代码块内，使用<code>const</code>命令声明变量之前，该变量都是不可用的。</p>\n<p>（4）<code>const</code>实际上保证的不是数值的不变，而是保证变量指向的内存地址不得改动。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">arr.push(<span class=\"string\">'a'</span>),</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr.length) <span class=\"comment\">// ['a'],1</span></span><br><span class=\"line\"> arr = [<span class=\"string\">'a'</span>]   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">json.age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">json = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;   <span class=\"comment\">//Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure>"},{"title":"变量的解构赋值","comments":1,"description":"变量的解构赋值","date":"2016-06-20T06:29:10.000Z","keywords":"变量的解构赋值","_content":"## 简介\n\n`ES6` 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。\n\n比如在`es5`时候给多个变量赋值，我们这样：\n\n```js\nvar a = 1,\n    b = 2,\n    c = 3;\n```\n在`es6`中，我们可以这样：\n\n```js\nlet [a,b,c] = [1,2,3]\n```\n\n等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n```js\nlet [a, [b, c]] = [1, [2, 3]]\nconsole.log(a, b, c) //1,2,3\nlet [e, f, g] = [1, 2, 3, 4]\nconsole.log(e, f, g) //1,2,3\nlet [h, ...arr] = [1, 2, 3, 4]\nconsole.log(h, arr) //1,[2, 3, 4]\nlet [foo, bar, str] = ['a']\nconsole.log(foo, bar, str) //a,undefined,undefined\n//结构不成功，变量的值就为undefined。\n```\n## 允许使用默认值\n\n```js\nlet [a, b = 1, c = 2] = [1, 4, 5]\nconsole.log(a, b, c) ///1,4,5\n//值得注意的是：undefined，null\nlet [d, e = 2] = [1, undefined]\nconsole.log(d, e) //1,2\nlet [f, g = 2] = [1, null]\nconsole.log(f, g) //1,null\n```\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\nlet [a = 1, b = a] = []\nconsole.log(a, b) //1,1\nlet [c = 1, d = c] = [2]\nconsole.log(c, d) //2,2\nlet [e = 4, f = e] = [1, 2]\nconsole.log(e, f) //1,2\n```\n\n## 对象的解构赋值\n\n上面基本讲的都是数组，对象也可以使用解构赋值。\n\n```js\nlet { a, b } = { a: 'hbb', b: 'ly' }\nconsole.log(a, b) //'hbb,'ly'\n```\n\n数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。\n\n```js\nlet { a: c, b: d } = { a: 'hbb', b: 'ly' }\nconsole.log(c, d) //'hbb,'ly'\n```\n\n在上例中，变量是`c`与`d`,而`a`与`b`是属性。\n\n对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n对象也可以用于嵌套结构的对象和使用默认值，解构不成功为undefined\n\n```js\nlet x;\n{ x } = { x: 1 };  //Uncaught SyntaxError: Unexpected token =\n```\n\n`JavaScript` 引擎会将`{x}`理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 `JavaScript `将其解释为代码块。\n\n```js\nlet x;\n({ x } = { x: 1 });    //不会报错\n```\n\n## 字符串的解构赋值\n\n```js\nlet [a, b, c, d] = 'string'\nconsole.log(a, b, c, d)  //s,t,r,i\n```\n\n## 函数参数的解构赋值\n\n```js\nfunction add([x, y]) {\n  console.log(x, y)\n}\nadd([1, 2])  //1,2\n```\n\n函数参数的解构也可以使用默认值。\n\n```js\nfunction add([x = 3, y = 4]) {\n  console.log(x, y)\n}\nadd([1]) //1,4\n```\n\n推荐一本很好的书，对于ES6的学习很有帮助：[《ES6标准入门（第三版）》](http://es6.ruanyifeng.com/)\n\n","source":"_posts/js-17.md","raw":"---\ntitle: 变量的解构赋值\ncomments: true\ndescription: 变量的解构赋值\ntags: \"es6\"\ndate: 2016-6-20 14:29:10\ncategories: \"js\"\nkeywords: 变量的解构赋值\n---\n## 简介\n\n`ES6` 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。\n\n比如在`es5`时候给多个变量赋值，我们这样：\n\n```js\nvar a = 1,\n    b = 2,\n    c = 3;\n```\n在`es6`中，我们可以这样：\n\n```js\nlet [a,b,c] = [1,2,3]\n```\n\n等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n```js\nlet [a, [b, c]] = [1, [2, 3]]\nconsole.log(a, b, c) //1,2,3\nlet [e, f, g] = [1, 2, 3, 4]\nconsole.log(e, f, g) //1,2,3\nlet [h, ...arr] = [1, 2, 3, 4]\nconsole.log(h, arr) //1,[2, 3, 4]\nlet [foo, bar, str] = ['a']\nconsole.log(foo, bar, str) //a,undefined,undefined\n//结构不成功，变量的值就为undefined。\n```\n## 允许使用默认值\n\n```js\nlet [a, b = 1, c = 2] = [1, 4, 5]\nconsole.log(a, b, c) ///1,4,5\n//值得注意的是：undefined，null\nlet [d, e = 2] = [1, undefined]\nconsole.log(d, e) //1,2\nlet [f, g = 2] = [1, null]\nconsole.log(f, g) //1,null\n```\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\nlet [a = 1, b = a] = []\nconsole.log(a, b) //1,1\nlet [c = 1, d = c] = [2]\nconsole.log(c, d) //2,2\nlet [e = 4, f = e] = [1, 2]\nconsole.log(e, f) //1,2\n```\n\n## 对象的解构赋值\n\n上面基本讲的都是数组，对象也可以使用解构赋值。\n\n```js\nlet { a, b } = { a: 'hbb', b: 'ly' }\nconsole.log(a, b) //'hbb,'ly'\n```\n\n数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。\n\n```js\nlet { a: c, b: d } = { a: 'hbb', b: 'ly' }\nconsole.log(c, d) //'hbb,'ly'\n```\n\n在上例中，变量是`c`与`d`,而`a`与`b`是属性。\n\n对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n对象也可以用于嵌套结构的对象和使用默认值，解构不成功为undefined\n\n```js\nlet x;\n{ x } = { x: 1 };  //Uncaught SyntaxError: Unexpected token =\n```\n\n`JavaScript` 引擎会将`{x}`理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 `JavaScript `将其解释为代码块。\n\n```js\nlet x;\n({ x } = { x: 1 });    //不会报错\n```\n\n## 字符串的解构赋值\n\n```js\nlet [a, b, c, d] = 'string'\nconsole.log(a, b, c, d)  //s,t,r,i\n```\n\n## 函数参数的解构赋值\n\n```js\nfunction add([x, y]) {\n  console.log(x, y)\n}\nadd([1, 2])  //1,2\n```\n\n函数参数的解构也可以使用默认值。\n\n```js\nfunction add([x = 3, y = 4]) {\n  console.log(x, y)\n}\nadd([1]) //1,4\n```\n\n推荐一本很好的书，对于ES6的学习很有帮助：[《ES6标准入门（第三版）》](http://es6.ruanyifeng.com/)\n\n","slug":"js-17","published":1,"updated":"2020-12-02T06:49:34.132Z","layout":"post","photos":[],"link":"","_id":"cki71wal6002vtl9k7s94cr1e","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。</p>\n<p>比如在<code>es5</code>时候给多个变量赋值，我们这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"number\">2</span>,</span><br><span class=\"line\">    c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>es6</code>中，我们可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, c]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e, f, g] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f, g) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [h, ...arr] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h, arr) <span class=\"comment\">//1,[2, 3, 4]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar, str] = [<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, str) <span class=\"comment\">//a,undefined,undefined</span></span><br><span class=\"line\"><span class=\"comment\">//结构不成功，变量的值就为undefined。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许使用默认值\"><a href=\"#允许使用默认值\" class=\"headerlink\" title=\"允许使用默认值\"></a>允许使用默认值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">///1,4,5</span></span><br><span class=\"line\"><span class=\"comment\">//值得注意的是：undefined，null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [d, e = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d, e) <span class=\"comment\">//1,2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [f, g = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f, g) <span class=\"comment\">//1,null</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b = a] = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//1,1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [c = <span class=\"number\">1</span>, d = c] = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//2,2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e = <span class=\"number\">4</span>, f = e] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f) <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h2><p>上面基本讲的都是数组，对象也可以使用解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">a</span>: c, <span class=\"attr\">b</span>: d &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，变量是<code>c</code>与<code>d</code>,而<code>a</code>与<code>b</code>是属性。</p>\n<p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<p>对象也可以用于嵌套结构的对象和使用默认值，解构不成功为undefined</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;;  <span class=\"comment\">//Uncaught SyntaxError: Unexpected token =</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JavaScript</code> 引擎会将<code>{x}</code>理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 <code>JavaScript</code>将其解释为代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;);    <span class=\"comment\">//不会报错</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d)  <span class=\"comment\">//s,t,r,i</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x = <span class=\"number\">3</span>, y = <span class=\"number\">4</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>]) <span class=\"comment\">//1,4</span></span><br></pre></td></tr></table></figure>\n\n<p>推荐一本很好的书，对于ES6的学习很有帮助：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ES6标准入门（第三版）》</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。</p>\n<p>比如在<code>es5</code>时候给多个变量赋值，我们这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"number\">2</span>,</span><br><span class=\"line\">    c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>es6</code>中，我们可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>等号两边的模式相同，左边的变量就会被赋予对应的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, c]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e, f, g] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f, g) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [h, ...arr] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h, arr) <span class=\"comment\">//1,[2, 3, 4]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar, str] = [<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo, bar, str) <span class=\"comment\">//a,undefined,undefined</span></span><br><span class=\"line\"><span class=\"comment\">//结构不成功，变量的值就为undefined。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许使用默认值\"><a href=\"#允许使用默认值\" class=\"headerlink\" title=\"允许使用默认值\"></a>允许使用默认值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">///1,4,5</span></span><br><span class=\"line\"><span class=\"comment\">//值得注意的是：undefined，null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [d, e = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d, e) <span class=\"comment\">//1,2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [f, g = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f, g) <span class=\"comment\">//1,null</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b = a] = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//1,1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [c = <span class=\"number\">1</span>, d = c] = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//2,2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [e = <span class=\"number\">4</span>, f = e] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e, f) <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h2><p>上面基本讲的都是数组，对象也可以使用解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>数组使用结构赋值，变量的取值由它的位置决定；而对象中变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">a</span>: c, <span class=\"attr\">b</span>: d &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'hbb'</span>, <span class=\"attr\">b</span>: <span class=\"string\">'ly'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c, d) <span class=\"comment\">//'hbb,'ly'</span></span><br></pre></td></tr></table></figure>\n\n<p>在上例中，变量是<code>c</code>与<code>d</code>,而<code>a</code>与<code>b</code>是属性。</p>\n<p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<p>对象也可以用于嵌套结构的对象和使用默认值，解构不成功为undefined</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;;  <span class=\"comment\">//Uncaught SyntaxError: Unexpected token =</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JavaScript</code> 引擎会将<code>{x}</code>理解成一个代码块，发生语法错误。我们可以将大括号写在行首，避免 <code>JavaScript</code>将其解释为代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;);    <span class=\"comment\">//不会报错</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = <span class=\"string\">'string'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d)  <span class=\"comment\">//s,t,r,i</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\">//1,2</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x = <span class=\"number\">3</span>, y = <span class=\"number\">4</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add([<span class=\"number\">1</span>]) <span class=\"comment\">//1,4</span></span><br></pre></td></tr></table></figure>\n\n<p>推荐一本很好的书，对于ES6的学习很有帮助：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ES6标准入门（第三版）》</a></p>\n"},{"title":"定时器","comments":1,"description":"setTimeout与setInterval的区别","date":"2018-03-20T06:29:10.000Z","keywords":"setTimeout, setInterval","_content":"\n## 定时器重复问题\n\n`setTimeout`与`setInterval`都可以用做定时器，但是在使用过程中不推荐使用`setInterval`\n\n因为存在定时器重复问题\n\n```js\nconsole.time('耗时')\nvar timer = setInterval(() => {\n  for (let i = 0; i < 1100000000; i++) { // 900ms左右\n  }\n  console.log(0)\n}, 100);\n\nsetTimeout(() => {\n  console.log('1s了')\n  clearInterval(timer)\n  console.timeEnd('耗时') // 耗时: 1955.52490234375ms（打印结果不固定）\n}, 1000);\n// 0\n// 0\n// 0\n// 1s了\n// 耗时: 2075.716ms\n```\n\n同步操作是在主线程上执行，而异步操作的函数会先放在事件队列当中，等到js主线程空闲了，\n才会去事件队列取出放到主线程执行。\n\n定时器是属于异步事件，参数里面设置的时间，并不是延迟多少秒去执行回调函数，这个时间代表的是延迟多少秒，把回调函数放到异步队列，等待主线程空闲再被执行。\n\n\n当且仅当没有该定时器的如何代码实例时，才会将定时器代码添加到队列中。这确保了定时器代码加入队列中最小的时间间隔为指定时间。\n\n这种重复定时器的规则有两个问题：\n\n1.某些间隔会被跳过\n\n2.多个定时器的代码执行时间可能会比预期小\n\n## 解决方法\n\n```js\nsetTimeout(function(){\n\n  //do something\n  for (let i = 0; i < 10; i++) { // 900ms左右\n  }\n  console.log(0)\n  setTimeout(arguments.callee,100);\n},1000)\n```\n\n这个模式链式调用了 `setTimeout` ，每次函数执行的时候都会创建一个新的定时器。第二个`setTimeout()`调用当前执行的函数，并为其设置另外一个定时器。\n\n\n这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。因此 `setTimeout` 在某程度上比 `setInterval` 稳定。但无论是 `setTimeout` 还是 `setInterval` 都无法解决精准定时的问题。\n","source":"_posts/js-18.md","raw":"---\ntitle: 定时器\ncomments: true\ndescription: setTimeout与setInterval的区别\ntags: \"js\"\ndate: 2018-3-20 14:29:10\ncategories: \"js\"\nkeywords: setTimeout, setInterval\n---\n\n## 定时器重复问题\n\n`setTimeout`与`setInterval`都可以用做定时器，但是在使用过程中不推荐使用`setInterval`\n\n因为存在定时器重复问题\n\n```js\nconsole.time('耗时')\nvar timer = setInterval(() => {\n  for (let i = 0; i < 1100000000; i++) { // 900ms左右\n  }\n  console.log(0)\n}, 100);\n\nsetTimeout(() => {\n  console.log('1s了')\n  clearInterval(timer)\n  console.timeEnd('耗时') // 耗时: 1955.52490234375ms（打印结果不固定）\n}, 1000);\n// 0\n// 0\n// 0\n// 1s了\n// 耗时: 2075.716ms\n```\n\n同步操作是在主线程上执行，而异步操作的函数会先放在事件队列当中，等到js主线程空闲了，\n才会去事件队列取出放到主线程执行。\n\n定时器是属于异步事件，参数里面设置的时间，并不是延迟多少秒去执行回调函数，这个时间代表的是延迟多少秒，把回调函数放到异步队列，等待主线程空闲再被执行。\n\n\n当且仅当没有该定时器的如何代码实例时，才会将定时器代码添加到队列中。这确保了定时器代码加入队列中最小的时间间隔为指定时间。\n\n这种重复定时器的规则有两个问题：\n\n1.某些间隔会被跳过\n\n2.多个定时器的代码执行时间可能会比预期小\n\n## 解决方法\n\n```js\nsetTimeout(function(){\n\n  //do something\n  for (let i = 0; i < 10; i++) { // 900ms左右\n  }\n  console.log(0)\n  setTimeout(arguments.callee,100);\n},1000)\n```\n\n这个模式链式调用了 `setTimeout` ，每次函数执行的时候都会创建一个新的定时器。第二个`setTimeout()`调用当前执行的函数，并为其设置另外一个定时器。\n\n\n这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。因此 `setTimeout` 在某程度上比 `setInterval` 稳定。但无论是 `setTimeout` 还是 `setInterval` 都无法解决精准定时的问题。\n","slug":"js-18","published":1,"updated":"2020-12-02T06:49:34.132Z","layout":"post","photos":[],"link":"","_id":"cki71wal8002ztl9kxj6xtyq4","content":"<h2 id=\"定时器重复问题\"><a href=\"#定时器重复问题\" class=\"headerlink\" title=\"定时器重复问题\"></a>定时器重复问题</h2><p><code>setTimeout</code>与<code>setInterval</code>都可以用做定时器，但是在使用过程中不推荐使用<code>setInterval</code></p>\n<p>因为存在定时器重复问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'耗时'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1100000000</span>; i++) &#123; <span class=\"comment\">// 900ms左右</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1s了'</span>)</span><br><span class=\"line\">  clearInterval(timer)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'耗时'</span>) <span class=\"comment\">// 耗时: 1955.52490234375ms（打印结果不固定）</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1s了</span></span><br><span class=\"line\"><span class=\"comment\">// 耗时: 2075.716ms</span></span><br></pre></td></tr></table></figure>\n\n<p>同步操作是在主线程上执行，而异步操作的函数会先放在事件队列当中，等到js主线程空闲了，<br>才会去事件队列取出放到主线程执行。</p>\n<p>定时器是属于异步事件，参数里面设置的时间，并不是延迟多少秒去执行回调函数，这个时间代表的是延迟多少秒，把回调函数放到异步队列，等待主线程空闲再被执行。</p>\n<p>当且仅当没有该定时器的如何代码实例时，才会将定时器代码添加到队列中。这确保了定时器代码加入队列中最小的时间间隔为指定时间。</p>\n<p>这种重复定时器的规则有两个问题：</p>\n<p>1.某些间隔会被跳过</p>\n<p>2.多个定时器的代码执行时间可能会比预期小</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">// 900ms左右</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"built_in\">arguments</span>.callee,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个模式链式调用了 <code>setTimeout</code> ，每次函数执行的时候都会创建一个新的定时器。第二个<code>setTimeout()</code>调用当前执行的函数，并为其设置另外一个定时器。</p>\n<p>这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。因此 <code>setTimeout</code> 在某程度上比 <code>setInterval</code> 稳定。但无论是 <code>setTimeout</code> 还是 <code>setInterval</code> 都无法解决精准定时的问题。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"定时器重复问题\"><a href=\"#定时器重复问题\" class=\"headerlink\" title=\"定时器重复问题\"></a>定时器重复问题</h2><p><code>setTimeout</code>与<code>setInterval</code>都可以用做定时器，但是在使用过程中不推荐使用<code>setInterval</code></p>\n<p>因为存在定时器重复问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'耗时'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1100000000</span>; i++) &#123; <span class=\"comment\">// 900ms左右</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1s了'</span>)</span><br><span class=\"line\">  clearInterval(timer)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'耗时'</span>) <span class=\"comment\">// 耗时: 1955.52490234375ms（打印结果不固定）</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1s了</span></span><br><span class=\"line\"><span class=\"comment\">// 耗时: 2075.716ms</span></span><br></pre></td></tr></table></figure>\n\n<p>同步操作是在主线程上执行，而异步操作的函数会先放在事件队列当中，等到js主线程空闲了，<br>才会去事件队列取出放到主线程执行。</p>\n<p>定时器是属于异步事件，参数里面设置的时间，并不是延迟多少秒去执行回调函数，这个时间代表的是延迟多少秒，把回调函数放到异步队列，等待主线程空闲再被执行。</p>\n<p>当且仅当没有该定时器的如何代码实例时，才会将定时器代码添加到队列中。这确保了定时器代码加入队列中最小的时间间隔为指定时间。</p>\n<p>这种重复定时器的规则有两个问题：</p>\n<p>1.某些间隔会被跳过</p>\n<p>2.多个定时器的代码执行时间可能会比预期小</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">// 900ms左右</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">0</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"built_in\">arguments</span>.callee,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个模式链式调用了 <code>setTimeout</code> ，每次函数执行的时候都会创建一个新的定时器。第二个<code>setTimeout()</code>调用当前执行的函数，并为其设置另外一个定时器。</p>\n<p>这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。因此 <code>setTimeout</code> 在某程度上比 <code>setInterval</code> 稳定。但无论是 <code>setTimeout</code> 还是 <code>setInterval</code> 都无法解决精准定时的问题。</p>\n"},{"title":"理解 Object.defineProperty 及实现数据双向绑定","comments":1,"description":"理解 Object.defineProperty 及实现数据双向绑定","date":"2018-07-20T12:29:15.000Z","keywords":"Object.defineProperty, 实现数据双向绑定","_content":"\n## 概述\n\n`Object.defineProperty()` 和 `Proxy` 对象，都可以用来对数据的劫持操作。何为数据劫持呢？就是在我们访问或者修改某个对象的某个属性的时候，通过一段代码进行拦截行为，然后进行额外的操作，然后返回结果。那么vue中双向数据绑定就是一个典型的应用。\n\n## Object.defineProperty的语法\n\n```js\nObject.defineProperty(obj, prop, descriptor);\n```\n\n- obj: 可以理解为目标对象。\n- prop: 目标对象的属性名。\n- descriptor: 对属性的描述。\n\n### 数据描述符\n\n```js\nObject.defineProperty(obj, 'newAttr', {\n  configurable: true | false,\n  enumerable: true | false,\n  value: '任意类型的值',\n  writable: true | false\n});\n```\n\n数据描述符有如上`configurable`，`enumerable`，`value` 及 `writable` 配置项。\n\n### value\n属性对应的值，值的类型可以是任意类型的。\n\n```js\nconst obj = {\n  name: 'hbb'\n};\n\n// 对obj对象已有的name属性添加数据描述\nObject.defineProperty(obj, 'name', {\n  value: 'hbbaly'\n});\n\nconsole.log(obj.name); // 输出 hbbaly\n```\n\n### writable\n\n属性的值是否可以被重写，设置为`true`可以被重写，设置为`false`，是不能被重写的，默认为`false`。\n\n```js\nconst obj = {};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'kongzhi',\n  'writable': false\n});\n\nconsole.log(obj.name); // 输出 kongzhi\n\n// 改写obj.name 的值\nobj.name = 111;\n\nconsole.log(obj.name); // 还是打印出 kongzhi\n```\n\n`writable` 默认为`false`，不能被重写，但是我们将它设置为`true`，就可以进行重写值了.\n\n### enumerable\n\n是否可以被枚举，比如使用 `for..in` 或 `Object.keys()` 这样的。设置为`true`可以被枚举，设置为`false`，不能被枚举，默认为`false`\n\n```js\nconst obj = {\n  age: 20\n};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'hbb',\n  'writable': true,\n  'enumerable': true\n});\n\n// 枚举obj的属性\nfor (const i in obj) {\n  console.log(i); // 打印出 age, name\n}\n```\n\n### configurable\n\n可配置的意思，那么该属性的含义是：是否可以删除目标属性。如果我们设置它为`true`的话，是可以被删除。如果设置为`false`的话，是不能被删除的。它默认值为`false`。\n\n```js\nconst obj = {\n  'age': 20\n};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'hbb',\n  'writable': true,\n  'enumerable': true,\n  'configurable': false\n});\n\n// 使用delete 删除属性 \ndelete obj.name;\nconsole.log(obj.name); // 打印出hbb\n```\n\n使用 `delete`命令删除 `obj.name`的话，该属性值是删除不了的，因为 `configurable` 默认为`false`，不能被删除的。\n但是如果我们把它设置为`true`，那么就可以进行删除了。\n\n## 访问器描述符\n\n访问器描述符的含义是：包含该属性的一对 `getter`/`setter`方法的对象。如下基本语法：\n\n```js\nconst obj = {};\n\nObject.defineProperty(obj, 'name', {\n  get: function() {},\n  set: function(value) {},\n  configurable: true | false,\n  enumerable: true | false\n});\n```\n\n**使用访问器描述符中 getter或 setter方法的话，不允许使用 writable 和 value 这两个配置项**\n\n## 实现简单双向绑定\n\n```html\n<div class=\"page-body\">\n  <input type=\"text\" id=\"input\">\n  <p id=\"demo\"></p>\n</div>\n```\n\n```js\nlet obj = {}\nObject.defineProperty(obj, 'name',{\n  set (value) {\n    document.getElementById('demo').innerHTML = value\n    document.getElementById('input').value = value\n  }\n})\ndocument.getElementById('input').oninput = function (e) {\n  obj.name = e.target.value\n}\n```\n\n这样简单实现一个双向绑定\n\n## 对数组的监听\n\n```js\nconst obj = {};\n\nlet initValue = 1;\n\nObject.defineProperty(obj, 'name', {\n  set: function(value) {\n    console.log('set方法被执行了');\n    initValue = value;\n  },\n  get: function() {\n    return initValue;\n  }\n});\n\nconsole.log(obj.name); // 1\n\nobj.name = []; // 会执行set方法，会打印信息\n\n// 给 obj 中的name属性 设置为 数组 [1, 2, 3], 会执行set方法，会打印信息\nobj.name = [1, 2, 3];\n\n\n/************************************/\n// 然后对 obj.name 中的某一项进行改变值，不会执行set方法，不会打印信息\nobj.name[0] = 11;\n\n// 然后我们打印下 obj.name 的值\nconsole.log(obj.name);\n\n// 然后我们使用数组中push方法对 obj.name数组添加属性 不会执行set方法，不会打印信息\nobj.name.push(4);\n\nobj.name.length = 5; // 也不会执行set方法\n```\n\n当我们使用 `Object.defineProperty` 对数组赋值有一个新对象的时候，会执行`set`方法，但是当我们改变数组中的某一项值的时候，或者使用数组中的`push`等其他的方法，或者改变数组的长度，都不会执行`set`方法。\n\n也就是如果我们对数组中的内部属性值更改的话，都不会触发`set`方法。因此如果我们想实现数据双向绑定的话，我们就不能简单地使用 `obj.name[1] = newValue`； 这样的来进行赋值了。那么对于`vue`这样的框架，那么一般会**重写 Array.property.push**方法，并且生成一个新的数组赋值给数据，这样数据双向绑定就触发了。\n\n## 重写数组的方法\n\n```js\nconst arr = {};\n\n// 如下是 数组的常用方法\nconst arrayMethods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n// 对数组的方法进行重写\narrayMethods.forEach(method => {\n\n  const origin = Array.prototype[method]; \n\n  arr[method] = function() {\n    console.log(this);\n    return origin.apply(this, arguments);\n  }\n});\n\nconst testArr = [];\n\n// 对 testArr 的原型 指向 testArr\ntestArr.__proto__ = arr;\n\ntestArr.push(1); // 打印 [], this指向了 testArr\n\ntestArr.push(2); // 打印 [1], this指向了 testArr\n```\n\n## 对数组方法进行监听\n\n```js\n\nfunction Observer(data) {\n  this.data = data;\n  this.walk(data);\n}\n\nlet observerProto = Observer.prototype;\n\nlet arrayProto = Array.prototype;\n\nlet arrayMethods = Object.create(arrayProto);\n\nlet arrMethods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\narrMethods.forEach(method => {\n  // 使用 Object.defineProperty 进行监听\n  Object.defineProperty(arrayMethods, method, {\n    value () {\n      console.log('数组被访问到了');\n      const original = arrayProto[method];\n      // 使类数组变成一个真正的数组\n      const args = Array.from(arguments);\n      original.apply(this, args);\n    }\n  });\n});\n\nobserverProto.walk = function(obj) {\n  let value;\n  for (let key in obj) {\n    // 使用 hasOwnProperty 判断对象本身是否有该属性\n    if (obj.hasOwnProperty(key)) {\n      value = obj[key]; \n      // 递归调用，循环所有的对象\n      if (typeof value === 'object') {\n        // 并且该值是一个数组的话\n        if (Array.isArray(value)) {\n          const augment = value.__proto__ ? protoAugment : copyAugment;\n          augment(value, arrayMethods, key);\n          observeArray(value);\n        }\n        /* \n         如果是对象的话，递归调用该对象，递归完成后，会有属性名和值，然后对\n         该属性名和值使用 Object.defindProperty 进行监听即可\n         */\n        new Observer(value);\n      }\n      this.convert(key, value);\n    }\n  }\n}\n\np.convert = function(key, value) {\n  Object.defineProperty(this.data, key, {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      console.log(key + '被访问到了');\n      return value;\n    },\n    set: function(newVal) {\n      console.log(key + '被重新设置值了' + '=' + newVal);\n      // 如果新值和旧值相同的话，直接返回\n      if (newVal === value) return;\n      value = newVal;\n    }\n  });\n}\n\nfunction observeArray(items) {\n  for (let i = 0, l = items.length; i < l; i++) {\n    observer(items[i]);\n  }\n}\n\nfunction observer(value) {\n  if (typeof value !== 'object') return;\n  let ob = new Observer(value);\n  return ob;\n}\n\nfunction def (obj, key, val) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: true,\n    writable: true,\n    configurable: true\n  })\n}\n\n// 兼容不支持 __proto__的方法\nfunction protoAugment(target, src) {\n  target.__proto__ = src;\n}\n\n// 不支持 __proto__的直接修改先关的属性方法\nfunction copyAugment(target, src, keys) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n\n// 下面是测试数据\n\nlet data = {\n  testA: {\n    say: function() {\n      console.log('kongzhi');\n    }\n  },\n  testB: [{'a': 'b'}, 11, 22]\n};\n\nlet test = new Observer(data);\n\nconsole.log(test); \n\ndata.testB.push(33);\n```\n\n\n\n\n\n\n","source":"_posts/js-19.md","raw":"---\ntitle: 理解 Object.defineProperty 及实现数据双向绑定\ncomments: true\ndescription: 理解 Object.defineProperty 及实现数据双向绑定\ntags: \"js\"\ndate: 2018-7-20 20:29:15\ncategories: \"js\"\nkeywords: Object.defineProperty, 实现数据双向绑定\n---\n\n## 概述\n\n`Object.defineProperty()` 和 `Proxy` 对象，都可以用来对数据的劫持操作。何为数据劫持呢？就是在我们访问或者修改某个对象的某个属性的时候，通过一段代码进行拦截行为，然后进行额外的操作，然后返回结果。那么vue中双向数据绑定就是一个典型的应用。\n\n## Object.defineProperty的语法\n\n```js\nObject.defineProperty(obj, prop, descriptor);\n```\n\n- obj: 可以理解为目标对象。\n- prop: 目标对象的属性名。\n- descriptor: 对属性的描述。\n\n### 数据描述符\n\n```js\nObject.defineProperty(obj, 'newAttr', {\n  configurable: true | false,\n  enumerable: true | false,\n  value: '任意类型的值',\n  writable: true | false\n});\n```\n\n数据描述符有如上`configurable`，`enumerable`，`value` 及 `writable` 配置项。\n\n### value\n属性对应的值，值的类型可以是任意类型的。\n\n```js\nconst obj = {\n  name: 'hbb'\n};\n\n// 对obj对象已有的name属性添加数据描述\nObject.defineProperty(obj, 'name', {\n  value: 'hbbaly'\n});\n\nconsole.log(obj.name); // 输出 hbbaly\n```\n\n### writable\n\n属性的值是否可以被重写，设置为`true`可以被重写，设置为`false`，是不能被重写的，默认为`false`。\n\n```js\nconst obj = {};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'kongzhi',\n  'writable': false\n});\n\nconsole.log(obj.name); // 输出 kongzhi\n\n// 改写obj.name 的值\nobj.name = 111;\n\nconsole.log(obj.name); // 还是打印出 kongzhi\n```\n\n`writable` 默认为`false`，不能被重写，但是我们将它设置为`true`，就可以进行重写值了.\n\n### enumerable\n\n是否可以被枚举，比如使用 `for..in` 或 `Object.keys()` 这样的。设置为`true`可以被枚举，设置为`false`，不能被枚举，默认为`false`\n\n```js\nconst obj = {\n  age: 20\n};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'hbb',\n  'writable': true,\n  'enumerable': true\n});\n\n// 枚举obj的属性\nfor (const i in obj) {\n  console.log(i); // 打印出 age, name\n}\n```\n\n### configurable\n\n可配置的意思，那么该属性的含义是：是否可以删除目标属性。如果我们设置它为`true`的话，是可以被删除。如果设置为`false`的话，是不能被删除的。它默认值为`false`。\n\n```js\nconst obj = {\n  'age': 20\n};\n\nObject.defineProperty(obj, 'name', {\n  'value': 'hbb',\n  'writable': true,\n  'enumerable': true,\n  'configurable': false\n});\n\n// 使用delete 删除属性 \ndelete obj.name;\nconsole.log(obj.name); // 打印出hbb\n```\n\n使用 `delete`命令删除 `obj.name`的话，该属性值是删除不了的，因为 `configurable` 默认为`false`，不能被删除的。\n但是如果我们把它设置为`true`，那么就可以进行删除了。\n\n## 访问器描述符\n\n访问器描述符的含义是：包含该属性的一对 `getter`/`setter`方法的对象。如下基本语法：\n\n```js\nconst obj = {};\n\nObject.defineProperty(obj, 'name', {\n  get: function() {},\n  set: function(value) {},\n  configurable: true | false,\n  enumerable: true | false\n});\n```\n\n**使用访问器描述符中 getter或 setter方法的话，不允许使用 writable 和 value 这两个配置项**\n\n## 实现简单双向绑定\n\n```html\n<div class=\"page-body\">\n  <input type=\"text\" id=\"input\">\n  <p id=\"demo\"></p>\n</div>\n```\n\n```js\nlet obj = {}\nObject.defineProperty(obj, 'name',{\n  set (value) {\n    document.getElementById('demo').innerHTML = value\n    document.getElementById('input').value = value\n  }\n})\ndocument.getElementById('input').oninput = function (e) {\n  obj.name = e.target.value\n}\n```\n\n这样简单实现一个双向绑定\n\n## 对数组的监听\n\n```js\nconst obj = {};\n\nlet initValue = 1;\n\nObject.defineProperty(obj, 'name', {\n  set: function(value) {\n    console.log('set方法被执行了');\n    initValue = value;\n  },\n  get: function() {\n    return initValue;\n  }\n});\n\nconsole.log(obj.name); // 1\n\nobj.name = []; // 会执行set方法，会打印信息\n\n// 给 obj 中的name属性 设置为 数组 [1, 2, 3], 会执行set方法，会打印信息\nobj.name = [1, 2, 3];\n\n\n/************************************/\n// 然后对 obj.name 中的某一项进行改变值，不会执行set方法，不会打印信息\nobj.name[0] = 11;\n\n// 然后我们打印下 obj.name 的值\nconsole.log(obj.name);\n\n// 然后我们使用数组中push方法对 obj.name数组添加属性 不会执行set方法，不会打印信息\nobj.name.push(4);\n\nobj.name.length = 5; // 也不会执行set方法\n```\n\n当我们使用 `Object.defineProperty` 对数组赋值有一个新对象的时候，会执行`set`方法，但是当我们改变数组中的某一项值的时候，或者使用数组中的`push`等其他的方法，或者改变数组的长度，都不会执行`set`方法。\n\n也就是如果我们对数组中的内部属性值更改的话，都不会触发`set`方法。因此如果我们想实现数据双向绑定的话，我们就不能简单地使用 `obj.name[1] = newValue`； 这样的来进行赋值了。那么对于`vue`这样的框架，那么一般会**重写 Array.property.push**方法，并且生成一个新的数组赋值给数据，这样数据双向绑定就触发了。\n\n## 重写数组的方法\n\n```js\nconst arr = {};\n\n// 如下是 数组的常用方法\nconst arrayMethods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n// 对数组的方法进行重写\narrayMethods.forEach(method => {\n\n  const origin = Array.prototype[method]; \n\n  arr[method] = function() {\n    console.log(this);\n    return origin.apply(this, arguments);\n  }\n});\n\nconst testArr = [];\n\n// 对 testArr 的原型 指向 testArr\ntestArr.__proto__ = arr;\n\ntestArr.push(1); // 打印 [], this指向了 testArr\n\ntestArr.push(2); // 打印 [1], this指向了 testArr\n```\n\n## 对数组方法进行监听\n\n```js\n\nfunction Observer(data) {\n  this.data = data;\n  this.walk(data);\n}\n\nlet observerProto = Observer.prototype;\n\nlet arrayProto = Array.prototype;\n\nlet arrayMethods = Object.create(arrayProto);\n\nlet arrMethods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\narrMethods.forEach(method => {\n  // 使用 Object.defineProperty 进行监听\n  Object.defineProperty(arrayMethods, method, {\n    value () {\n      console.log('数组被访问到了');\n      const original = arrayProto[method];\n      // 使类数组变成一个真正的数组\n      const args = Array.from(arguments);\n      original.apply(this, args);\n    }\n  });\n});\n\nobserverProto.walk = function(obj) {\n  let value;\n  for (let key in obj) {\n    // 使用 hasOwnProperty 判断对象本身是否有该属性\n    if (obj.hasOwnProperty(key)) {\n      value = obj[key]; \n      // 递归调用，循环所有的对象\n      if (typeof value === 'object') {\n        // 并且该值是一个数组的话\n        if (Array.isArray(value)) {\n          const augment = value.__proto__ ? protoAugment : copyAugment;\n          augment(value, arrayMethods, key);\n          observeArray(value);\n        }\n        /* \n         如果是对象的话，递归调用该对象，递归完成后，会有属性名和值，然后对\n         该属性名和值使用 Object.defindProperty 进行监听即可\n         */\n        new Observer(value);\n      }\n      this.convert(key, value);\n    }\n  }\n}\n\np.convert = function(key, value) {\n  Object.defineProperty(this.data, key, {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      console.log(key + '被访问到了');\n      return value;\n    },\n    set: function(newVal) {\n      console.log(key + '被重新设置值了' + '=' + newVal);\n      // 如果新值和旧值相同的话，直接返回\n      if (newVal === value) return;\n      value = newVal;\n    }\n  });\n}\n\nfunction observeArray(items) {\n  for (let i = 0, l = items.length; i < l; i++) {\n    observer(items[i]);\n  }\n}\n\nfunction observer(value) {\n  if (typeof value !== 'object') return;\n  let ob = new Observer(value);\n  return ob;\n}\n\nfunction def (obj, key, val) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: true,\n    writable: true,\n    configurable: true\n  })\n}\n\n// 兼容不支持 __proto__的方法\nfunction protoAugment(target, src) {\n  target.__proto__ = src;\n}\n\n// 不支持 __proto__的直接修改先关的属性方法\nfunction copyAugment(target, src, keys) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n\n// 下面是测试数据\n\nlet data = {\n  testA: {\n    say: function() {\n      console.log('kongzhi');\n    }\n  },\n  testB: [{'a': 'b'}, 11, 22]\n};\n\nlet test = new Observer(data);\n\nconsole.log(test); \n\ndata.testB.push(33);\n```\n\n\n\n\n\n\n","slug":"js-19","published":1,"updated":"2020-12-02T06:49:34.133Z","layout":"post","photos":[],"link":"","_id":"cki71wal90032tl9kg2jzexr1","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Object.defineProperty()</code> 和 <code>Proxy</code> 对象，都可以用来对数据的劫持操作。何为数据劫持呢？就是在我们访问或者修改某个对象的某个属性的时候，通过一段代码进行拦截行为，然后进行额外的操作，然后返回结果。那么vue中双向数据绑定就是一个典型的应用。</p>\n<h2 id=\"Object-defineProperty的语法\"><a href=\"#Object-defineProperty的语法\" class=\"headerlink\" title=\"Object.defineProperty的语法\"></a>Object.defineProperty的语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>obj: 可以理解为目标对象。</li>\n<li>prop: 目标对象的属性名。</li>\n<li>descriptor: 对属性的描述。</li>\n</ul>\n<h3 id=\"数据描述符\"><a href=\"#数据描述符\" class=\"headerlink\" title=\"数据描述符\"></a>数据描述符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'newAttr'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">'任意类型的值'</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>数据描述符有如上<code>configurable</code>，<code>enumerable</code>，<code>value</code> 及 <code>writable</code> 配置项。</p>\n<h3 id=\"value\"><a href=\"#value\" class=\"headerlink\" title=\"value\"></a>value</h3><p>属性对应的值，值的类型可以是任意类型的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对obj对象已有的name属性添加数据描述</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 输出 hbbaly</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"writable\"><a href=\"#writable\" class=\"headerlink\" title=\"writable\"></a>writable</h3><p>属性的值是否可以被重写，设置为<code>true</code>可以被重写，设置为<code>false</code>，是不能被重写的，默认为<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'kongzhi'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 输出 kongzhi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改写obj.name 的值</span></span><br><span class=\"line\">obj.name = <span class=\"number\">111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 还是打印出 kongzhi</span></span><br></pre></td></tr></table></figure>\n\n<p><code>writable</code> 默认为<code>false</code>，不能被重写，但是我们将它设置为<code>true</code>，就可以进行重写值了.</p>\n<h3 id=\"enumerable\"><a href=\"#enumerable\" class=\"headerlink\" title=\"enumerable\"></a>enumerable</h3><p>是否可以被枚举，比如使用 <code>for..in</code> 或 <code>Object.keys()</code> 这样的。设置为<code>true</code>可以被枚举，设置为<code>false</code>，不能被枚举，默认为<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'enumerable'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举obj的属性</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 打印出 age, name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"configurable\"><a href=\"#configurable\" class=\"headerlink\" title=\"configurable\"></a>configurable</h3><p>可配置的意思，那么该属性的含义是：是否可以删除目标属性。如果我们设置它为<code>true</code>的话，是可以被删除。如果设置为<code>false</code>的话，是不能被删除的。它默认值为<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"string\">'age'</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'enumerable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'configurable'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用delete 删除属性 </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.name;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 打印出hbb</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>delete</code>命令删除 <code>obj.name</code>的话，该属性值是删除不了的，因为 <code>configurable</code> 默认为<code>false</code>，不能被删除的。<br>但是如果我们把它设置为<code>true</code>，那么就可以进行删除了。</p>\n<h2 id=\"访问器描述符\"><a href=\"#访问器描述符\" class=\"headerlink\" title=\"访问器描述符\"></a>访问器描述符</h2><p>访问器描述符的含义是：包含该属性的一对 <code>getter</code>/<code>setter</code>方法的对象。如下基本语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(value) &#123;&#125;,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用访问器描述符中 getter或 setter方法的话，不允许使用 writable 和 value 这两个配置项</strong></p>\n<h2 id=\"实现简单双向绑定\"><a href=\"#实现简单双向绑定\" class=\"headerlink\" title=\"实现简单双向绑定\"></a>实现简单双向绑定</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-body\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'demo'</span>).innerHTML = value</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>).value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = e.target.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样简单实现一个双向绑定</p>\n<h2 id=\"对数组的监听\"><a href=\"#对数组的监听\" class=\"headerlink\" title=\"对数组的监听\"></a>对数组的监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> initValue = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set方法被执行了'</span>);</span><br><span class=\"line\">    initValue = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initValue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.name = []; <span class=\"comment\">// 会执行set方法，会打印信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 obj 中的name属性 设置为 数组 [1, 2, 3], 会执行set方法，会打印信息</span></span><br><span class=\"line\">obj.name = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************/</span></span><br><span class=\"line\"><span class=\"comment\">// 然后对 obj.name 中的某一项进行改变值，不会执行set方法，不会打印信息</span></span><br><span class=\"line\">obj.name[<span class=\"number\">0</span>] = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后我们打印下 obj.name 的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后我们使用数组中push方法对 obj.name数组添加属性 不会执行set方法，不会打印信息</span></span><br><span class=\"line\">obj.name.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.name.length = <span class=\"number\">5</span>; <span class=\"comment\">// 也不会执行set方法</span></span><br></pre></td></tr></table></figure>\n\n<p>当我们使用 <code>Object.defineProperty</code> 对数组赋值有一个新对象的时候，会执行<code>set</code>方法，但是当我们改变数组中的某一项值的时候，或者使用数组中的<code>push</code>等其他的方法，或者改变数组的长度，都不会执行<code>set</code>方法。</p>\n<p>也就是如果我们对数组中的内部属性值更改的话，都不会触发<code>set</code>方法。因此如果我们想实现数据双向绑定的话，我们就不能简单地使用 <code>obj.name[1] = newValue</code>； 这样的来进行赋值了。那么对于<code>vue</code>这样的框架，那么一般会<strong>重写 Array.property.push</strong>方法，并且生成一个新的数组赋值给数据，这样数据双向绑定就触发了。</p>\n<h2 id=\"重写数组的方法\"><a href=\"#重写数组的方法\" class=\"headerlink\" title=\"重写数组的方法\"></a>重写数组的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如下是 数组的常用方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayMethods = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 对数组的方法进行重写</span></span><br><span class=\"line\">arrayMethods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> origin = <span class=\"built_in\">Array</span>.prototype[method]; </span><br><span class=\"line\"></span><br><span class=\"line\">  arr[method] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> origin.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 testArr 的原型 指向 testArr</span></span><br><span class=\"line\">testArr.__proto__ = arr;</span><br><span class=\"line\"></span><br><span class=\"line\">testArr.push(<span class=\"number\">1</span>); <span class=\"comment\">// 打印 [], this指向了 testArr</span></span><br><span class=\"line\"></span><br><span class=\"line\">testArr.push(<span class=\"number\">2</span>); <span class=\"comment\">// 打印 [1], this指向了 testArr</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数组方法进行监听\"><a href=\"#对数组方法进行监听\" class=\"headerlink\" title=\"对数组方法进行监听\"></a>对数组方法进行监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.walk(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observerProto = Observer.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayProto = <span class=\"built_in\">Array</span>.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrMethods = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">arrMethods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.defineProperty 进行监听</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(arrayMethods, method, &#123;</span><br><span class=\"line\">    value () &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'数组被访问到了'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> original = arrayProto[method];</span><br><span class=\"line\">      <span class=\"comment\">// 使类数组变成一个真正的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      original.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observerProto.walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 hasOwnProperty 判断对象本身是否有该属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      value = obj[key]; </span><br><span class=\"line\">      <span class=\"comment\">// 递归调用，循环所有的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并且该值是一个数组的话</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> augment = value.__proto__ ? protoAugment : copyAugment;</span><br><span class=\"line\">          augment(value, arrayMethods, key);</span><br><span class=\"line\">          observeArray(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">         如果是对象的话，递归调用该对象，递归完成后，会有属性名和值，然后对</span></span><br><span class=\"line\"><span class=\"comment\">         该属性名和值使用 Object.defindProperty 进行监听即可</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Observer(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.convert(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>.data, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'被访问到了'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'被重新设置值了'</span> + <span class=\"string\">'='</span> + newVal);</span><br><span class=\"line\">      <span class=\"comment\">// 如果新值和旧值相同的话，直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      value = newVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeArray</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    observer(items[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob = <span class=\"keyword\">new</span> Observer(value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    value: val,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容不支持 __proto__的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span>(<span class=\"params\">target, src</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不支持 __proto__的直接修改先关的属性方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span>(<span class=\"params\">target, src, keys</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i];</span><br><span class=\"line\">    def(target, key, src[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面是测试数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  testA: &#123;</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'kongzhi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  testB: [&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'b'</span>&#125;, <span class=\"number\">11</span>, <span class=\"number\">22</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Observer(data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test); </span><br><span class=\"line\"></span><br><span class=\"line\">data.testB.push(<span class=\"number\">33</span>);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Object.defineProperty()</code> 和 <code>Proxy</code> 对象，都可以用来对数据的劫持操作。何为数据劫持呢？就是在我们访问或者修改某个对象的某个属性的时候，通过一段代码进行拦截行为，然后进行额外的操作，然后返回结果。那么vue中双向数据绑定就是一个典型的应用。</p>\n<h2 id=\"Object-defineProperty的语法\"><a href=\"#Object-defineProperty的语法\" class=\"headerlink\" title=\"Object.defineProperty的语法\"></a>Object.defineProperty的语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>obj: 可以理解为目标对象。</li>\n<li>prop: 目标对象的属性名。</li>\n<li>descriptor: 对属性的描述。</li>\n</ul>\n<h3 id=\"数据描述符\"><a href=\"#数据描述符\" class=\"headerlink\" title=\"数据描述符\"></a>数据描述符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'newAttr'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">'任意类型的值'</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>数据描述符有如上<code>configurable</code>，<code>enumerable</code>，<code>value</code> 及 <code>writable</code> 配置项。</p>\n<h3 id=\"value\"><a href=\"#value\" class=\"headerlink\" title=\"value\"></a>value</h3><p>属性对应的值，值的类型可以是任意类型的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'hbb'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对obj对象已有的name属性添加数据描述</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"string\">'hbbaly'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 输出 hbbaly</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"writable\"><a href=\"#writable\" class=\"headerlink\" title=\"writable\"></a>writable</h3><p>属性的值是否可以被重写，设置为<code>true</code>可以被重写，设置为<code>false</code>，是不能被重写的，默认为<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'kongzhi'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 输出 kongzhi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改写obj.name 的值</span></span><br><span class=\"line\">obj.name = <span class=\"number\">111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 还是打印出 kongzhi</span></span><br></pre></td></tr></table></figure>\n\n<p><code>writable</code> 默认为<code>false</code>，不能被重写，但是我们将它设置为<code>true</code>，就可以进行重写值了.</p>\n<h3 id=\"enumerable\"><a href=\"#enumerable\" class=\"headerlink\" title=\"enumerable\"></a>enumerable</h3><p>是否可以被枚举，比如使用 <code>for..in</code> 或 <code>Object.keys()</code> 这样的。设置为<code>true</code>可以被枚举，设置为<code>false</code>，不能被枚举，默认为<code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'enumerable'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举obj的属性</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 打印出 age, name</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"configurable\"><a href=\"#configurable\" class=\"headerlink\" title=\"configurable\"></a>configurable</h3><p>可配置的意思，那么该属性的含义是：是否可以删除目标属性。如果我们设置它为<code>true</code>的话，是可以被删除。如果设置为<code>false</code>的话，是不能被删除的。它默认值为<code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"string\">'age'</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'value'</span>: <span class=\"string\">'hbb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'writable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'enumerable'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'configurable'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用delete 删除属性 </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.name;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 打印出hbb</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>delete</code>命令删除 <code>obj.name</code>的话，该属性值是删除不了的，因为 <code>configurable</code> 默认为<code>false</code>，不能被删除的。<br>但是如果我们把它设置为<code>true</code>，那么就可以进行删除了。</p>\n<h2 id=\"访问器描述符\"><a href=\"#访问器描述符\" class=\"headerlink\" title=\"访问器描述符\"></a>访问器描述符</h2><p>访问器描述符的含义是：包含该属性的一对 <code>getter</code>/<code>setter</code>方法的对象。如下基本语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(value) &#123;&#125;,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span> | <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用访问器描述符中 getter或 setter方法的话，不允许使用 writable 和 value 这两个配置项</strong></p>\n<h2 id=\"实现简单双向绑定\"><a href=\"#实现简单双向绑定\" class=\"headerlink\" title=\"实现简单双向绑定\"></a>实现简单双向绑定</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-body\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'demo'</span>).innerHTML = value</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>).value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  obj.name = e.target.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样简单实现一个双向绑定</p>\n<h2 id=\"对数组的监听\"><a href=\"#对数组的监听\" class=\"headerlink\" title=\"对数组的监听\"></a>对数组的监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> initValue = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set方法被执行了'</span>);</span><br><span class=\"line\">    initValue = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initValue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.name = []; <span class=\"comment\">// 会执行set方法，会打印信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 obj 中的name属性 设置为 数组 [1, 2, 3], 会执行set方法，会打印信息</span></span><br><span class=\"line\">obj.name = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************/</span></span><br><span class=\"line\"><span class=\"comment\">// 然后对 obj.name 中的某一项进行改变值，不会执行set方法，不会打印信息</span></span><br><span class=\"line\">obj.name[<span class=\"number\">0</span>] = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后我们打印下 obj.name 的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后我们使用数组中push方法对 obj.name数组添加属性 不会执行set方法，不会打印信息</span></span><br><span class=\"line\">obj.name.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.name.length = <span class=\"number\">5</span>; <span class=\"comment\">// 也不会执行set方法</span></span><br></pre></td></tr></table></figure>\n\n<p>当我们使用 <code>Object.defineProperty</code> 对数组赋值有一个新对象的时候，会执行<code>set</code>方法，但是当我们改变数组中的某一项值的时候，或者使用数组中的<code>push</code>等其他的方法，或者改变数组的长度，都不会执行<code>set</code>方法。</p>\n<p>也就是如果我们对数组中的内部属性值更改的话，都不会触发<code>set</code>方法。因此如果我们想实现数据双向绑定的话，我们就不能简单地使用 <code>obj.name[1] = newValue</code>； 这样的来进行赋值了。那么对于<code>vue</code>这样的框架，那么一般会<strong>重写 Array.property.push</strong>方法，并且生成一个新的数组赋值给数据，这样数据双向绑定就触发了。</p>\n<h2 id=\"重写数组的方法\"><a href=\"#重写数组的方法\" class=\"headerlink\" title=\"重写数组的方法\"></a>重写数组的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如下是 数组的常用方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayMethods = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 对数组的方法进行重写</span></span><br><span class=\"line\">arrayMethods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> origin = <span class=\"built_in\">Array</span>.prototype[method]; </span><br><span class=\"line\"></span><br><span class=\"line\">  arr[method] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> origin.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 testArr 的原型 指向 testArr</span></span><br><span class=\"line\">testArr.__proto__ = arr;</span><br><span class=\"line\"></span><br><span class=\"line\">testArr.push(<span class=\"number\">1</span>); <span class=\"comment\">// 打印 [], this指向了 testArr</span></span><br><span class=\"line\"></span><br><span class=\"line\">testArr.push(<span class=\"number\">2</span>); <span class=\"comment\">// 打印 [1], this指向了 testArr</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数组方法进行监听\"><a href=\"#对数组方法进行监听\" class=\"headerlink\" title=\"对数组方法进行监听\"></a>对数组方法进行监听</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.walk(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observerProto = Observer.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayProto = <span class=\"built_in\">Array</span>.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrMethods = [</span><br><span class=\"line\">  <span class=\"string\">'push'</span>,</span><br><span class=\"line\">  <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">  <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">  <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">  <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">  <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">arrMethods.forEach(<span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.defineProperty 进行监听</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(arrayMethods, method, &#123;</span><br><span class=\"line\">    value () &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'数组被访问到了'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> original = arrayProto[method];</span><br><span class=\"line\">      <span class=\"comment\">// 使类数组变成一个真正的数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      original.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observerProto.walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 hasOwnProperty 判断对象本身是否有该属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      value = obj[key]; </span><br><span class=\"line\">      <span class=\"comment\">// 递归调用，循环所有的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并且该值是一个数组的话</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> augment = value.__proto__ ? protoAugment : copyAugment;</span><br><span class=\"line\">          augment(value, arrayMethods, key);</span><br><span class=\"line\">          observeArray(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">         如果是对象的话，递归调用该对象，递归完成后，会有属性名和值，然后对</span></span><br><span class=\"line\"><span class=\"comment\">         该属性名和值使用 Object.defindProperty 进行监听即可</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Observer(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.convert(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>.data, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'被访问到了'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'被重新设置值了'</span> + <span class=\"string\">'='</span> + newVal);</span><br><span class=\"line\">      <span class=\"comment\">// 如果新值和旧值相同的话，直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      value = newVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeArray</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    observer(items[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob = <span class=\"keyword\">new</span> Observer(value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    value: val,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容不支持 __proto__的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span>(<span class=\"params\">target, src</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不支持 __proto__的直接修改先关的属性方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span>(<span class=\"params\">target, src, keys</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i];</span><br><span class=\"line\">    def(target, key, src[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面是测试数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  testA: &#123;</span><br><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'kongzhi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  testB: [&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'b'</span>&#125;, <span class=\"number\">11</span>, <span class=\"number\">22</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Observer(data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test); </span><br><span class=\"line\"></span><br><span class=\"line\">data.testB.push(<span class=\"number\">33</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"canvas实现截图功能","comments":1,"description":"canvas实现截图功能","date":"2016-06-05T08:15:10.000Z","keywords":"canvas, js, 截图","_content":"\n配合时钟来进行截图。\n\n## canvas实现截图功能的思路：\n\n1. 向网页中添加一个img标签，不要给url的属性，给定一个id。调整图像大小，使其刚好覆盖在canvas上。\n2. 点击截图按钮时候，通过调用canvas。toDataURl()方法获得src地址，将此地址设定为图像的src。\n3. 将图像设置为可见，canvas设置为不可见。\n4. 当在截图的状态下，再一次点击按钮时，返回时钟界面，img设置为不可见。\n总体思路就这四点。了解详细的情况可以点击链接： [canvas实现截图功能](http://www.hbbaly.com/wp-content/themes/blog/case/screenshot.html)。\n\n## 代码\n\n```html\n<html lang=\"en\"><head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        body{\n            background: rgba(100,145,250,.3);\n        }\n        #canvas{\n            position:absolute;\n            top:50px;\n            left:50px;\n            border:1px solid #ccc;\n        }\n        #controls{\n            margin:20px 0 20px 60px;\n        }\n        #screenshot{\n            padding:5px;\n            border-radius: 5px;\n            border:0;\n            background: blue;\n            color: #fff;\n            cursor: pointer;\n        }\n        #img{\n            position:absolute;\n            top:50px;\n            left:50px;\n        }\n    </style>\n</head>\n<body>\n<div id=\"controls\">\n    <input type=\"button\" id=\"screenshot\" value=\"take screenshot\">\n</div>\n<img src=\"\" id=\"img\">\n<canvas id=\"canvas\" width=\"600\" height=\"600\"></canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\"),\n        context = canvas.getContext(\"2d\"),\n        screenshot = document.getElementById(\"screenshot\"),\n        img = document.getElementById(\"img\"),\n        fontHeight = 15,\n        Margin=35,\n        hand = canvas.width/25,\n        hourHand = canvas.width/10,\n        spacing = 20,\n        radius = canvas.width/2-Margin, // 圆心半径\n        handRadius = radius+spacing,  //绘制数字的半径\n        loop = null;\n    screenshot.onclick = function (e) {\n        var dataURL ;\n        if(screenshot.value ===\"take screenshot\"){\n            dataURL = canvas.toDataURL();\n            clearInterval(loop);\n            img.src = dataURL;\n            img.style.display = \"block\";\n            canvas.style.display = \"none\";\n            screenshot.value = \"return to canvas\";\n\n        }else{\n            canvas.style.display = \"block\";\n            img.style.display = \"none\";\n            loop = setInterval(drawClock,1000);\n            screenshot.value = \"take screenshot\";\n        }\n    };\n\n    //绘制圆\n    function drawCircle() {\n        context.beginPath();\n        context.arc(canvas.width/2,canvas.height/2,radius,0,Math.PI*2,true);\n        context.stroke();\n    }\n    //绘制数字\n    function drawNumbers() {\n        var arr = [1,2,3,4,5,6,7,8,9,10,11,12],\n            angle = 0,\n            w = 0;\n        //遍历arr\n        arr.forEach(function (n) {\n            //angle，是从水平方向顺时针开始，也就是从3的位置\n            angle = Math.PI/6*(n-3);\n            w = context.measureText(n).width; //字体宽度\n            //计算绘制数字的位置，圆点是在画布的左上角\n            context.fillText(n,canvas.width/2+Math.cos(angle)*handRadius-w/2,canvas.height/2+Math.sin(angle)*handRadius+fontHeight/3);\n\n        })\n    }\n    //绘制圆心\n    function drawCenter() {\n        context.beginPath();\n        context.arc(canvas.width/2,canvas.height/2,5,0,Math.PI*2,true);\n        context.fill();\n    }\n    //绘制指针\n    function drawHand(a,b) {\n        var angle = (Math.PI*2)*(a/60)-Math.PI/2, //指针的度数\n            handRadius = b?radius-hand-hourHand:radius-hand; //指针的长度\n        context.moveTo(canvas.width/2,canvas.height/2);\n        context.lineTo(canvas.width/2+Math.cos(angle)*handRadius,canvas.height/2+Math.sin(angle)*handRadius);\n        context.stroke();\n    }\n    //时间关联\n    function drawHands() {\n        var date = new Date,\n            hour = date.getHours();\n        hour = hour>12?hour-12:hour;\n        drawHand(hour*5+(date.getMinutes()/60)*5,true);\n        drawHand(date.getMinutes(),false);\n        drawHand(date.getSeconds(),false);\n    }\n    function drawClock() {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        drawCircle();\n        drawCenter();\n        drawHands();\n        drawNumbers();\n    }\n    context.font = fontHeight+\"px Arial\";\n    loop = setInterval(drawClock,1000);\n\n</script>\n\n</body></html>\n```\n\n![](http://www.hbbaly.com/wp-content/themes/blog/img/article/clock.png)","source":"_posts/js-2.md","raw":"---\ntitle: canvas实现截图功能\ncomments: true\ndescription: canvas实现截图功能\ntags: \"canvas\"\ndate: 2016-06-5 16:15:10\ncategories: \"js\"\nkeywords: canvas, js, 截图\n---\n\n配合时钟来进行截图。\n\n## canvas实现截图功能的思路：\n\n1. 向网页中添加一个img标签，不要给url的属性，给定一个id。调整图像大小，使其刚好覆盖在canvas上。\n2. 点击截图按钮时候，通过调用canvas。toDataURl()方法获得src地址，将此地址设定为图像的src。\n3. 将图像设置为可见，canvas设置为不可见。\n4. 当在截图的状态下，再一次点击按钮时，返回时钟界面，img设置为不可见。\n总体思路就这四点。了解详细的情况可以点击链接： [canvas实现截图功能](http://www.hbbaly.com/wp-content/themes/blog/case/screenshot.html)。\n\n## 代码\n\n```html\n<html lang=\"en\"><head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        body{\n            background: rgba(100,145,250,.3);\n        }\n        #canvas{\n            position:absolute;\n            top:50px;\n            left:50px;\n            border:1px solid #ccc;\n        }\n        #controls{\n            margin:20px 0 20px 60px;\n        }\n        #screenshot{\n            padding:5px;\n            border-radius: 5px;\n            border:0;\n            background: blue;\n            color: #fff;\n            cursor: pointer;\n        }\n        #img{\n            position:absolute;\n            top:50px;\n            left:50px;\n        }\n    </style>\n</head>\n<body>\n<div id=\"controls\">\n    <input type=\"button\" id=\"screenshot\" value=\"take screenshot\">\n</div>\n<img src=\"\" id=\"img\">\n<canvas id=\"canvas\" width=\"600\" height=\"600\"></canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\"),\n        context = canvas.getContext(\"2d\"),\n        screenshot = document.getElementById(\"screenshot\"),\n        img = document.getElementById(\"img\"),\n        fontHeight = 15,\n        Margin=35,\n        hand = canvas.width/25,\n        hourHand = canvas.width/10,\n        spacing = 20,\n        radius = canvas.width/2-Margin, // 圆心半径\n        handRadius = radius+spacing,  //绘制数字的半径\n        loop = null;\n    screenshot.onclick = function (e) {\n        var dataURL ;\n        if(screenshot.value ===\"take screenshot\"){\n            dataURL = canvas.toDataURL();\n            clearInterval(loop);\n            img.src = dataURL;\n            img.style.display = \"block\";\n            canvas.style.display = \"none\";\n            screenshot.value = \"return to canvas\";\n\n        }else{\n            canvas.style.display = \"block\";\n            img.style.display = \"none\";\n            loop = setInterval(drawClock,1000);\n            screenshot.value = \"take screenshot\";\n        }\n    };\n\n    //绘制圆\n    function drawCircle() {\n        context.beginPath();\n        context.arc(canvas.width/2,canvas.height/2,radius,0,Math.PI*2,true);\n        context.stroke();\n    }\n    //绘制数字\n    function drawNumbers() {\n        var arr = [1,2,3,4,5,6,7,8,9,10,11,12],\n            angle = 0,\n            w = 0;\n        //遍历arr\n        arr.forEach(function (n) {\n            //angle，是从水平方向顺时针开始，也就是从3的位置\n            angle = Math.PI/6*(n-3);\n            w = context.measureText(n).width; //字体宽度\n            //计算绘制数字的位置，圆点是在画布的左上角\n            context.fillText(n,canvas.width/2+Math.cos(angle)*handRadius-w/2,canvas.height/2+Math.sin(angle)*handRadius+fontHeight/3);\n\n        })\n    }\n    //绘制圆心\n    function drawCenter() {\n        context.beginPath();\n        context.arc(canvas.width/2,canvas.height/2,5,0,Math.PI*2,true);\n        context.fill();\n    }\n    //绘制指针\n    function drawHand(a,b) {\n        var angle = (Math.PI*2)*(a/60)-Math.PI/2, //指针的度数\n            handRadius = b?radius-hand-hourHand:radius-hand; //指针的长度\n        context.moveTo(canvas.width/2,canvas.height/2);\n        context.lineTo(canvas.width/2+Math.cos(angle)*handRadius,canvas.height/2+Math.sin(angle)*handRadius);\n        context.stroke();\n    }\n    //时间关联\n    function drawHands() {\n        var date = new Date,\n            hour = date.getHours();\n        hour = hour>12?hour-12:hour;\n        drawHand(hour*5+(date.getMinutes()/60)*5,true);\n        drawHand(date.getMinutes(),false);\n        drawHand(date.getSeconds(),false);\n    }\n    function drawClock() {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        drawCircle();\n        drawCenter();\n        drawHands();\n        drawNumbers();\n    }\n    context.font = fontHeight+\"px Arial\";\n    loop = setInterval(drawClock,1000);\n\n</script>\n\n</body></html>\n```\n\n![](http://www.hbbaly.com/wp-content/themes/blog/img/article/clock.png)","slug":"js-2","published":1,"updated":"2020-12-02T06:49:34.134Z","layout":"post","photos":[],"link":"","_id":"cki71wala0036tl9kh179bayd","content":"<p>配合时钟来进行截图。</p>\n<h2 id=\"canvas实现截图功能的思路：\"><a href=\"#canvas实现截图功能的思路：\" class=\"headerlink\" title=\"canvas实现截图功能的思路：\"></a>canvas实现截图功能的思路：</h2><ol>\n<li>向网页中添加一个img标签，不要给url的属性，给定一个id。调整图像大小，使其刚好覆盖在canvas上。</li>\n<li>点击截图按钮时候，通过调用canvas。toDataURl()方法获得src地址，将此地址设定为图像的src。</li>\n<li>将图像设置为可见，canvas设置为不可见。</li>\n<li>当在截图的状态下，再一次点击按钮时，返回时钟界面，img设置为不可见。<br>总体思路就这四点。了解详细的情况可以点击链接： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/screenshot.html\" target=\"_blank\" rel=\"noopener\">canvas实现截图功能</a>。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(100,145,250,<span class=\"selector-class\">.3</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#controls</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:20px</span> 0 20<span class=\"selector-tag\">px</span> 60<span class=\"selector-tag\">px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#screenshot</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:5px</span>;</span></span><br><span class=\"line\">            border-radius: 5px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">            background: blue;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">            cursor: pointer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#img</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"screenshot\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"take screenshot\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas.getContext(<span class=\"string\">\"2d\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        screenshot = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"screenshot\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"img\"</span>),</span></span><br><span class=\"line\">        fontHeight = 15,</span><br><span class=\"line\">        Margin=35,</span><br><span class=\"line\">        hand = canvas.width/25,</span><br><span class=\"line\">        hourHand = canvas.width/10,</span><br><span class=\"line\">        spacing = 20,</span><br><span class=\"line\"><span class=\"javascript\">        radius = canvas.width/<span class=\"number\">2</span>-Margin, <span class=\"comment\">// 圆心半径</span></span></span><br><span class=\"line\"><span class=\"javascript\">        handRadius = radius+spacing,  <span class=\"comment\">//绘制数字的半径</span></span></span><br><span class=\"line\"><span class=\"javascript\">        loop = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    screenshot.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> dataURL ;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(screenshot.value ===<span class=\"string\">\"take screenshot\"</span>)&#123;</span></span><br><span class=\"line\">            dataURL = canvas.toDataURL();</span><br><span class=\"line\">            clearInterval(loop);</span><br><span class=\"line\">            img.src = dataURL;</span><br><span class=\"line\"><span class=\"javascript\">            img.style.display = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            canvas.style.display = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            screenshot.value = <span class=\"string\">\"return to canvas\"</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canvas.style.display = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.style.display = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\">            loop = setInterval(drawClock,1000);</span><br><span class=\"line\"><span class=\"javascript\">            screenshot.value = <span class=\"string\">\"take screenshot\"</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制圆</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawCircle</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(canvas.width/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>,radius,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制数字</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>],</span></span><br><span class=\"line\">            angle = 0,</span><br><span class=\"line\">            w = 0;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//遍历arr</span></span></span><br><span class=\"line\"><span class=\"javascript\">        arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//angle，是从水平方向顺时针开始，也就是从3的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\">            angle = <span class=\"built_in\">Math</span>.PI/<span class=\"number\">6</span>*(n<span class=\"number\">-3</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            w = context.measureText(n).width; <span class=\"comment\">//字体宽度</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//计算绘制数字的位置，圆点是在画布的左上角</span></span></span><br><span class=\"line\"><span class=\"javascript\">            context.fillText(n,canvas.width/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.cos(angle)*handRadius-w/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.sin(angle)*handRadius+fontHeight/<span class=\"number\">3</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制圆心</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawCenter</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(canvas.width/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\">        context.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制指针</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHand</span>(<span class=\"params\">a,b</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> angle = (<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>)*(a/<span class=\"number\">60</span>)-<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"comment\">//指针的度数</span></span></span><br><span class=\"line\"><span class=\"javascript\">            handRadius = b?radius-hand-hourHand:radius-hand; <span class=\"comment\">//指针的长度</span></span></span><br><span class=\"line\">        context.moveTo(canvas.width/2,canvas.height/2);</span><br><span class=\"line\"><span class=\"javascript\">        context.lineTo(canvas.width/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.cos(angle)*handRadius,canvas.height/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.sin(angle)*handRadius);</span></span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//时间关联</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHands</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>,</span></span><br><span class=\"line\">            hour = date.getHours();</span><br><span class=\"line\">        hour = hour&gt;12?hour-12:hour;</span><br><span class=\"line\"><span class=\"javascript\">        drawHand(hour*<span class=\"number\">5</span>+(date.getMinutes()/<span class=\"number\">60</span>)*<span class=\"number\">5</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        drawHand(date.getMinutes(),<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        drawHand(date.getSeconds(),<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawClock</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.clearRect(0,0,canvas.width,canvas.height);</span><br><span class=\"line\">        drawCircle();</span><br><span class=\"line\">        drawCenter();</span><br><span class=\"line\">        drawHands();</span><br><span class=\"line\">        drawNumbers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    context.font = fontHeight+<span class=\"string\">\"px Arial\"</span>;</span></span><br><span class=\"line\">    loop = setInterval(drawClock,1000);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/themes/blog/img/article/clock.png\" alt></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>配合时钟来进行截图。</p>\n<h2 id=\"canvas实现截图功能的思路：\"><a href=\"#canvas实现截图功能的思路：\" class=\"headerlink\" title=\"canvas实现截图功能的思路：\"></a>canvas实现截图功能的思路：</h2><ol>\n<li>向网页中添加一个img标签，不要给url的属性，给定一个id。调整图像大小，使其刚好覆盖在canvas上。</li>\n<li>点击截图按钮时候，通过调用canvas。toDataURl()方法获得src地址，将此地址设定为图像的src。</li>\n<li>将图像设置为可见，canvas设置为不可见。</li>\n<li>当在截图的状态下，再一次点击按钮时，返回时钟界面，img设置为不可见。<br>总体思路就这四点。了解详细的情况可以点击链接： <a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/screenshot.html\" target=\"_blank\" rel=\"noopener\">canvas实现截图功能</a>。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(100,145,250,<span class=\"selector-class\">.3</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#controls</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:20px</span> 0 20<span class=\"selector-tag\">px</span> 60<span class=\"selector-tag\">px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#screenshot</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:5px</span>;</span></span><br><span class=\"line\">            border-radius: 5px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">            background: blue;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">            cursor: pointer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#img</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"screenshot\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"take screenshot\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"600\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas.getContext(<span class=\"string\">\"2d\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        screenshot = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"screenshot\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"img\"</span>),</span></span><br><span class=\"line\">        fontHeight = 15,</span><br><span class=\"line\">        Margin=35,</span><br><span class=\"line\">        hand = canvas.width/25,</span><br><span class=\"line\">        hourHand = canvas.width/10,</span><br><span class=\"line\">        spacing = 20,</span><br><span class=\"line\"><span class=\"javascript\">        radius = canvas.width/<span class=\"number\">2</span>-Margin, <span class=\"comment\">// 圆心半径</span></span></span><br><span class=\"line\"><span class=\"javascript\">        handRadius = radius+spacing,  <span class=\"comment\">//绘制数字的半径</span></span></span><br><span class=\"line\"><span class=\"javascript\">        loop = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    screenshot.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> dataURL ;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(screenshot.value ===<span class=\"string\">\"take screenshot\"</span>)&#123;</span></span><br><span class=\"line\">            dataURL = canvas.toDataURL();</span><br><span class=\"line\">            clearInterval(loop);</span><br><span class=\"line\">            img.src = dataURL;</span><br><span class=\"line\"><span class=\"javascript\">            img.style.display = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            canvas.style.display = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            screenshot.value = <span class=\"string\">\"return to canvas\"</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canvas.style.display = <span class=\"string\">\"block\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            img.style.display = <span class=\"string\">\"none\"</span>;</span></span><br><span class=\"line\">            loop = setInterval(drawClock,1000);</span><br><span class=\"line\"><span class=\"javascript\">            screenshot.value = <span class=\"string\">\"take screenshot\"</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制圆</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawCircle</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(canvas.width/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>,radius,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制数字</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>],</span></span><br><span class=\"line\">            angle = 0,</span><br><span class=\"line\">            w = 0;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//遍历arr</span></span></span><br><span class=\"line\"><span class=\"javascript\">        arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//angle，是从水平方向顺时针开始，也就是从3的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\">            angle = <span class=\"built_in\">Math</span>.PI/<span class=\"number\">6</span>*(n<span class=\"number\">-3</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            w = context.measureText(n).width; <span class=\"comment\">//字体宽度</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//计算绘制数字的位置，圆点是在画布的左上角</span></span></span><br><span class=\"line\"><span class=\"javascript\">            context.fillText(n,canvas.width/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.cos(angle)*handRadius-w/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.sin(angle)*handRadius+fontHeight/<span class=\"number\">3</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制圆心</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawCenter</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(canvas.width/<span class=\"number\">2</span>,canvas.height/<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\">        context.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制指针</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHand</span>(<span class=\"params\">a,b</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> angle = (<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>)*(a/<span class=\"number\">60</span>)-<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"comment\">//指针的度数</span></span></span><br><span class=\"line\"><span class=\"javascript\">            handRadius = b?radius-hand-hourHand:radius-hand; <span class=\"comment\">//指针的长度</span></span></span><br><span class=\"line\">        context.moveTo(canvas.width/2,canvas.height/2);</span><br><span class=\"line\"><span class=\"javascript\">        context.lineTo(canvas.width/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.cos(angle)*handRadius,canvas.height/<span class=\"number\">2</span>+<span class=\"built_in\">Math</span>.sin(angle)*handRadius);</span></span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//时间关联</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHands</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>,</span></span><br><span class=\"line\">            hour = date.getHours();</span><br><span class=\"line\">        hour = hour&gt;12?hour-12:hour;</span><br><span class=\"line\"><span class=\"javascript\">        drawHand(hour*<span class=\"number\">5</span>+(date.getMinutes()/<span class=\"number\">60</span>)*<span class=\"number\">5</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        drawHand(date.getMinutes(),<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        drawHand(date.getSeconds(),<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawClock</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.clearRect(0,0,canvas.width,canvas.height);</span><br><span class=\"line\">        drawCircle();</span><br><span class=\"line\">        drawCenter();</span><br><span class=\"line\">        drawHands();</span><br><span class=\"line\">        drawNumbers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    context.font = fontHeight+<span class=\"string\">\"px Arial\"</span>;</span></span><br><span class=\"line\">    loop = setInterval(drawClock,1000);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/themes/blog/img/article/clock.png\" alt></p>\n"},{"title":"实现图片的懒加载","comments":1,"description":"图片, 实现图片的懒加载, 在当前网页，滑动页面到能看到图片的时候再加载图片","date":"2018-08-05T02:43:10.000Z","keywords":"图片, 实现图片的懒加载","_content":"\n懒加载： 在当前网页，滑动页面到能看到图片的时候再加载图片\n\n主要是分两步: \n1. 图片进入当前视口\n2. 加载图片\n\n## 当前视口\n\n判断图片出现在了当前视口, 可以监听页面滚动\n\n## 监听页面滚动\n\n```js\nwindow.onscroll = function(e){\n  // 页面滚动高度\n  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n}\n```\n\n## `object.getBoundingClientRect()`\n\n返回的一组矩形的集合, 即：是与该元素相关的CSS 边框集合,包含了一组用于描述边框的只读属性——`left、top、right和bottom`，单位为像素。除了 `width` 和 `height` 外的属性都是相对于视口的左上角位置而言的。\n\n![1](https://mdn.mozillademos.org/files/15087/rect.png)\n\n```js\nvar img = document.getElementById('img')\nvar imgData = img.getBoundingClientRect()\n```\n\n## 图片进入当前视口\n\n图片进入当前视口，页面滚动的高度 + 视口高度 = `img.getBoundingClientRect().top`\n\n```js\n// 视口\nvar windowH = document.documentElement.clientHeight || document.body.clientHeight\nif (scrollTop+windowH >= imgData.top && !img.getAttribute('src')) {\n\n}\n```\n\n## 图片加载\n\n```html\n<img id=\"img\" data-src = \"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\" src=\"\" alt=\"\">\n```\n\n首先`img`标签`src`为空，`data-src`属性，是`img`标签的`src`真正的内容,当判断到达视口的时候把`data-src`赋值给`src`\n\n```js\nimg.setAttribute('src', img.getAttribute('data-src'))\n```\n\n完整的html代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n</head>\n<body>\n  <div class=\"__top\" style=\"height: 1500px; width: 100%\"></div>\n  <img id=\"img\" data-src = \"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\" src=\"\" alt=\"\">\n\n</body>\n<script>\n  var img = document.getElementById('img')\n  var imgData = img.getBoundingClientRect()\n  window.onscroll = function(e){\n    var windowH = document.documentElement.clientHeight || document.body.clientHeight\n    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    if (scrollTop+windowH >= imgData.top && !img.getAttribute('src')) img.setAttribute('src', img.getAttribute('data-src'))\n  }\n</script>\n</html>\n```\n利用`widnow.onscroll`以及`getBoundingClientRect`可以实现图片的懒加载，但它不是唯一的选择\n\n## `IntersectionObserver`\n\n提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(`viewport`)交叉状态的方法\n\n参考：[IntersectionObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver)\n\n示例\n\n```js\nvar intersectionObserver = new IntersectionObserver(function(entries) {\n  // If intersectionRatio is 0, the target is out of view\n  // and we do not need to do anything.\n  if (entries[0].intersectionRatio <= 0) return;\n\n  loadItems(10);\n  console.log('Loaded new items');\n});\n// start observing\nintersectionObserver.observe(document.querySelector('.scrollerFooter'));\n```\n\n代码：\n\n```js\nvar img = document.getElementById('img')\nvar intersectionObserver = new IntersectionObserver(function(entries) {\n  // If intersectionRatio is 0, the target is out of view\n  // and we do not need to do anything.\n  if (entries[0].intersectionRatio <= 0) return;\n  if (!img.getAttribute('src'）img.setAttribute('src', img.getAttribute('data-src'))\n  console.log('Loaded new items');\n});\n// start observing\nintersectionObserver.observe(img);\n```\n\n这样也是可以监听`img`进入视口的时候， 比上一种方法更加的简单，快捷。\n\n## `Lazy loading`\n\n`Chrome`浏览器的`IMG`图片和`IFRAME`框架会支持原生懒加载特性，使用`loading=\"lazy\"`语法, 只支持`Chrome >= 76`的版本\n\n示例\n\n```js\n<img src=\"./example.jpg\" loading=\"lazy\" alt=\"hbb\">\n```\n\n兼容性较差，实际应用的较少， 这个可以只做参考\n\n\n\n\n\n\n\n","source":"_posts/js-20.md","raw":"---\ntitle: 实现图片的懒加载\ncomments: true\ndescription: 图片, 实现图片的懒加载, 在当前网页，滑动页面到能看到图片的时候再加载图片\ntags: \"js\"\ndate: 2018-8-05 10:43:10\ncategories: \"js\"\nkeywords: 图片, 实现图片的懒加载\n---\n\n懒加载： 在当前网页，滑动页面到能看到图片的时候再加载图片\n\n主要是分两步: \n1. 图片进入当前视口\n2. 加载图片\n\n## 当前视口\n\n判断图片出现在了当前视口, 可以监听页面滚动\n\n## 监听页面滚动\n\n```js\nwindow.onscroll = function(e){\n  // 页面滚动高度\n  var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n}\n```\n\n## `object.getBoundingClientRect()`\n\n返回的一组矩形的集合, 即：是与该元素相关的CSS 边框集合,包含了一组用于描述边框的只读属性——`left、top、right和bottom`，单位为像素。除了 `width` 和 `height` 外的属性都是相对于视口的左上角位置而言的。\n\n![1](https://mdn.mozillademos.org/files/15087/rect.png)\n\n```js\nvar img = document.getElementById('img')\nvar imgData = img.getBoundingClientRect()\n```\n\n## 图片进入当前视口\n\n图片进入当前视口，页面滚动的高度 + 视口高度 = `img.getBoundingClientRect().top`\n\n```js\n// 视口\nvar windowH = document.documentElement.clientHeight || document.body.clientHeight\nif (scrollTop+windowH >= imgData.top && !img.getAttribute('src')) {\n\n}\n```\n\n## 图片加载\n\n```html\n<img id=\"img\" data-src = \"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\" src=\"\" alt=\"\">\n```\n\n首先`img`标签`src`为空，`data-src`属性，是`img`标签的`src`真正的内容,当判断到达视口的时候把`data-src`赋值给`src`\n\n```js\nimg.setAttribute('src', img.getAttribute('data-src'))\n```\n\n完整的html代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n  <script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n</head>\n<body>\n  <div class=\"__top\" style=\"height: 1500px; width: 100%\"></div>\n  <img id=\"img\" data-src = \"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\" src=\"\" alt=\"\">\n\n</body>\n<script>\n  var img = document.getElementById('img')\n  var imgData = img.getBoundingClientRect()\n  window.onscroll = function(e){\n    var windowH = document.documentElement.clientHeight || document.body.clientHeight\n    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    if (scrollTop+windowH >= imgData.top && !img.getAttribute('src')) img.setAttribute('src', img.getAttribute('data-src'))\n  }\n</script>\n</html>\n```\n利用`widnow.onscroll`以及`getBoundingClientRect`可以实现图片的懒加载，但它不是唯一的选择\n\n## `IntersectionObserver`\n\n提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(`viewport`)交叉状态的方法\n\n参考：[IntersectionObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver)\n\n示例\n\n```js\nvar intersectionObserver = new IntersectionObserver(function(entries) {\n  // If intersectionRatio is 0, the target is out of view\n  // and we do not need to do anything.\n  if (entries[0].intersectionRatio <= 0) return;\n\n  loadItems(10);\n  console.log('Loaded new items');\n});\n// start observing\nintersectionObserver.observe(document.querySelector('.scrollerFooter'));\n```\n\n代码：\n\n```js\nvar img = document.getElementById('img')\nvar intersectionObserver = new IntersectionObserver(function(entries) {\n  // If intersectionRatio is 0, the target is out of view\n  // and we do not need to do anything.\n  if (entries[0].intersectionRatio <= 0) return;\n  if (!img.getAttribute('src'）img.setAttribute('src', img.getAttribute('data-src'))\n  console.log('Loaded new items');\n});\n// start observing\nintersectionObserver.observe(img);\n```\n\n这样也是可以监听`img`进入视口的时候， 比上一种方法更加的简单，快捷。\n\n## `Lazy loading`\n\n`Chrome`浏览器的`IMG`图片和`IFRAME`框架会支持原生懒加载特性，使用`loading=\"lazy\"`语法, 只支持`Chrome >= 76`的版本\n\n示例\n\n```js\n<img src=\"./example.jpg\" loading=\"lazy\" alt=\"hbb\">\n```\n\n兼容性较差，实际应用的较少， 这个可以只做参考\n\n\n\n\n\n\n\n","slug":"js-20","published":1,"updated":"2020-12-02T06:49:34.135Z","layout":"post","photos":[],"link":"","_id":"cki71walc003atl9k54yacc1f","content":"<p>懒加载： 在当前网页，滑动页面到能看到图片的时候再加载图片</p>\n<p>主要是分两步: </p>\n<ol>\n<li>图片进入当前视口</li>\n<li>加载图片</li>\n</ol>\n<h2 id=\"当前视口\"><a href=\"#当前视口\" class=\"headerlink\" title=\"当前视口\"></a>当前视口</h2><p>判断图片出现在了当前视口, 可以监听页面滚动</p>\n<h2 id=\"监听页面滚动\"><a href=\"#监听页面滚动\" class=\"headerlink\" title=\"监听页面滚动\"></a>监听页面滚动</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 页面滚动高度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"object-getBoundingClientRect\"><a href=\"#object-getBoundingClientRect\" class=\"headerlink\" title=\"object.getBoundingClientRect()\"></a><code>object.getBoundingClientRect()</code></h2><p>返回的一组矩形的集合, 即：是与该元素相关的CSS 边框集合,包含了一组用于描述边框的只读属性——<code>left、top、right和bottom</code>，单位为像素。除了 <code>width</code> 和 <code>height</code> 外的属性都是相对于视口的左上角位置而言的。</p>\n<p><img src=\"https://mdn.mozillademos.org/files/15087/rect.png\" alt=\"1\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imgData = img.getBoundingClientRect()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片进入当前视口\"><a href=\"#图片进入当前视口\" class=\"headerlink\" title=\"图片进入当前视口\"></a>图片进入当前视口</h2><p>图片进入当前视口，页面滚动的高度 + 视口高度 = <code>img.getBoundingClientRect().top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 视口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> windowH = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight</span><br><span class=\"line\"><span class=\"keyword\">if</span> (scrollTop+windowH &gt;= imgData.top &amp;&amp; !img.getAttribute(<span class=\"string\">'src'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">data-src</span> = <span class=\"string\">\"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>img</code>标签<code>src</code>为空，<code>data-src</code>属性，是<code>img</code>标签的<code>src</code>真正的内容,当判断到达视口的时候把<code>data-src</code>赋值给<code>src</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>完整的html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__top\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 1500px; width: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">data-src</span> = <span class=\"string\">\"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> imgData = img.getBoundingClientRect()</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> windowH = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (scrollTop+windowH &gt;= imgData.top &amp;&amp; !img.getAttribute(<span class=\"string\">'src'</span>)) img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用<code>widnow.onscroll</code>以及<code>getBoundingClientRect</code>可以实现图片的懒加载，但它不是唯一的选择</p>\n<h2 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a><code>IntersectionObserver</code></h2><p>提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(<code>viewport</code>)交叉状态的方法</p>\n<p>参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver\" target=\"_blank\" rel=\"noopener\">IntersectionObserver</a></p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If intersectionRatio is 0, the target is out of view</span></span><br><span class=\"line\">  <span class=\"comment\">// and we do not need to do anything.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entries[<span class=\"number\">0</span>].intersectionRatio &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadItems(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded new items'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// start observing</span></span><br><span class=\"line\">intersectionObserver.observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scrollerFooter'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If intersectionRatio is 0, the target is out of view</span></span><br><span class=\"line\">  <span class=\"comment\">// and we do not need to do anything.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entries[<span class=\"number\">0</span>].intersectionRatio &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!img.getAttribute(<span class=\"string\">'src'</span>）img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded new items'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// start observing</span></span><br><span class=\"line\">intersectionObserver.observe(img);</span><br></pre></td></tr></table></figure>\n\n<p>这样也是可以监听<code>img</code>进入视口的时候， 比上一种方法更加的简单，快捷。</p>\n<h2 id=\"Lazy-loading\"><a href=\"#Lazy-loading\" class=\"headerlink\" title=\"Lazy loading\"></a><code>Lazy loading</code></h2><p><code>Chrome</code>浏览器的<code>IMG</code>图片和<code>IFRAME</code>框架会支持原生懒加载特性，使用<code>loading=&quot;lazy&quot;</code>语法, 只支持<code>Chrome &gt;= 76</code>的版本</p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"./example.jpg\"</span> loading=<span class=\"string\">\"lazy\"</span> alt=<span class=\"string\">\"hbb\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>兼容性较差，实际应用的较少， 这个可以只做参考</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>懒加载： 在当前网页，滑动页面到能看到图片的时候再加载图片</p>\n<p>主要是分两步: </p>\n<ol>\n<li>图片进入当前视口</li>\n<li>加载图片</li>\n</ol>\n<h2 id=\"当前视口\"><a href=\"#当前视口\" class=\"headerlink\" title=\"当前视口\"></a>当前视口</h2><p>判断图片出现在了当前视口, 可以监听页面滚动</p>\n<h2 id=\"监听页面滚动\"><a href=\"#监听页面滚动\" class=\"headerlink\" title=\"监听页面滚动\"></a>监听页面滚动</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 页面滚动高度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"object-getBoundingClientRect\"><a href=\"#object-getBoundingClientRect\" class=\"headerlink\" title=\"object.getBoundingClientRect()\"></a><code>object.getBoundingClientRect()</code></h2><p>返回的一组矩形的集合, 即：是与该元素相关的CSS 边框集合,包含了一组用于描述边框的只读属性——<code>left、top、right和bottom</code>，单位为像素。除了 <code>width</code> 和 <code>height</code> 外的属性都是相对于视口的左上角位置而言的。</p>\n<p><img src=\"https://mdn.mozillademos.org/files/15087/rect.png\" alt=\"1\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> imgData = img.getBoundingClientRect()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片进入当前视口\"><a href=\"#图片进入当前视口\" class=\"headerlink\" title=\"图片进入当前视口\"></a>图片进入当前视口</h2><p>图片进入当前视口，页面滚动的高度 + 视口高度 = <code>img.getBoundingClientRect().top</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 视口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> windowH = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight</span><br><span class=\"line\"><span class=\"keyword\">if</span> (scrollTop+windowH &gt;= imgData.top &amp;&amp; !img.getAttribute(<span class=\"string\">'src'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">data-src</span> = <span class=\"string\">\"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>img</code>标签<code>src</code>为空，<code>data-src</code>属性，是<code>img</code>标签的<code>src</code>真正的内容,当判断到达视口的时候把<code>data-src</code>赋值给<code>src</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>完整的html代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__top\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 1500px; width: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">data-src</span> = <span class=\"string\">\"https://img.jkximg.com/img/20191031/7d3cd8ba8f4249e3ab9a0b6ff6fcc7f2.jpg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> imgData = img.getBoundingClientRect()</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> windowH = <span class=\"built_in\">document</span>.documentElement.clientHeight || <span class=\"built_in\">document</span>.body.clientHeight</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (scrollTop+windowH &gt;= imgData.top &amp;&amp; !img.getAttribute(<span class=\"string\">'src'</span>)) img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用<code>widnow.onscroll</code>以及<code>getBoundingClientRect</code>可以实现图片的懒加载，但它不是唯一的选择</p>\n<h2 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a><code>IntersectionObserver</code></h2><p>提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(<code>viewport</code>)交叉状态的方法</p>\n<p>参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver\" target=\"_blank\" rel=\"noopener\">IntersectionObserver</a></p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If intersectionRatio is 0, the target is out of view</span></span><br><span class=\"line\">  <span class=\"comment\">// and we do not need to do anything.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entries[<span class=\"number\">0</span>].intersectionRatio &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadItems(<span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded new items'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// start observing</span></span><br><span class=\"line\">intersectionObserver.observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scrollerFooter'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If intersectionRatio is 0, the target is out of view</span></span><br><span class=\"line\">  <span class=\"comment\">// and we do not need to do anything.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entries[<span class=\"number\">0</span>].intersectionRatio &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!img.getAttribute(<span class=\"string\">'src'</span>）img.setAttribute(<span class=\"string\">'src'</span>, img.getAttribute(<span class=\"string\">'data-src'</span>))</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded new items'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// start observing</span></span><br><span class=\"line\">intersectionObserver.observe(img);</span><br></pre></td></tr></table></figure>\n\n<p>这样也是可以监听<code>img</code>进入视口的时候， 比上一种方法更加的简单，快捷。</p>\n<h2 id=\"Lazy-loading\"><a href=\"#Lazy-loading\" class=\"headerlink\" title=\"Lazy loading\"></a><code>Lazy loading</code></h2><p><code>Chrome</code>浏览器的<code>IMG</code>图片和<code>IFRAME</code>框架会支持原生懒加载特性，使用<code>loading=&quot;lazy&quot;</code>语法, 只支持<code>Chrome &gt;= 76</code>的版本</p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"./example.jpg\"</span> loading=<span class=\"string\">\"lazy\"</span> alt=<span class=\"string\">\"hbb\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>兼容性较差，实际应用的较少， 这个可以只做参考</p>\n"},{"title":"map, filter, reduce","comments":1,"description":"map, filter, reduce","date":"2018-01-21T04:53:10.000Z","keywords":"map, filter, reduce","_content":"\n## Map\n\n`map()`方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n### 参数\n\ncallback\n\n  生成新数组元素的函数，使用三个参数：\n\n  1. `currentValue`\n\n\n     - `callback` 数组中正在处理的当前元素。\n\n\n     - `index`可选\n\n\n     - `callback` 数组中正在处理的当前元素的索引。\n\n     - `array`可选\n    `map` 方法调用的数组。\n  2. `thisArg`可选\n执行 `callback` 函数时值被用作`this`。\n\n## filter\n\n`filter()` 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。\n\n### 参数\n\n1. callback\n\n\n  用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。\n  \n  它接受以下三个参数：\n\n   - element\n   数组中当前正在处理的元素。\n   - index可选\n   正在处理的元素在数组中的索引。\n   - array可选\n   调用了 `filter` 的数组本身。\n\n2. thisArg可选\n执行 `callback` 时，用于 `this` 的值。\n\n## reduce\n\n`reduce()` 方法对数组中的每个元素执行一个由您提供的`reducer`函数(升序执行)，将其结果汇总为单个返回值。\n\n### 参数\n\n1. callback\n  执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：\n  \n   - accumulator\n   累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或`initialValue`（见于下方）。\n\n   - currentValue\n   数组中正在处理的元素。\n   `index` 可选\n   数组中正在处理的当前元素的索引。 如果提供了`initialValue`，则起始索引号为0，否则从索引1起始。\n\n   - array可选\n   调用reduce()的数组\n\n2. initialValue可选\n作为第一次调用 `callback`函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 `reduce` 将报错。\n\n## every\n\n`every()` 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n\n### 参数\n\n1. `callback`\n用来测试每个元素的函数，它可以接收三个参数：\n\n   - element\n   用于测试的当前值。\n   - index可选\n   用于测试的当前值的索引。\n   - array可选\n   调用 every 的当前数组。\n\n2.`thisArg`\n执行 `callback` 时使用的 `this` 值。\n\n## some\n\n`some()` 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。\n\n### 参数\n\n1. `callback`\n用来测试每个元素的函数，接受三个参数：\n\n  - element\n  数组中正在处理的元素。\n  - index 可选\n  数组中正在处理的元素的索引值。\n  - array可选\n  some()被调用的数组。\n\n2. `thisArg`可选\n执行 `callback` 时使用的 `this` 值。\n\n## 示例\n\n常考面试题\n\n```js\n[\"1\", \"2\", \"3\"].map(parseInt);\n```\n\n我们期望输出 [1, 2, 3], 而实际结果是 [1, NaN, NaN].\n\n`parseInt` 经常被带着一个参数使用, 却消耗两个。第一个参数是一个表达式而第二个是`callback function`的基, `Array.prototype.map` 传递3个参数\n第三个参数被parseInt忽视了\n\n```js\n// parseInt(string, radix) -> map(parseInt(value, index))\n/*  first iteration (index is 0): */ parseInt(\"1\", 0); // 1\n/* second iteration (index is 1): */ parseInt(\"2\", 1); // NaN\n/*  third iteration (index is 2): */ parseInt(\"3\", 2); // NaN\n```\n\n参考资料：[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)","source":"_posts/js-21.md","raw":"---\ntitle: map, filter, reduce\ncomments: true\ndescription: map, filter, reduce\ntags: \"js\"\ndate: 2018-1-21 12:53:10\ncategories: \"js\"\nkeywords: map, filter, reduce\n---\n\n## Map\n\n`map()`方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n### 参数\n\ncallback\n\n  生成新数组元素的函数，使用三个参数：\n\n  1. `currentValue`\n\n\n     - `callback` 数组中正在处理的当前元素。\n\n\n     - `index`可选\n\n\n     - `callback` 数组中正在处理的当前元素的索引。\n\n     - `array`可选\n    `map` 方法调用的数组。\n  2. `thisArg`可选\n执行 `callback` 函数时值被用作`this`。\n\n## filter\n\n`filter()` 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。\n\n### 参数\n\n1. callback\n\n\n  用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。\n  \n  它接受以下三个参数：\n\n   - element\n   数组中当前正在处理的元素。\n   - index可选\n   正在处理的元素在数组中的索引。\n   - array可选\n   调用了 `filter` 的数组本身。\n\n2. thisArg可选\n执行 `callback` 时，用于 `this` 的值。\n\n## reduce\n\n`reduce()` 方法对数组中的每个元素执行一个由您提供的`reducer`函数(升序执行)，将其结果汇总为单个返回值。\n\n### 参数\n\n1. callback\n  执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：\n  \n   - accumulator\n   累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或`initialValue`（见于下方）。\n\n   - currentValue\n   数组中正在处理的元素。\n   `index` 可选\n   数组中正在处理的当前元素的索引。 如果提供了`initialValue`，则起始索引号为0，否则从索引1起始。\n\n   - array可选\n   调用reduce()的数组\n\n2. initialValue可选\n作为第一次调用 `callback`函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 `reduce` 将报错。\n\n## every\n\n`every()` 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n\n### 参数\n\n1. `callback`\n用来测试每个元素的函数，它可以接收三个参数：\n\n   - element\n   用于测试的当前值。\n   - index可选\n   用于测试的当前值的索引。\n   - array可选\n   调用 every 的当前数组。\n\n2.`thisArg`\n执行 `callback` 时使用的 `this` 值。\n\n## some\n\n`some()` 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。\n\n### 参数\n\n1. `callback`\n用来测试每个元素的函数，接受三个参数：\n\n  - element\n  数组中正在处理的元素。\n  - index 可选\n  数组中正在处理的元素的索引值。\n  - array可选\n  some()被调用的数组。\n\n2. `thisArg`可选\n执行 `callback` 时使用的 `this` 值。\n\n## 示例\n\n常考面试题\n\n```js\n[\"1\", \"2\", \"3\"].map(parseInt);\n```\n\n我们期望输出 [1, 2, 3], 而实际结果是 [1, NaN, NaN].\n\n`parseInt` 经常被带着一个参数使用, 却消耗两个。第一个参数是一个表达式而第二个是`callback function`的基, `Array.prototype.map` 传递3个参数\n第三个参数被parseInt忽视了\n\n```js\n// parseInt(string, radix) -> map(parseInt(value, index))\n/*  first iteration (index is 0): */ parseInt(\"1\", 0); // 1\n/* second iteration (index is 1): */ parseInt(\"2\", 1); // NaN\n/*  third iteration (index is 2): */ parseInt(\"3\", 2); // NaN\n```\n\n参考资料：[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)","slug":"js-21","published":1,"updated":"2020-12-02T06:49:34.136Z","layout":"post","photos":[],"link":"","_id":"cki71wald003etl9kxcn13prq","content":"<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p><code>map()</code>方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>callback</p>\n<p>  生成新数组元素的函数，使用三个参数：</p>\n<ol>\n<li><code>currentValue</code></li>\n</ol>\n<pre><code> - `callback` 数组中正在处理的当前元素。\n\n\n - `index`可选\n\n\n - `callback` 数组中正在处理的当前元素的索引。\n\n - `array`可选\n`map` 方法调用的数组。</code></pre><ol start=\"2\">\n<li><code>thisArg</code>可选<br>执行 <code>callback</code> 函数时值被用作<code>this</code>。</li>\n</ol>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p><code>filter()</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>callback</li>\n</ol>\n<p>  用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。</p>\n<p>  它接受以下三个参数：</p>\n<ul>\n<li>element<br>数组中当前正在处理的元素。</li>\n<li>index可选<br>正在处理的元素在数组中的索引。</li>\n<li>array可选<br>调用了 <code>filter</code> 的数组本身。</li>\n</ul>\n<ol start=\"2\">\n<li>thisArg可选<br>执行 <code>callback</code> 时，用于 <code>this</code> 的值。</li>\n</ol>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的<code>reducer</code>函数(升序执行)，将其结果汇总为单个返回值。</p>\n<h3 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p>callback<br>执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：</p>\n<ul>\n<li><p>accumulator<br>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code>（见于下方）。</p>\n</li>\n<li><p>currentValue<br>数组中正在处理的元素。<br><code>index</code> 可选<br>数组中正在处理的当前元素的索引。 如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</p>\n</li>\n<li><p>array可选<br>调用reduce()的数组</p>\n</li>\n</ul>\n</li>\n<li><p>initialValue可选<br>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 <code>reduce</code> 将报错。</p>\n</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p>\n<h3 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p><code>callback</code><br>用来测试每个元素的函数，它可以接收三个参数：</p>\n<ul>\n<li>element<br>用于测试的当前值。</li>\n<li>index可选<br>用于测试的当前值的索引。</li>\n<li>array可选<br>调用 every 的当前数组。</li>\n</ul>\n</li>\n</ol>\n<p>2.<code>thisArg</code><br>执行 <code>callback</code> 时使用的 <code>this</code> 值。</p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><p><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>\n<h3 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p><code>callback</code><br>用来测试每个元素的函数，接受三个参数：</p>\n<ul>\n<li>element<br>数组中正在处理的元素。</li>\n<li>index 可选<br>数组中正在处理的元素的索引值。</li>\n<li>array可选<br>some()被调用的数组。</li>\n</ul>\n</li>\n<li><p><code>thisArg</code>可选<br>执行 <code>callback</code> 时使用的 <code>this</code> 值。</p>\n</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>常考面试题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们期望输出 [1, 2, 3], 而实际结果是 [1, NaN, NaN].</p>\n<p><code>parseInt</code> 经常被带着一个参数使用, 却消耗两个。第一个参数是一个表达式而第二个是<code>callback function</code>的基, <code>Array.prototype.map</code> 传递3个参数<br>第三个参数被parseInt忽视了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parseInt(string, radix) -&gt; map(parseInt(value, index))</span></span><br><span class=\"line\"><span class=\"comment\">/*  first iteration (index is 0): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"1\"</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">/* second iteration (index is 1): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"2\"</span>, <span class=\"number\">1</span>); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">/*  third iteration (index is 2): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"3\"</span>, <span class=\"number\">2</span>); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p><code>map()</code>方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>callback</p>\n<p>  生成新数组元素的函数，使用三个参数：</p>\n<ol>\n<li><code>currentValue</code></li>\n</ol>\n<pre><code> - `callback` 数组中正在处理的当前元素。\n\n\n - `index`可选\n\n\n - `callback` 数组中正在处理的当前元素的索引。\n\n - `array`可选\n`map` 方法调用的数组。</code></pre><ol start=\"2\">\n<li><code>thisArg</code>可选<br>执行 <code>callback</code> 函数时值被用作<code>this</code>。</li>\n</ol>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p><code>filter()</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>callback</li>\n</ol>\n<p>  用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。</p>\n<p>  它接受以下三个参数：</p>\n<ul>\n<li>element<br>数组中当前正在处理的元素。</li>\n<li>index可选<br>正在处理的元素在数组中的索引。</li>\n<li>array可选<br>调用了 <code>filter</code> 的数组本身。</li>\n</ul>\n<ol start=\"2\">\n<li>thisArg可选<br>执行 <code>callback</code> 时，用于 <code>this</code> 的值。</li>\n</ol>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的<code>reducer</code>函数(升序执行)，将其结果汇总为单个返回值。</p>\n<h3 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p>callback<br>执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：</p>\n<ul>\n<li><p>accumulator<br>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code>（见于下方）。</p>\n</li>\n<li><p>currentValue<br>数组中正在处理的元素。<br><code>index</code> 可选<br>数组中正在处理的当前元素的索引。 如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</p>\n</li>\n<li><p>array可选<br>调用reduce()的数组</p>\n</li>\n</ul>\n</li>\n<li><p>initialValue可选<br>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 <code>reduce</code> 将报错。</p>\n</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p>\n<h3 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p><code>callback</code><br>用来测试每个元素的函数，它可以接收三个参数：</p>\n<ul>\n<li>element<br>用于测试的当前值。</li>\n<li>index可选<br>用于测试的当前值的索引。</li>\n<li>array可选<br>调用 every 的当前数组。</li>\n</ul>\n</li>\n</ol>\n<p>2.<code>thisArg</code><br>执行 <code>callback</code> 时使用的 <code>this</code> 值。</p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><p><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>\n<h3 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><p><code>callback</code><br>用来测试每个元素的函数，接受三个参数：</p>\n<ul>\n<li>element<br>数组中正在处理的元素。</li>\n<li>index 可选<br>数组中正在处理的元素的索引值。</li>\n<li>array可选<br>some()被调用的数组。</li>\n</ul>\n</li>\n<li><p><code>thisArg</code>可选<br>执行 <code>callback</code> 时使用的 <code>this</code> 值。</p>\n</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>常考面试题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们期望输出 [1, 2, 3], 而实际结果是 [1, NaN, NaN].</p>\n<p><code>parseInt</code> 经常被带着一个参数使用, 却消耗两个。第一个参数是一个表达式而第二个是<code>callback function</code>的基, <code>Array.prototype.map</code> 传递3个参数<br>第三个参数被parseInt忽视了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parseInt(string, radix) -&gt; map(parseInt(value, index))</span></span><br><span class=\"line\"><span class=\"comment\">/*  first iteration (index is 0): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"1\"</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">/* second iteration (index is 1): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"2\"</span>, <span class=\"number\">1</span>); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">/*  third iteration (index is 2): */</span> <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"3\"</span>, <span class=\"number\">2</span>); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n"},{"title":"防抖与节流","comments":1,"description":"防抖与节流","date":"2018-01-06T01:50:23.000Z","keywords":"防抖,节流","_content":"\n## 节流\n\n我们网站经常会有这样的需求，就是滚动浏览器滚动条的时候，更新页面上的某些布局内容或者去调用后台的某接口查询内容。同样的，如果不对函数调用的频率加以限制的话，那么可能我们滚动一次滚动条就会产生N次的调用了。但是这次的情况跟上面的有所不同，我们不是要在每完成等待某个时间后去执行某函数，而是要**每间隔某个时间去执行某函数，避免函数的过多执行，这个方式就叫函数节流**。\n\n```js\n  var _throttle = function (func, delay) {\n    var timer\n    return function () {\n      var context = this, args = arguments\n      if (!timer) {\n        timer = setTimeout(function(){\n          func.apply(context, arguments)\n          clearTimeout(timer)\n          timer = null\n        }, delay)\n      }\n    }\n  }\n```\n## 防抖\n\n函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。\n\n```js\nvar _debounce = function(func, delay) {\n    var timer\n    return function(){\n      clearTimeout(timer)\n      var context = this, args = arguments\n      timer = setTimeout(function() {\n        func.apply(context, args)\n      }, delay)\n    }\n  }\n```\n\n### 示例\n\n[狠戳这里](https://codepen.io/hbbaly/pen/xxxzWoG)\n\n## 防抖改进\n\n让一个函数只有在你不断触发后停下来歇会才开始执行，中间你操作得太快它直接无视你。这样做就有点太绝了。`resize` 一般还好，但假如你写一个拖拽元素位置的程序，然后直接使用函数节流，那恭喜你，你会发现你拖动时元素是不动的，你拖完了，它直接闪到终点去。\n\n```js\n  var _debouncePro = function (func, delay, mustRunTime) {\n    var timerpro , now \n    return function () {\n      var cur = new Date().getTime()\n      var context = this, args = arguments\n      if (!now) now = cur\n      if (cur - now >= mustRunTime * 1000) {\n        func.apply(context, args)\n        now = cur\n      } else {\n        timer = setTimeout(function () {\n          func.apply(context, args)\n        }, delay)\n      }\n    }\n  }\n```\n\n设置第三个参数，即必然触发执行的时间间隔\n\n一开始记录第一次调用的时间戳，然后每次调用函数都去拿最新的时间跟记录时间比，超出给定的时间就执行一次，更新记录时间。\n\n[狠戳这里](https://codepen.io/hbbaly/pen/abbKGMW)\n","source":"_posts/js-22.md","raw":"---\ntitle: 防抖与节流\ncomments: true\ndescription: 防抖与节流\ntags: \"js\"\ndate: 2018-1-06 09:50:23\ncategories: \"js\"\nkeywords: 防抖,节流\n---\n\n## 节流\n\n我们网站经常会有这样的需求，就是滚动浏览器滚动条的时候，更新页面上的某些布局内容或者去调用后台的某接口查询内容。同样的，如果不对函数调用的频率加以限制的话，那么可能我们滚动一次滚动条就会产生N次的调用了。但是这次的情况跟上面的有所不同，我们不是要在每完成等待某个时间后去执行某函数，而是要**每间隔某个时间去执行某函数，避免函数的过多执行，这个方式就叫函数节流**。\n\n```js\n  var _throttle = function (func, delay) {\n    var timer\n    return function () {\n      var context = this, args = arguments\n      if (!timer) {\n        timer = setTimeout(function(){\n          func.apply(context, arguments)\n          clearTimeout(timer)\n          timer = null\n        }, delay)\n      }\n    }\n  }\n```\n## 防抖\n\n函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。\n\n```js\nvar _debounce = function(func, delay) {\n    var timer\n    return function(){\n      clearTimeout(timer)\n      var context = this, args = arguments\n      timer = setTimeout(function() {\n        func.apply(context, args)\n      }, delay)\n    }\n  }\n```\n\n### 示例\n\n[狠戳这里](https://codepen.io/hbbaly/pen/xxxzWoG)\n\n## 防抖改进\n\n让一个函数只有在你不断触发后停下来歇会才开始执行，中间你操作得太快它直接无视你。这样做就有点太绝了。`resize` 一般还好，但假如你写一个拖拽元素位置的程序，然后直接使用函数节流，那恭喜你，你会发现你拖动时元素是不动的，你拖完了，它直接闪到终点去。\n\n```js\n  var _debouncePro = function (func, delay, mustRunTime) {\n    var timerpro , now \n    return function () {\n      var cur = new Date().getTime()\n      var context = this, args = arguments\n      if (!now) now = cur\n      if (cur - now >= mustRunTime * 1000) {\n        func.apply(context, args)\n        now = cur\n      } else {\n        timer = setTimeout(function () {\n          func.apply(context, args)\n        }, delay)\n      }\n    }\n  }\n```\n\n设置第三个参数，即必然触发执行的时间间隔\n\n一开始记录第一次调用的时间戳，然后每次调用函数都去拿最新的时间跟记录时间比，超出给定的时间就执行一次，更新记录时间。\n\n[狠戳这里](https://codepen.io/hbbaly/pen/abbKGMW)\n","slug":"js-22","published":1,"updated":"2020-12-02T06:49:34.137Z","layout":"post","photos":[],"link":"","_id":"cki71wale003itl9kdo0owz4f","content":"<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>我们网站经常会有这样的需求，就是滚动浏览器滚动条的时候，更新页面上的某些布局内容或者去调用后台的某接口查询内容。同样的，如果不对函数调用的频率加以限制的话，那么可能我们滚动一次滚动条就会产生N次的调用了。但是这次的情况跟上面的有所不同，我们不是要在每完成等待某个时间后去执行某函数，而是要<strong>每间隔某个时间去执行某函数，避免函数的过多执行，这个方式就叫函数节流</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        func.apply(context, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        func.apply(context, args)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><a href=\"https://codepen.io/hbbaly/pen/xxxzWoG\" target=\"_blank\" rel=\"noopener\">狠戳这里</a></p>\n<h2 id=\"防抖改进\"><a href=\"#防抖改进\" class=\"headerlink\" title=\"防抖改进\"></a>防抖改进</h2><p>让一个函数只有在你不断触发后停下来歇会才开始执行，中间你操作得太快它直接无视你。这样做就有点太绝了。<code>resize</code> 一般还好，但假如你写一个拖拽元素位置的程序，然后直接使用函数节流，那恭喜你，你会发现你拖动时元素是不动的，你拖完了，它直接闪到终点去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _debouncePro = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, delay, mustRunTime</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerpro , now </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!now) now = cur</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur - now &gt;= mustRunTime * <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">      func.apply(context, args)</span><br><span class=\"line\">      now = cur</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        func.apply(context, args)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置第三个参数，即必然触发执行的时间间隔</p>\n<p>一开始记录第一次调用的时间戳，然后每次调用函数都去拿最新的时间跟记录时间比，超出给定的时间就执行一次，更新记录时间。</p>\n<p><a href=\"https://codepen.io/hbbaly/pen/abbKGMW\" target=\"_blank\" rel=\"noopener\">狠戳这里</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>我们网站经常会有这样的需求，就是滚动浏览器滚动条的时候，更新页面上的某些布局内容或者去调用后台的某接口查询内容。同样的，如果不对函数调用的频率加以限制的话，那么可能我们滚动一次滚动条就会产生N次的调用了。但是这次的情况跟上面的有所不同，我们不是要在每完成等待某个时间后去执行某函数，而是要<strong>每间隔某个时间去执行某函数，避免函数的过多执行，这个方式就叫函数节流</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _throttle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        func.apply(context, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>函数防抖就是让某个函数在上一次执行后，满足等待某个时间内不再触发此函数后再执行，而在这个等待时间内再次触发此函数，等待时间会重新计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        func.apply(context, args)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><a href=\"https://codepen.io/hbbaly/pen/xxxzWoG\" target=\"_blank\" rel=\"noopener\">狠戳这里</a></p>\n<h2 id=\"防抖改进\"><a href=\"#防抖改进\" class=\"headerlink\" title=\"防抖改进\"></a>防抖改进</h2><p>让一个函数只有在你不断触发后停下来歇会才开始执行，中间你操作得太快它直接无视你。这样做就有点太绝了。<code>resize</code> 一般还好，但假如你写一个拖拽元素位置的程序，然后直接使用函数节流，那恭喜你，你会发现你拖动时元素是不动的，你拖完了，它直接闪到终点去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _debouncePro = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, delay, mustRunTime</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerpro , now </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!now) now = cur</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur - now &gt;= mustRunTime * <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">      func.apply(context, args)</span><br><span class=\"line\">      now = cur</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        func.apply(context, args)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置第三个参数，即必然触发执行的时间间隔</p>\n<p>一开始记录第一次调用的时间戳，然后每次调用函数都去拿最新的时间跟记录时间比，超出给定的时间就执行一次，更新记录时间。</p>\n<p><a href=\"https://codepen.io/hbbaly/pen/abbKGMW\" target=\"_blank\" rel=\"noopener\">狠戳这里</a></p>\n"},{"title":"css妙用","comments":1,"description":"css, 动画, 过渡","date":"2018-05-28T02:29:43.000Z","keywords":"css, 动画, 过渡","_content":"\n## css实现滚动进度条\n\n```html\n<body>\n  <div class=\"scroll\"></div>\n</body>\n```\n\n```css\n  *{\n    margin: 0;\n    padding: 0;\n  }\n  body{\n      overflow-x: hidden;\n      overflow-y: scroll;\n      background-image: linear-gradient(to top right, blue 50%, #fff 50%);\n      background-size: 101% calc(100% - 100vh + 5px);\n      background-repeat: no-repeat;\n      z-index: 1;\n  }\n  body:after{\n      content: '';\n      position: fixed;\n      top: 5px;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: #fff;\n      z-index: -1;\n  }\n  .scroll{\n      width: 100%;\n      height: 3000px;\n  }\n```\n效果图： [点击这里](https://codepen.io/hbbaly/pen/MWWBxxB)\n\n\n## css实现圆环进度条\n\n```html\n<div class=\"scroll\">\n  <div class=\"circle\">\n    HOVER\n  </div>\n  <div class=\"shadow\">\n    <div class=\"shadow-circle\">hover</div>\n  </div>\n</div>\n```\n\n```css\n.circle{\n  position: relative;\n  width: 120px;\n  height: 120px;\n  margin: 20px auto;\n  line-height: 120px;\n  text-align: center;\n  border-radius: 50%;\n  transition: color 1s;\n  cursor: pointer;\n}\n.circle:after, .circle:before{\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 50%; \n  border: 3px solid transparent;\n}\n.circle:hover{\n\n}\n.circle:hover::before{\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 120px;\n  height: 120px;\n  border-color: #f60;\n  transition: border-top-color .25s linear,\n              border-right-color .25s linear,\n              border-bottom-color .25s linear,\n              border-left-color .25s linear;\n  transition-delay: 0s, .25s, .5s, .75s;\n}\n.circle:hover::after{\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 120px;\n  height: 120px;\n  border-top: 3px solid #f60;\n  transform: rotate(270deg);\n  transition: transform .75s linear;\n  transition-delay: 0.0s;\n}\n.shadow{\n  position: relative;\n  overflow: hidden;\n  width: 124px;\n  height: 124px;\n  margin: 20px auto;\n  border-radius: 50%;\n}\n.shadow-circle{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 120px;\n  height: 120px;\n  line-height: 120px;\n  border-radius: 50%;\n  color: #fff;\n  font-size: 20px;\n  cursor: pointer;\n  box-shadow: 60px -60px 0 2px #f60, -60px -60px 0 2px #f60,\n      -60px 60px 0 2px #f60, 60px 60px 0 2px #f60;\n  text-align: center;\n}\n.shadow-circle:hover{\n  animation: border-circle .7s ease forwards;\n}\n@keyframes border-circle{\n  0% {\n    box-shadow: 60px -60px 0 2px #f60, -60px -60px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  25% {\n    box-shadow: 0 -125px 0 2px #f60, -60px -60px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  50% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  75% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, 0px 125px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  100% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, 0px 125px 0 2px #f60, 120px 40px 0 2px #f60, 0 0 0 2px blue;\n  } \n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/ExxpMzJ)\n\n## button进度效果\n\n```html\n<div class=\"button\">\n  button\n</div>\n```\n\n```css\n.button{\n  position: relative;\n  width: 120px;\n  height: 60px;\n  line-height: 60px;\n  box-shadow: inset 0 0 0 3px #fff;\n  margin: 50px auto;\n  text-align: center;\n  color: #000;\n  font-size: 32px;\n  cursor: pointer;\n  transition: color 1s;\n}\n.button:after, .button:before{\n  content: \"\";\n  position: absolute;\n  width: 0;\n  height: 0;\n  top: 0;\n  left: 0;\n  box-sizing: border-box;\n  border: 3px solid transparent;\n}\n.button:after {\n  top: unset;\n  left: unset;\n  right: 0;\n  bottom: 0;\n}\n.button:hover {\n  color: #f60;\n  border: none;\n}\n.button:hover::before{\n  transition: width .25s, height .25s, border-bottom-color 0s;\n  transition-delay: .25s, 0s, .25s;\n  width: 120px;\n  height: 60px;\n  border-left: 3px solid #f60;\n  border-bottom: 3px solid #f60;\n}\n.button:hover::after{\n  transition: width .5s, height .5s, border-right-color .5s;\n  transition-delay: 0.75s, 0.5s, 0.5s;\n  width: 120px;\n  height: 60px;\n  border-top: 3px solid #f60;\n  border-right: 3px solid #f60;\n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/BaaPbXZ)\n\n## 优惠券样式\n\n```html\n<div class=\"coupon\">\n  100.00\n</div>\n```\n\n```css\n.coupon{\n  position: relative;\n  width: 400px;\n  height: 160px;\n  margin: 20px auto;\n  color: #fff;\n  font-size: 50px;\n  text-indent: 40px;\n  line-height: 160px;\n  background-image: radial-gradient(circle at 1px 8px,transparent 6px, #f60 6px, #f60 0),\n                    radial-gradient(circle at 199px 8px, transparent 6px, #f60 6px, #f60 0);\n  background-size: 200px 18px;\n  background-position: 0 0, 200px 0;\n  background-repeat-x: no-repeat;\n}\n.coupon::before{\n  position: absolute;\n  content: \"\";\n  left: 240px;\n  top: 0;\n  bottom : 0;\n  width: 0;\n  border-left: 1px dashed #fff;\n}\n.coupon::after{\n  content: \"立即领取\";\n  position: absolute;\n  width: 70px;\n  top: 50%;\n  right: 2%;\n  transform: translate(-50%, -50%);\n  line-height: 40px;\n  text-indent: 5px;\n  font-size: 30px;\n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/mddjgbO)","source":"_posts/js-23.md","raw":"---\ntitle: css妙用\ncomments: true\ndescription: css, 动画, 过渡\ntags: \"css\"\ndate: 2018-5-28 10:29:43\ncategories: \"css\"\nkeywords: css, 动画, 过渡\n---\n\n## css实现滚动进度条\n\n```html\n<body>\n  <div class=\"scroll\"></div>\n</body>\n```\n\n```css\n  *{\n    margin: 0;\n    padding: 0;\n  }\n  body{\n      overflow-x: hidden;\n      overflow-y: scroll;\n      background-image: linear-gradient(to top right, blue 50%, #fff 50%);\n      background-size: 101% calc(100% - 100vh + 5px);\n      background-repeat: no-repeat;\n      z-index: 1;\n  }\n  body:after{\n      content: '';\n      position: fixed;\n      top: 5px;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: #fff;\n      z-index: -1;\n  }\n  .scroll{\n      width: 100%;\n      height: 3000px;\n  }\n```\n效果图： [点击这里](https://codepen.io/hbbaly/pen/MWWBxxB)\n\n\n## css实现圆环进度条\n\n```html\n<div class=\"scroll\">\n  <div class=\"circle\">\n    HOVER\n  </div>\n  <div class=\"shadow\">\n    <div class=\"shadow-circle\">hover</div>\n  </div>\n</div>\n```\n\n```css\n.circle{\n  position: relative;\n  width: 120px;\n  height: 120px;\n  margin: 20px auto;\n  line-height: 120px;\n  text-align: center;\n  border-radius: 50%;\n  transition: color 1s;\n  cursor: pointer;\n}\n.circle:after, .circle:before{\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 50%; \n  border: 3px solid transparent;\n}\n.circle:hover{\n\n}\n.circle:hover::before{\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 120px;\n  height: 120px;\n  border-color: #f60;\n  transition: border-top-color .25s linear,\n              border-right-color .25s linear,\n              border-bottom-color .25s linear,\n              border-left-color .25s linear;\n  transition-delay: 0s, .25s, .5s, .75s;\n}\n.circle:hover::after{\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 120px;\n  height: 120px;\n  border-top: 3px solid #f60;\n  transform: rotate(270deg);\n  transition: transform .75s linear;\n  transition-delay: 0.0s;\n}\n.shadow{\n  position: relative;\n  overflow: hidden;\n  width: 124px;\n  height: 124px;\n  margin: 20px auto;\n  border-radius: 50%;\n}\n.shadow-circle{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 120px;\n  height: 120px;\n  line-height: 120px;\n  border-radius: 50%;\n  color: #fff;\n  font-size: 20px;\n  cursor: pointer;\n  box-shadow: 60px -60px 0 2px #f60, -60px -60px 0 2px #f60,\n      -60px 60px 0 2px #f60, 60px 60px 0 2px #f60;\n  text-align: center;\n}\n.shadow-circle:hover{\n  animation: border-circle .7s ease forwards;\n}\n@keyframes border-circle{\n  0% {\n    box-shadow: 60px -60px 0 2px #f60, -60px -60px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  25% {\n    box-shadow: 0 -125px 0 2px #f60, -60px -60px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  50% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, -60px 60px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  75% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, 0px 125px 0 2px #f60, 60px 60px 0 2px #f60, 0 0 0 2px blue;\n  }\n  100% {\n    box-shadow: 0 -125px 0 2px #f60, -125px 0px 0 2px #f60, 0px 125px 0 2px #f60, 120px 40px 0 2px #f60, 0 0 0 2px blue;\n  } \n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/ExxpMzJ)\n\n## button进度效果\n\n```html\n<div class=\"button\">\n  button\n</div>\n```\n\n```css\n.button{\n  position: relative;\n  width: 120px;\n  height: 60px;\n  line-height: 60px;\n  box-shadow: inset 0 0 0 3px #fff;\n  margin: 50px auto;\n  text-align: center;\n  color: #000;\n  font-size: 32px;\n  cursor: pointer;\n  transition: color 1s;\n}\n.button:after, .button:before{\n  content: \"\";\n  position: absolute;\n  width: 0;\n  height: 0;\n  top: 0;\n  left: 0;\n  box-sizing: border-box;\n  border: 3px solid transparent;\n}\n.button:after {\n  top: unset;\n  left: unset;\n  right: 0;\n  bottom: 0;\n}\n.button:hover {\n  color: #f60;\n  border: none;\n}\n.button:hover::before{\n  transition: width .25s, height .25s, border-bottom-color 0s;\n  transition-delay: .25s, 0s, .25s;\n  width: 120px;\n  height: 60px;\n  border-left: 3px solid #f60;\n  border-bottom: 3px solid #f60;\n}\n.button:hover::after{\n  transition: width .5s, height .5s, border-right-color .5s;\n  transition-delay: 0.75s, 0.5s, 0.5s;\n  width: 120px;\n  height: 60px;\n  border-top: 3px solid #f60;\n  border-right: 3px solid #f60;\n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/BaaPbXZ)\n\n## 优惠券样式\n\n```html\n<div class=\"coupon\">\n  100.00\n</div>\n```\n\n```css\n.coupon{\n  position: relative;\n  width: 400px;\n  height: 160px;\n  margin: 20px auto;\n  color: #fff;\n  font-size: 50px;\n  text-indent: 40px;\n  line-height: 160px;\n  background-image: radial-gradient(circle at 1px 8px,transparent 6px, #f60 6px, #f60 0),\n                    radial-gradient(circle at 199px 8px, transparent 6px, #f60 6px, #f60 0);\n  background-size: 200px 18px;\n  background-position: 0 0, 200px 0;\n  background-repeat-x: no-repeat;\n}\n.coupon::before{\n  position: absolute;\n  content: \"\";\n  left: 240px;\n  top: 0;\n  bottom : 0;\n  width: 0;\n  border-left: 1px dashed #fff;\n}\n.coupon::after{\n  content: \"立即领取\";\n  position: absolute;\n  width: 70px;\n  top: 50%;\n  right: 2%;\n  transform: translate(-50%, -50%);\n  line-height: 40px;\n  text-indent: 5px;\n  font-size: 30px;\n}\n```\n\n效果图： [点击这里](https://codepen.io/hbbaly/pen/mddjgbO)","slug":"js-23","published":1,"updated":"2020-12-02T06:49:34.137Z","layout":"post","photos":[],"link":"","_id":"cki71walg003ltl9k3f1kfugb","content":"<h2 id=\"css实现滚动进度条\"><a href=\"#css实现滚动进度条\" class=\"headerlink\" title=\"css实现滚动进度条\"></a>css实现滚动进度条</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to top right, blue <span class=\"number\">50%</span>, #fff <span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">101%</span> <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> - <span class=\"number\">100vh</span> + <span class=\"number\">5px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.scroll</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3000px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/MWWBxxB\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"css实现圆环进度条\"><a href=\"#css实现圆环进度条\" class=\"headerlink\" title=\"css实现圆环进度条\"></a>css实现圆环进度条</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"circle\"</span>&gt;</span></span><br><span class=\"line\">    HOVER</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shadow\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shadow-circle\"</span>&gt;</span>hover<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: border-top-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-right-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-bottom-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-left-color .<span class=\"number\">25s</span> linear;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0s</span>, .<span class=\"number\">25s</span>, .<span class=\"number\">5s</span>, .<span class=\"number\">75s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">270deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform .<span class=\"number\">75s</span> linear;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0.0s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow-circle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>,</span><br><span class=\"line\">      -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow-circle</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: border-circle .<span class=\"number\">7s</span> ease forwards;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> border-circle&#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  25% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  50% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  75% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0px</span> <span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0px</span> <span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">120px</span> <span class=\"number\">40px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/ExxpMzJ\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"button进度效果\"><a href=\"#button进度效果\" class=\"headerlink\" title=\"button进度效果\"></a>button进度效果</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  button</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: width .<span class=\"number\">25s</span>, height .<span class=\"number\">25s</span>, border-bottom-color <span class=\"number\">0s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: .<span class=\"number\">25s</span>, <span class=\"number\">0s</span>, .<span class=\"number\">25s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: width .<span class=\"number\">5s</span>, height .<span class=\"number\">5s</span>, border-right-color .<span class=\"number\">5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0.75s</span>, <span class=\"number\">0.5s</span>, <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/BaaPbXZ\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"优惠券样式\"><a href=\"#优惠券样式\" class=\"headerlink\" title=\"优惠券样式\"></a>优惠券样式</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"coupon\"</span>&gt;</span></span><br><span class=\"line\">  100.00</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.coupon</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">1px</span> <span class=\"number\">8px</span>,transparent <span class=\"number\">6px</span>, #f60 <span class=\"number\">6px</span>, #f60 <span class=\"number\">0</span>),</span><br><span class=\"line\">                    <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">199px</span> <span class=\"number\">8px</span>, transparent <span class=\"number\">6px</span>, #f60 <span class=\"number\">6px</span>, #f60 <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">200px</span> <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>, <span class=\"number\">200px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat-x</span>: no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.coupon</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom </span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> dashed <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.coupon</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"立即领取\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/mddjgbO\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"css实现滚动进度条\"><a href=\"#css实现滚动进度条\" class=\"headerlink\" title=\"css实现滚动进度条\"></a>css实现滚动进度条</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to top right, blue <span class=\"number\">50%</span>, #fff <span class=\"number\">50%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">101%</span> <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> - <span class=\"number\">100vh</span> + <span class=\"number\">5px</span>);</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.scroll</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">3000px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/MWWBxxB\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"css实现圆环进度条\"><a href=\"#css实现圆环进度条\" class=\"headerlink\" title=\"css实现圆环进度条\"></a>css实现圆环进度条</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"circle\"</span>&gt;</span></span><br><span class=\"line\">    HOVER</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shadow\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shadow-circle\"</span>&gt;</span>hover<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: border-top-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-right-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-bottom-color .<span class=\"number\">25s</span> linear,</span><br><span class=\"line\">              border-left-color .<span class=\"number\">25s</span> linear;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0s</span>, .<span class=\"number\">25s</span>, .<span class=\"number\">5s</span>, .<span class=\"number\">75s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">270deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform .<span class=\"number\">75s</span> linear;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0.0s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow-circle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>,</span><br><span class=\"line\">      -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.shadow-circle</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: border-circle .<span class=\"number\">7s</span> ease forwards;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> border-circle&#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  25% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> -<span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  50% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  75% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0px</span> <span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">60px</span> <span class=\"number\">60px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, -<span class=\"number\">125px</span> <span class=\"number\">0px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0px</span> <span class=\"number\">125px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">120px</span> <span class=\"number\">40px</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">#f60</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> blue;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/ExxpMzJ\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"button进度效果\"><a href=\"#button进度效果\" class=\"headerlink\" title=\"button进度效果\"></a>button进度效果</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  button</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: width .<span class=\"number\">25s</span>, height .<span class=\"number\">25s</span>, border-bottom-color <span class=\"number\">0s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: .<span class=\"number\">25s</span>, <span class=\"number\">0s</span>, .<span class=\"number\">25s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: width .<span class=\"number\">5s</span>, height .<span class=\"number\">5s</span>, border-right-color .<span class=\"number\">5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0.75s</span>, <span class=\"number\">0.5s</span>, <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#f60</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/BaaPbXZ\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n<h2 id=\"优惠券样式\"><a href=\"#优惠券样式\" class=\"headerlink\" title=\"优惠券样式\"></a>优惠券样式</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"coupon\"</span>&gt;</span></span><br><span class=\"line\">  100.00</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.coupon</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">1px</span> <span class=\"number\">8px</span>,transparent <span class=\"number\">6px</span>, #f60 <span class=\"number\">6px</span>, #f60 <span class=\"number\">0</span>),</span><br><span class=\"line\">                    <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">199px</span> <span class=\"number\">8px</span>, transparent <span class=\"number\">6px</span>, #f60 <span class=\"number\">6px</span>, #f60 <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">200px</span> <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>, <span class=\"number\">200px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat-x</span>: no-repeat;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.coupon</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">240px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom </span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> dashed <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.coupon</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"立即领取\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图： <a href=\"https://codepen.io/hbbaly/pen/mddjgbO\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n"},{"title":"拖动画圆","comments":1,"description":"拖动画圆, canvas, css, js","date":"2016-08-01T00:53:10.000Z","keywords":"拖动画圆","_content":"\n拖动画圆，后面还会写画多种图形。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/10/Animation.gif)\n\n思路： 建立坐标系，已鼠标中心画圆\n[示例网页](http://www.hbbaly.com/wp-content/themes/blog/case/Drawing%20circle.html)\n\n```html\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <meta name=\"keywords\" content=\"Bump\">\n    <meta name=\"description\" content=\"Bump\">\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        body{\n            background: #ccc;\n            font-size: 12px;\n        }\n        #canvas{\n            display: block;\n            margin:50px;\n            background: #fff;\n            -webkit-box-shadow: 4px 4px 8px rgba(0,0,0,.4) ;\n            -moz-box-shadow: 4px 4px 8px rgba(0,0,0,.4) ;\n            box-shadow: 4px 4px 8px rgba(0,0,0,.4);\n            cursor: pointer;\n        }\n        #controls{\n            position: absolute;\n            top:30px;\n            left:50px;\n        }\n    </style>\n  </head>\n<body>\n<canvas id=\"canvas\" width=\"500\" height=\"500\">\n    canvas not support\n</canvas>\n<div id=\"controls\">\n    StrokeColor <select name=\"select\" id=\"strokeStyleSelect\">\n    <option value=\"red\">red</option>\n    <option value=\"green\">green</option>\n    <option value=\"yellow\">yellow</option>\n    <option value=\"blue\">blue</option>\n    <option value=\"navy\">navy</option>\n</select>\n\nGuidewires: <input type=\"checkbox\" id=\"GuidewiresCheckbox\" checked=\"\">\n<input type=\"button\" id=\"EraseAll\" value=\"Erase all\">\n</div>\n<script>\nvar canvas = document.getElementById(\"canvas\"),\n    context = canvas.getContext(\"2d\"),\n    strokeStyleSelect = document.getElementById(\"strokeStyleSelect\"),\n    guidewiresCheckbox = document.getElementById(\"GuidewiresCheckbox\"),\n    EraseAll = document.getElementById(\"EraseAll\"),\n    drawSurfaceImageData,\n    mousedown = {},\n    rubberBandRect = {},\n    flag = false,\n    guidewires = guidewiresCheckbox.checked;\n//绘制网格\n    function drawGrid(color,stepx,stepy ) {\n        context.strokeStyle = color;\n        context.lineWidth = .5;\n        for(var i = stepx+.5;i<context.canvas.width;i+=stepx){\n            context.beginPath();\n            context.moveTo(i,context.canvas.height);\n            context.lineTo(i,0);\n            context.stroke();\n        }\n        for(var i = stepy+.5;i<context.canvas.height;i+=stepy){\n            context.beginPath();\n            context.moveTo(0,i);\n            context.lineTo(context.canvas.width,i);\n            context.stroke();\n        }\n    }\n//窗口坐标转化为canvas坐标\n    function WindowToCanvas(x ,y) {\n        var bbox = canvas.getBoundingClientRect();\n        return{\n            x:x-bbox.left*(canvas.width-bbox.width)-50,\n            y:y-bbox.top*(canvas.height-bbox.height)-50\n        };\n    }\n//复制整个画布像素数据\n    function saveDrawingSurface() {\n        drawSurfaceImageData = context.getImageData(0,0,canvas.width,canvas.height);\n    }\n//画布像素数据放回画布\n    function restoreDrawingSurface() {\n        context.putImageData(drawSurfaceImageData ,0,0);\n    }\n    // 确定绘制辅助矩形的宽高，left，top\n    function updateRubberbandRectangle(loc) {\n        rubberBandRect.width = Math.abs(loc.x-mousedown.x);\n        rubberBandRect.height = Math.abs(loc.y-mousedown.y);\n        rubberBandRect.left = (loc.x-mousedown.x)?mousedown.x:loc.x;\n        rubberBandRect.top = (loc.y-mousedown.y)?mousedown.y:loc.y;\n    }\n    //绘制图形\n    function drawRubberbandShape(loc) {\n        var angle,\n            radius;\n        if( mousedown.y===loc.y){\n            angle = 0;\n            radius=Math.abs(loc.x-mousedown.x);\n        }else{\n            angle = Math.atan(rubberBandRect.height/rubberBandRect.width);\n            radius = rubberBandRect.height/Math.sin(angle);\n        }\n        context.fillStyle = strokeStyleSelect.value;\n        context.beginPath();\n        context.arc(mousedown.x,mousedown.y,radius,0,Math.PI*2,false);\n        if(guidewires)context.fill();\n    }\n    function updateRubberband(loc) {\n        updateRubberbandRectangle(loc);\n        drawRubberbandShape(loc);\n    }\n    //guidewires\n    //水平线\n    function drawHorizontalLine(y) {\n        context.beginPath();\n        context.moveTo(0,y+.5);\n        context.moveTo(canvas.width,y+.5);\n        context.stroke();\n    }\n    //垂直的线\n    function drawVerticalLine(x) {\n        context.beginPath();\n        context.moveTo(x+.5,0);\n        context.moveTo(x+.5,canvas.height);\n        context.stroke();\n    }\n    function drawGuidewires(x,y) {\n        context.save();\n        context.strokeStyle = \"red\";\n        context.lineWidth = .5;\n        drawHorizontalLine(y);\n        drawVerticalLine(x);\n        context.restore();\n    }\n    //鼠标在画布的三个事件\n    canvas.onmousedown = function (e) {\n        var loc = WindowToCanvas(e.clientX,e.clientY);\n        e.preventDefault();\n        saveDrawingSurface();\n        mousedown.x = loc.x;\n        mousedown.y = loc.y;\n        flag = true;\n    };\n    canvas.onmousemove = function (e) {\n        var loc;\n        if(flag){\n            e.preventDefault();\n            loc = WindowToCanvas(e.clientX,e.clientY);\n            restoreDrawingSurface();\n            updateRubberband(loc);\n            if(guidewires)drawGuidewires(loc.x,loc.y);\n        }\n    };\n    canvas.onmouseup = function (e) {\n        loc = WindowToCanvas(e.clientX,e.clientY);\n        restoreDrawingSurface();\n        updateRubberband(loc);\n        flag = false;\n    };\n    //controls enent handles\n    EraseAll.onclick = function (e) {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        drawGrid(\"linghtgray\" , 10,10);\n        saveDrawingSurface();\n    };\n    strokeStyleSelect.onchange = function (e) {\n        context.strokeStyle = strokeStyleSelect.value;\n    };\n    guidewiresCheckbox.onchange = function (e) {\n        guidewires = guidewiresCheckbox.checked;\n    };\n    context.strokeStyle = strokeStyleSelect.value;\n    drawGrid(\"lightgray\" ,10,10);\n</script>\n\n</body></html>\n```\n","source":"_posts/js-3.md","raw":"---\ntitle: 拖动画圆\ncomments: true\ndescription: 拖动画圆, canvas, css, js\ntags: \"canvas\"\ndate: 2016-08-1 08:53:10\ncategories: \"js\"\nkeywords: 拖动画圆\n---\n\n拖动画圆，后面还会写画多种图形。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/10/Animation.gif)\n\n思路： 建立坐标系，已鼠标中心画圆\n[示例网页](http://www.hbbaly.com/wp-content/themes/blog/case/Drawing%20circle.html)\n\n```html\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <meta name=\"keywords\" content=\"Bump\">\n    <meta name=\"description\" content=\"Bump\">\n    <style>\n        *{\n            margin:0;\n            padding:0;\n        }\n        body{\n            background: #ccc;\n            font-size: 12px;\n        }\n        #canvas{\n            display: block;\n            margin:50px;\n            background: #fff;\n            -webkit-box-shadow: 4px 4px 8px rgba(0,0,0,.4) ;\n            -moz-box-shadow: 4px 4px 8px rgba(0,0,0,.4) ;\n            box-shadow: 4px 4px 8px rgba(0,0,0,.4);\n            cursor: pointer;\n        }\n        #controls{\n            position: absolute;\n            top:30px;\n            left:50px;\n        }\n    </style>\n  </head>\n<body>\n<canvas id=\"canvas\" width=\"500\" height=\"500\">\n    canvas not support\n</canvas>\n<div id=\"controls\">\n    StrokeColor <select name=\"select\" id=\"strokeStyleSelect\">\n    <option value=\"red\">red</option>\n    <option value=\"green\">green</option>\n    <option value=\"yellow\">yellow</option>\n    <option value=\"blue\">blue</option>\n    <option value=\"navy\">navy</option>\n</select>\n\nGuidewires: <input type=\"checkbox\" id=\"GuidewiresCheckbox\" checked=\"\">\n<input type=\"button\" id=\"EraseAll\" value=\"Erase all\">\n</div>\n<script>\nvar canvas = document.getElementById(\"canvas\"),\n    context = canvas.getContext(\"2d\"),\n    strokeStyleSelect = document.getElementById(\"strokeStyleSelect\"),\n    guidewiresCheckbox = document.getElementById(\"GuidewiresCheckbox\"),\n    EraseAll = document.getElementById(\"EraseAll\"),\n    drawSurfaceImageData,\n    mousedown = {},\n    rubberBandRect = {},\n    flag = false,\n    guidewires = guidewiresCheckbox.checked;\n//绘制网格\n    function drawGrid(color,stepx,stepy ) {\n        context.strokeStyle = color;\n        context.lineWidth = .5;\n        for(var i = stepx+.5;i<context.canvas.width;i+=stepx){\n            context.beginPath();\n            context.moveTo(i,context.canvas.height);\n            context.lineTo(i,0);\n            context.stroke();\n        }\n        for(var i = stepy+.5;i<context.canvas.height;i+=stepy){\n            context.beginPath();\n            context.moveTo(0,i);\n            context.lineTo(context.canvas.width,i);\n            context.stroke();\n        }\n    }\n//窗口坐标转化为canvas坐标\n    function WindowToCanvas(x ,y) {\n        var bbox = canvas.getBoundingClientRect();\n        return{\n            x:x-bbox.left*(canvas.width-bbox.width)-50,\n            y:y-bbox.top*(canvas.height-bbox.height)-50\n        };\n    }\n//复制整个画布像素数据\n    function saveDrawingSurface() {\n        drawSurfaceImageData = context.getImageData(0,0,canvas.width,canvas.height);\n    }\n//画布像素数据放回画布\n    function restoreDrawingSurface() {\n        context.putImageData(drawSurfaceImageData ,0,0);\n    }\n    // 确定绘制辅助矩形的宽高，left，top\n    function updateRubberbandRectangle(loc) {\n        rubberBandRect.width = Math.abs(loc.x-mousedown.x);\n        rubberBandRect.height = Math.abs(loc.y-mousedown.y);\n        rubberBandRect.left = (loc.x-mousedown.x)?mousedown.x:loc.x;\n        rubberBandRect.top = (loc.y-mousedown.y)?mousedown.y:loc.y;\n    }\n    //绘制图形\n    function drawRubberbandShape(loc) {\n        var angle,\n            radius;\n        if( mousedown.y===loc.y){\n            angle = 0;\n            radius=Math.abs(loc.x-mousedown.x);\n        }else{\n            angle = Math.atan(rubberBandRect.height/rubberBandRect.width);\n            radius = rubberBandRect.height/Math.sin(angle);\n        }\n        context.fillStyle = strokeStyleSelect.value;\n        context.beginPath();\n        context.arc(mousedown.x,mousedown.y,radius,0,Math.PI*2,false);\n        if(guidewires)context.fill();\n    }\n    function updateRubberband(loc) {\n        updateRubberbandRectangle(loc);\n        drawRubberbandShape(loc);\n    }\n    //guidewires\n    //水平线\n    function drawHorizontalLine(y) {\n        context.beginPath();\n        context.moveTo(0,y+.5);\n        context.moveTo(canvas.width,y+.5);\n        context.stroke();\n    }\n    //垂直的线\n    function drawVerticalLine(x) {\n        context.beginPath();\n        context.moveTo(x+.5,0);\n        context.moveTo(x+.5,canvas.height);\n        context.stroke();\n    }\n    function drawGuidewires(x,y) {\n        context.save();\n        context.strokeStyle = \"red\";\n        context.lineWidth = .5;\n        drawHorizontalLine(y);\n        drawVerticalLine(x);\n        context.restore();\n    }\n    //鼠标在画布的三个事件\n    canvas.onmousedown = function (e) {\n        var loc = WindowToCanvas(e.clientX,e.clientY);\n        e.preventDefault();\n        saveDrawingSurface();\n        mousedown.x = loc.x;\n        mousedown.y = loc.y;\n        flag = true;\n    };\n    canvas.onmousemove = function (e) {\n        var loc;\n        if(flag){\n            e.preventDefault();\n            loc = WindowToCanvas(e.clientX,e.clientY);\n            restoreDrawingSurface();\n            updateRubberband(loc);\n            if(guidewires)drawGuidewires(loc.x,loc.y);\n        }\n    };\n    canvas.onmouseup = function (e) {\n        loc = WindowToCanvas(e.clientX,e.clientY);\n        restoreDrawingSurface();\n        updateRubberband(loc);\n        flag = false;\n    };\n    //controls enent handles\n    EraseAll.onclick = function (e) {\n        context.clearRect(0,0,canvas.width,canvas.height);\n        drawGrid(\"linghtgray\" , 10,10);\n        saveDrawingSurface();\n    };\n    strokeStyleSelect.onchange = function (e) {\n        context.strokeStyle = strokeStyleSelect.value;\n    };\n    guidewiresCheckbox.onchange = function (e) {\n        guidewires = guidewiresCheckbox.checked;\n    };\n    context.strokeStyle = strokeStyleSelect.value;\n    drawGrid(\"lightgray\" ,10,10);\n</script>\n\n</body></html>\n```\n","slug":"js-3","published":1,"updated":"2020-12-02T06:49:34.139Z","layout":"post","photos":[],"link":"","_id":"cki71wali003ptl9klyxv1xb6","content":"<p>拖动画圆，后面还会写画多种图形。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/10/Animation.gif\" alt></p>\n<p>思路： 建立坐标系，已鼠标中心画圆<br><a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/Drawing%20circle.html\" target=\"_blank\" rel=\"noopener\">示例网页</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">            font-size: 12px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">-webkit-box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) ;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">-moz-box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) ;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>);</span></span><br><span class=\"line\">            cursor: pointer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#controls</span>&#123;</span></span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span></span><br><span class=\"line\">    canvas not support</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    StrokeColor <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"strokeStyleSelect\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span>&gt;</span>red<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"green\"</span>&gt;</span>green<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yellow\"</span>&gt;</span>yellow<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span>&gt;</span>blue<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"navy\"</span>&gt;</span>navy<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Guidewires: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"GuidewiresCheckbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"EraseAll\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Erase all\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    context = canvas.getContext(<span class=\"string\">\"2d\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    strokeStyleSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"strokeStyleSelect\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    guidewiresCheckbox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"GuidewiresCheckbox\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    EraseAll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"EraseAll\"</span>),</span></span><br><span class=\"line\">    drawSurfaceImageData,</span><br><span class=\"line\">    mousedown = &#123;&#125;,</span><br><span class=\"line\">    rubberBandRect = &#123;&#125;,</span><br><span class=\"line\"><span class=\"javascript\">    flag = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">    guidewires = guidewiresCheckbox.checked;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//绘制网格</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawGrid</span>(<span class=\"params\">color,stepx,stepy </span>) </span>&#123;</span></span><br><span class=\"line\">        context.strokeStyle = color;</span><br><span class=\"line\">        context.lineWidth = .5;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = stepx+<span class=\"number\">.5</span>;i&lt;context.canvas.width;i+=stepx)&#123;</span></span><br><span class=\"line\">            context.beginPath();</span><br><span class=\"line\">            context.moveTo(i,context.canvas.height);</span><br><span class=\"line\">            context.lineTo(i,0);</span><br><span class=\"line\">            context.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = stepy+<span class=\"number\">.5</span>;i&lt;context.canvas.height;i+=stepy)&#123;</span></span><br><span class=\"line\">            context.beginPath();</span><br><span class=\"line\">            context.moveTo(0,i);</span><br><span class=\"line\">            context.lineTo(context.canvas.width,i);</span><br><span class=\"line\">            context.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//窗口坐标转化为canvas坐标</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WindowToCanvas</span>(<span class=\"params\">x ,y</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> bbox = canvas.getBoundingClientRect();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\">            x:x-bbox.left*(canvas.width-bbox.width)-50,</span><br><span class=\"line\">            y:y-bbox.top*(canvas.height-bbox.height)-50</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//复制整个画布像素数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveDrawingSurface</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        drawSurfaceImageData = context.getImageData(0,0,canvas.width,canvas.height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//画布像素数据放回画布</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restoreDrawingSurface</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.putImageData(drawSurfaceImageData ,0,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 确定绘制辅助矩形的宽高，left，top</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateRubberbandRectangle</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        rubberBandRect.width = <span class=\"built_in\">Math</span>.abs(loc.x-mousedown.x);</span></span><br><span class=\"line\"><span class=\"javascript\">        rubberBandRect.height = <span class=\"built_in\">Math</span>.abs(loc.y-mousedown.y);</span></span><br><span class=\"line\">        rubberBandRect.left = (loc.x-mousedown.x)?mousedown.x:loc.x;</span><br><span class=\"line\">        rubberBandRect.top = (loc.y-mousedown.y)?mousedown.y:loc.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制图形</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawRubberbandShape</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> angle,</span></span><br><span class=\"line\">            radius;</span><br><span class=\"line\">        if( mousedown.y===loc.y)&#123;</span><br><span class=\"line\">            angle = 0;</span><br><span class=\"line\"><span class=\"javascript\">            radius=<span class=\"built_in\">Math</span>.abs(loc.x-mousedown.x);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            angle = <span class=\"built_in\">Math</span>.atan(rubberBandRect.height/rubberBandRect.width);</span></span><br><span class=\"line\"><span class=\"javascript\">            radius = rubberBandRect.height/<span class=\"built_in\">Math</span>.sin(angle);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.fillStyle = strokeStyleSelect.value;</span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(mousedown.x,mousedown.y,radius,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        if(guidewires)context.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateRubberband</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\">        updateRubberbandRectangle(loc);</span><br><span class=\"line\">        drawRubberbandShape(loc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//guidewires</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//水平线</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHorizontalLine</span>(<span class=\"params\">y</span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\">        context.moveTo(0,y+.5);</span><br><span class=\"line\">        context.moveTo(canvas.width,y+.5);</span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//垂直的线</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawVerticalLine</span>(<span class=\"params\">x</span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\">        context.moveTo(x+.5,0);</span><br><span class=\"line\">        context.moveTo(x+.5,canvas.height);</span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawGuidewires</span>(<span class=\"params\">x,y</span>) </span>&#123;</span></span><br><span class=\"line\">        context.save();</span><br><span class=\"line\"><span class=\"javascript\">        context.strokeStyle = <span class=\"string\">\"red\"</span>;</span></span><br><span class=\"line\">        context.lineWidth = .5;</span><br><span class=\"line\">        drawHorizontalLine(y);</span><br><span class=\"line\">        drawVerticalLine(x);</span><br><span class=\"line\">        context.restore();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//鼠标在画布的三个事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> loc = WindowToCanvas(e.clientX,e.clientY);</span></span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        saveDrawingSurface();</span><br><span class=\"line\">        mousedown.x = loc.x;</span><br><span class=\"line\">        mousedown.y = loc.y;</span><br><span class=\"line\"><span class=\"javascript\">        flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> loc;</span></span><br><span class=\"line\">        if(flag)&#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            loc = WindowToCanvas(e.clientX,e.clientY);</span><br><span class=\"line\">            restoreDrawingSurface();</span><br><span class=\"line\">            updateRubberband(loc);</span><br><span class=\"line\">            if(guidewires)drawGuidewires(loc.x,loc.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        loc = WindowToCanvas(e.clientX,e.clientY);</span><br><span class=\"line\">        restoreDrawingSurface();</span><br><span class=\"line\">        updateRubberband(loc);</span><br><span class=\"line\"><span class=\"javascript\">        flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//controls enent handles</span></span></span><br><span class=\"line\"><span class=\"javascript\">    EraseAll.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        context.clearRect(0,0,canvas.width,canvas.height);</span><br><span class=\"line\"><span class=\"javascript\">        drawGrid(<span class=\"string\">\"linghtgray\"</span> , <span class=\"number\">10</span>,<span class=\"number\">10</span>);</span></span><br><span class=\"line\">        saveDrawingSurface();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    strokeStyleSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        context.strokeStyle = strokeStyleSelect.value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    guidewiresCheckbox.onchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        guidewires = guidewiresCheckbox.checked;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    context.strokeStyle = strokeStyleSelect.value;</span><br><span class=\"line\"><span class=\"javascript\">    drawGrid(<span class=\"string\">\"lightgray\"</span> ,<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>拖动画圆，后面还会写画多种图形。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/10/Animation.gif\" alt></p>\n<p>思路： 建立坐标系，已鼠标中心画圆<br><a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/Drawing%20circle.html\" target=\"_blank\" rel=\"noopener\">示例网页</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        *&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">padding</span><span class=\"selector-pseudo\">:0</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">            font-size: 12px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">-webkit-box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) ;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">-moz-box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>) ;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">box-shadow</span>: 4<span class=\"selector-tag\">px</span> 4<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0,0,0,<span class=\"selector-class\">.4</span>);</span></span><br><span class=\"line\">            cursor: pointer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#controls</span>&#123;</span></span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:50px</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span></span><br><span class=\"line\">    canvas not support</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    StrokeColor <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"strokeStyleSelect\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span>&gt;</span>red<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"green\"</span>&gt;</span>green<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yellow\"</span>&gt;</span>yellow<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span>&gt;</span>blue<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"navy\"</span>&gt;</span>navy<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Guidewires: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"GuidewiresCheckbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"EraseAll\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Erase all\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    context = canvas.getContext(<span class=\"string\">\"2d\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    strokeStyleSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"strokeStyleSelect\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    guidewiresCheckbox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"GuidewiresCheckbox\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">    EraseAll = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"EraseAll\"</span>),</span></span><br><span class=\"line\">    drawSurfaceImageData,</span><br><span class=\"line\">    mousedown = &#123;&#125;,</span><br><span class=\"line\">    rubberBandRect = &#123;&#125;,</span><br><span class=\"line\"><span class=\"javascript\">    flag = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">    guidewires = guidewiresCheckbox.checked;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//绘制网格</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawGrid</span>(<span class=\"params\">color,stepx,stepy </span>) </span>&#123;</span></span><br><span class=\"line\">        context.strokeStyle = color;</span><br><span class=\"line\">        context.lineWidth = .5;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = stepx+<span class=\"number\">.5</span>;i&lt;context.canvas.width;i+=stepx)&#123;</span></span><br><span class=\"line\">            context.beginPath();</span><br><span class=\"line\">            context.moveTo(i,context.canvas.height);</span><br><span class=\"line\">            context.lineTo(i,0);</span><br><span class=\"line\">            context.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = stepy+<span class=\"number\">.5</span>;i&lt;context.canvas.height;i+=stepy)&#123;</span></span><br><span class=\"line\">            context.beginPath();</span><br><span class=\"line\">            context.moveTo(0,i);</span><br><span class=\"line\">            context.lineTo(context.canvas.width,i);</span><br><span class=\"line\">            context.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//窗口坐标转化为canvas坐标</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WindowToCanvas</span>(<span class=\"params\">x ,y</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> bbox = canvas.getBoundingClientRect();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\">            x:x-bbox.left*(canvas.width-bbox.width)-50,</span><br><span class=\"line\">            y:y-bbox.top*(canvas.height-bbox.height)-50</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//复制整个画布像素数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveDrawingSurface</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        drawSurfaceImageData = context.getImageData(0,0,canvas.width,canvas.height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//画布像素数据放回画布</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restoreDrawingSurface</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        context.putImageData(drawSurfaceImageData ,0,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 确定绘制辅助矩形的宽高，left，top</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateRubberbandRectangle</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        rubberBandRect.width = <span class=\"built_in\">Math</span>.abs(loc.x-mousedown.x);</span></span><br><span class=\"line\"><span class=\"javascript\">        rubberBandRect.height = <span class=\"built_in\">Math</span>.abs(loc.y-mousedown.y);</span></span><br><span class=\"line\">        rubberBandRect.left = (loc.x-mousedown.x)?mousedown.x:loc.x;</span><br><span class=\"line\">        rubberBandRect.top = (loc.y-mousedown.y)?mousedown.y:loc.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//绘制图形</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawRubberbandShape</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> angle,</span></span><br><span class=\"line\">            radius;</span><br><span class=\"line\">        if( mousedown.y===loc.y)&#123;</span><br><span class=\"line\">            angle = 0;</span><br><span class=\"line\"><span class=\"javascript\">            radius=<span class=\"built_in\">Math</span>.abs(loc.x-mousedown.x);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            angle = <span class=\"built_in\">Math</span>.atan(rubberBandRect.height/rubberBandRect.width);</span></span><br><span class=\"line\"><span class=\"javascript\">            radius = rubberBandRect.height/<span class=\"built_in\">Math</span>.sin(angle);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.fillStyle = strokeStyleSelect.value;</span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(mousedown.x,mousedown.y,radius,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        if(guidewires)context.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateRubberband</span>(<span class=\"params\">loc</span>) </span>&#123;</span></span><br><span class=\"line\">        updateRubberbandRectangle(loc);</span><br><span class=\"line\">        drawRubberbandShape(loc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//guidewires</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//水平线</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHorizontalLine</span>(<span class=\"params\">y</span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\">        context.moveTo(0,y+.5);</span><br><span class=\"line\">        context.moveTo(canvas.width,y+.5);</span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//垂直的线</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawVerticalLine</span>(<span class=\"params\">x</span>) </span>&#123;</span></span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\">        context.moveTo(x+.5,0);</span><br><span class=\"line\">        context.moveTo(x+.5,canvas.height);</span><br><span class=\"line\">        context.stroke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawGuidewires</span>(<span class=\"params\">x,y</span>) </span>&#123;</span></span><br><span class=\"line\">        context.save();</span><br><span class=\"line\"><span class=\"javascript\">        context.strokeStyle = <span class=\"string\">\"red\"</span>;</span></span><br><span class=\"line\">        context.lineWidth = .5;</span><br><span class=\"line\">        drawHorizontalLine(y);</span><br><span class=\"line\">        drawVerticalLine(x);</span><br><span class=\"line\">        context.restore();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//鼠标在画布的三个事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> loc = WindowToCanvas(e.clientX,e.clientY);</span></span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        saveDrawingSurface();</span><br><span class=\"line\">        mousedown.x = loc.x;</span><br><span class=\"line\">        mousedown.y = loc.y;</span><br><span class=\"line\"><span class=\"javascript\">        flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> loc;</span></span><br><span class=\"line\">        if(flag)&#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            loc = WindowToCanvas(e.clientX,e.clientY);</span><br><span class=\"line\">            restoreDrawingSurface();</span><br><span class=\"line\">            updateRubberband(loc);</span><br><span class=\"line\">            if(guidewires)drawGuidewires(loc.x,loc.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    canvas.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        loc = WindowToCanvas(e.clientX,e.clientY);</span><br><span class=\"line\">        restoreDrawingSurface();</span><br><span class=\"line\">        updateRubberband(loc);</span><br><span class=\"line\"><span class=\"javascript\">        flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//controls enent handles</span></span></span><br><span class=\"line\"><span class=\"javascript\">    EraseAll.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        context.clearRect(0,0,canvas.width,canvas.height);</span><br><span class=\"line\"><span class=\"javascript\">        drawGrid(<span class=\"string\">\"linghtgray\"</span> , <span class=\"number\">10</span>,<span class=\"number\">10</span>);</span></span><br><span class=\"line\">        saveDrawingSurface();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    strokeStyleSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        context.strokeStyle = strokeStyleSelect.value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    guidewiresCheckbox.onchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\">        guidewires = guidewiresCheckbox.checked;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    context.strokeStyle = strokeStyleSelect.value;</span><br><span class=\"line\"><span class=\"javascript\">    drawGrid(<span class=\"string\">\"lightgray\"</span> ,<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"柯里化","comments":1,"description":"js, 柯里化","date":"2018-03-18T08:20:43.000Z","keywords":"js, 柯里化","_content":"\n## 概念\n\n把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。\n\n```js\n// 普通的add函数\nfunction add(x, y) {\n    return x + y\n}\n\n// Currying后\nfunction curryingAdd(x) {\n    return function (y) {\n        return x + y\n    }\n}\n\nadd(1, 2)           // 3\ncurryingAdd(1)(2)   // 3\n```\n\n实际上就是把add函数的x，y两个参数变成了先用一个函数接收x然后返回一个函数去处理y参数。现在思路应该就比较清晰了，就是只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n## Currying的用法\n\n### 参数复用\n\n```js\n// 正常正则验证字符串 reg.test(txt)\nfunction check(reg, txt) {\n    return reg.test(txt)\n}\n\ncheck(/\\d+/g, 'test')      //false\ncheck(/[a-z]+/g, 'test')   //true\n\n// Currying后\nfunction curryingCheck(reg) {\n    return function(txt) {\n        return reg.test(txt)\n    }\n}\n\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1')      // true\nhasNumber('testtest')   // false\nhasLetter('21212')      // false\n```\n\n上面的示例是一个正则的校验，正常来说直接调用check函数就可以了，但是如果我有很多地方都要校验是否有数字，其实就是需要将第一个参数reg进行复用，这样别的地方就能够直接调用hasNumber，hasLetter等函数，让参数能够复用，调用起来也更方便。\n\n### 提前确认\n\n有一种典型的应用情景是这样的，每次调用函数都需要进行一次判断，但其实第一次判断计算之后，后续调用并不需要再次判断，这种情况下就非常适合使用柯里化方案来处理.\n\n在 DOM 中添加事件时需要兼容现代浏览器和 IE 浏览器（IE < 9），方法就是对浏览器环境进行判断，看浏览器是否支持\n```js\nvar on = function(element, event, handler) {\n    if (document.addEventListener) {\n        if (element && event && handler) {\n            element.addEventListener(event, handler, false);\n        }\n    } else {\n        if (element && event && handler) {\n            element.attachEvent('on' + event, handler);\n        }\n    }\n}\n\nvar on = (function() {\n    if (document.addEventListener) {\n        return function(element, event, handler) {\n            if (element && event && handler) {\n                element.addEventListener(event, handler, false);\n            }\n        };\n    } else {\n        return function(element, event, handler) {\n            if (element && event && handler) {\n                element.attachEvent('on' + event, handler);\n            }\n        };\n    }\n})();\n\n//换一种写法可能比较好理解一点，上面就是把isSupport这个参数给先确定下来了\nvar on = function(isSupport, element, event, handler) {\n    isSupport = isSupport || document.addEventListener;\n    if (isSupport) {\n        return element.addEventListener(event, handler, false);\n    } else {\n        return element.attachEvent('on' + event, handler);\n    }\n}\n```\n\n我们在做项目的过程中，封装一些dom操作可以说再常见不过，上面第一种写法也是比较常见，但是我们看看第二种写法，它相对一第一种写法就是自执行然后返回一个新的函数，是一种典型的柯里化应用，在第一次的 if...else if... 判断之后完成第一次计算，然后动态创建返回新的函数用于处理后续传入的参数\n\n这样做的好处就是之后调用之后就不需要再次调用计算了\n\n\n### 延迟运行\n\n```js\nFunction.prototype.bind = function (context) {\n    var _this = this\n    var args = Array.prototype.slice.call(arguments, 1)\n \n    return function() {\n        return _this.apply(context, args)\n    }\n}\n\n//\nobj = {\n  name: 'Krry'\n}\nconst fun = function () {\n  console.log(this.name)\n}.bind(obj)\n\nfun() // Krry\n```\n这里 `bind` 用来改变函数执行时候的上下文==`this`==，但是函数本身并不执行，所以本质上是延迟计算，这一点和 `call` / `apply` 直接执行有所不同\n\n## 通用\n\n```js\n// 支持多参数传递\nfunction curry(fn) {\n    return function judgeCurry(...args) {\n        return fn.length > args.length ? (...args1) => judgeCurry(...args,...args1) : fn(...args);\n    }\n}\n```\n\n## 经典面试题\n\n```js\n// 实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) //  6;\nadd(1, 2, 3)(4) // 10;\nadd(1)(2)(3)(4)(5) // 15;\n\n\nfunction add() {\n  // 第一次执行时，定义一个数组专门用来存储所有的参数\n  var _args = Array.prototype.slice.call(arguments);\n\n  // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n  var _adder = function() {\n      _args.push(...arguments);\n      return _adder;\n  };\n\n  // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n  _adder.toString = function () {\n      return _args.reduce(function (a, b) {\n          return a + b;\n      });\n  }\n  return _adder();\n}\n// console.log(Number(add(1, 2, 3)))\n// console.log(Number(add(1, 2, 3)(4)))\n// console.log(Number(add(1, 2, 3)(4)(5)))\n// console.log(Number(add(1, 2, 3)(4)(5)(6)))\n\n// 第二种方法\nconst add = (...args) => args.reduce((a, b) => a + b)\n// 简化写法\nfunction currying(func) {\n  const args = []\n  return function result(...rest) {\n    if (rest.length === 0) {\n      return func(...args)\n    } else {\n        args.push(...rest)\n        return result\n    }\n  }\n}\nconst sum = currying(add)\n\nsum(1, 2)(3)(4)  // 未真正求值，收集参数的和\nsum() // 结果\nconsole.log(sum())\n```\n第一种方法想要得到结果，需要Number(), 第二种需要前期搜集参数， 可以控制什么时候输出结果。\n\n\n\n","source":"_posts/js-24.md","raw":"---\ntitle: 柯里化\ncomments: true\ndescription: js, 柯里化\ntags: \"js\"\ndate: 2018-3-18 16:20:43\ncategories: \"js\"\nkeywords: js, 柯里化\n---\n\n## 概念\n\n把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。\n\n```js\n// 普通的add函数\nfunction add(x, y) {\n    return x + y\n}\n\n// Currying后\nfunction curryingAdd(x) {\n    return function (y) {\n        return x + y\n    }\n}\n\nadd(1, 2)           // 3\ncurryingAdd(1)(2)   // 3\n```\n\n实际上就是把add函数的x，y两个参数变成了先用一个函数接收x然后返回一个函数去处理y参数。现在思路应该就比较清晰了，就是只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n## Currying的用法\n\n### 参数复用\n\n```js\n// 正常正则验证字符串 reg.test(txt)\nfunction check(reg, txt) {\n    return reg.test(txt)\n}\n\ncheck(/\\d+/g, 'test')      //false\ncheck(/[a-z]+/g, 'test')   //true\n\n// Currying后\nfunction curryingCheck(reg) {\n    return function(txt) {\n        return reg.test(txt)\n    }\n}\n\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1')      // true\nhasNumber('testtest')   // false\nhasLetter('21212')      // false\n```\n\n上面的示例是一个正则的校验，正常来说直接调用check函数就可以了，但是如果我有很多地方都要校验是否有数字，其实就是需要将第一个参数reg进行复用，这样别的地方就能够直接调用hasNumber，hasLetter等函数，让参数能够复用，调用起来也更方便。\n\n### 提前确认\n\n有一种典型的应用情景是这样的，每次调用函数都需要进行一次判断，但其实第一次判断计算之后，后续调用并不需要再次判断，这种情况下就非常适合使用柯里化方案来处理.\n\n在 DOM 中添加事件时需要兼容现代浏览器和 IE 浏览器（IE < 9），方法就是对浏览器环境进行判断，看浏览器是否支持\n```js\nvar on = function(element, event, handler) {\n    if (document.addEventListener) {\n        if (element && event && handler) {\n            element.addEventListener(event, handler, false);\n        }\n    } else {\n        if (element && event && handler) {\n            element.attachEvent('on' + event, handler);\n        }\n    }\n}\n\nvar on = (function() {\n    if (document.addEventListener) {\n        return function(element, event, handler) {\n            if (element && event && handler) {\n                element.addEventListener(event, handler, false);\n            }\n        };\n    } else {\n        return function(element, event, handler) {\n            if (element && event && handler) {\n                element.attachEvent('on' + event, handler);\n            }\n        };\n    }\n})();\n\n//换一种写法可能比较好理解一点，上面就是把isSupport这个参数给先确定下来了\nvar on = function(isSupport, element, event, handler) {\n    isSupport = isSupport || document.addEventListener;\n    if (isSupport) {\n        return element.addEventListener(event, handler, false);\n    } else {\n        return element.attachEvent('on' + event, handler);\n    }\n}\n```\n\n我们在做项目的过程中，封装一些dom操作可以说再常见不过，上面第一种写法也是比较常见，但是我们看看第二种写法，它相对一第一种写法就是自执行然后返回一个新的函数，是一种典型的柯里化应用，在第一次的 if...else if... 判断之后完成第一次计算，然后动态创建返回新的函数用于处理后续传入的参数\n\n这样做的好处就是之后调用之后就不需要再次调用计算了\n\n\n### 延迟运行\n\n```js\nFunction.prototype.bind = function (context) {\n    var _this = this\n    var args = Array.prototype.slice.call(arguments, 1)\n \n    return function() {\n        return _this.apply(context, args)\n    }\n}\n\n//\nobj = {\n  name: 'Krry'\n}\nconst fun = function () {\n  console.log(this.name)\n}.bind(obj)\n\nfun() // Krry\n```\n这里 `bind` 用来改变函数执行时候的上下文==`this`==，但是函数本身并不执行，所以本质上是延迟计算，这一点和 `call` / `apply` 直接执行有所不同\n\n## 通用\n\n```js\n// 支持多参数传递\nfunction curry(fn) {\n    return function judgeCurry(...args) {\n        return fn.length > args.length ? (...args1) => judgeCurry(...args,...args1) : fn(...args);\n    }\n}\n```\n\n## 经典面试题\n\n```js\n// 实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) //  6;\nadd(1, 2, 3)(4) // 10;\nadd(1)(2)(3)(4)(5) // 15;\n\n\nfunction add() {\n  // 第一次执行时，定义一个数组专门用来存储所有的参数\n  var _args = Array.prototype.slice.call(arguments);\n\n  // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n  var _adder = function() {\n      _args.push(...arguments);\n      return _adder;\n  };\n\n  // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n  _adder.toString = function () {\n      return _args.reduce(function (a, b) {\n          return a + b;\n      });\n  }\n  return _adder();\n}\n// console.log(Number(add(1, 2, 3)))\n// console.log(Number(add(1, 2, 3)(4)))\n// console.log(Number(add(1, 2, 3)(4)(5)))\n// console.log(Number(add(1, 2, 3)(4)(5)(6)))\n\n// 第二种方法\nconst add = (...args) => args.reduce((a, b) => a + b)\n// 简化写法\nfunction currying(func) {\n  const args = []\n  return function result(...rest) {\n    if (rest.length === 0) {\n      return func(...args)\n    } else {\n        args.push(...rest)\n        return result\n    }\n  }\n}\nconst sum = currying(add)\n\nsum(1, 2)(3)(4)  // 未真正求值，收集参数的和\nsum() // 结果\nconsole.log(sum())\n```\n第一种方法想要得到结果，需要Number(), 第二种需要前期搜集参数， 可以控制什么时候输出结果。\n\n\n\n","slug":"js-24","published":1,"updated":"2020-12-02T06:49:34.138Z","layout":"post","photos":[],"link":"","_id":"cki71walj003stl9kgpx4npmb","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通的add函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Currying后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)           <span class=\"comment\">// 3</span></span><br><span class=\"line\">curryingAdd(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上就是把add函数的x，y两个参数变成了先用一个函数接收x然后返回一个函数去处理y参数。现在思路应该就比较清晰了，就是只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<h2 id=\"Currying的用法\"><a href=\"#Currying的用法\" class=\"headerlink\" title=\"Currying的用法\"></a>Currying的用法</h2><h3 id=\"参数复用\"><a href=\"#参数复用\" class=\"headerlink\" title=\"参数复用\"></a>参数复用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常正则验证字符串 reg.test(txt)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">reg, txt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(txt)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">check(<span class=\"regexp\">/\\d+/g</span>, <span class=\"string\">'test'</span>)      <span class=\"comment\">//false</span></span><br><span class=\"line\">check(<span class=\"regexp\">/[a-z]+/g</span>, <span class=\"string\">'test'</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Currying后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingCheck</span>(<span class=\"params\">reg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">txt</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reg.test(txt)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNumber = curryingCheck(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLetter = curryingCheck(<span class=\"regexp\">/[a-z]+/g</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">hasNumber(<span class=\"string\">'test1'</span>)      <span class=\"comment\">// true</span></span><br><span class=\"line\">hasNumber(<span class=\"string\">'testtest'</span>)   <span class=\"comment\">// false</span></span><br><span class=\"line\">hasLetter(<span class=\"string\">'21212'</span>)      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的示例是一个正则的校验，正常来说直接调用check函数就可以了，但是如果我有很多地方都要校验是否有数字，其实就是需要将第一个参数reg进行复用，这样别的地方就能够直接调用hasNumber，hasLetter等函数，让参数能够复用，调用起来也更方便。</p>\n<h3 id=\"提前确认\"><a href=\"#提前确认\" class=\"headerlink\" title=\"提前确认\"></a>提前确认</h3><p>有一种典型的应用情景是这样的，每次调用函数都需要进行一次判断，但其实第一次判断计算之后，后续调用并不需要再次判断，这种情况下就非常适合使用柯里化方案来处理.</p>\n<p>在 DOM 中添加事件时需要兼容现代浏览器和 IE 浏览器（IE &lt; 9），方法就是对浏览器环境进行判断，看浏览器是否支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">            element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> on = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">                element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">                element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//换一种写法可能比较好理解一点，上面就是把isSupport这个参数给先确定下来了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isSupport, element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">    isSupport = isSupport || <span class=\"built_in\">document</span>.addEventListener;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSupport) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在做项目的过程中，封装一些dom操作可以说再常见不过，上面第一种写法也是比较常见，但是我们看看第二种写法，它相对一第一种写法就是自执行然后返回一个新的函数，是一种典型的柯里化应用，在第一次的 if…else if… 判断之后完成第一次计算，然后动态创建返回新的函数用于处理后续传入的参数</p>\n<p>这样做的好处就是之后调用之后就不需要再次调用计算了</p>\n<h3 id=\"延迟运行\"><a href=\"#延迟运行\" class=\"headerlink\" title=\"延迟运行\"></a>延迟运行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Krry'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;.bind(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">fun() <span class=\"comment\">// Krry</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>bind</code> 用来改变函数执行时候的上下文==<code>this</code>==，但是函数本身并不执行，所以本质上是延迟计算，这一点和 <code>call</code> / <code>apply</code> 直接执行有所不同</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 支持多参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">judgeCurry</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.length &gt; args.length ? <span class=\"function\">(<span class=\"params\">...args1</span>) =&gt;</span> judgeCurry(...args,...args1) : fn(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"经典面试题\"><a href=\"#经典面试题\" class=\"headerlink\" title=\"经典面试题\"></a>经典面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现一个add方法，使计算结果能够满足如下预期：</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">//  6;</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">4</span>) <span class=\"comment\">// 10;</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>) <span class=\"comment\">// 15;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一次执行时，定义一个数组专门用来存储所有的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _args.push(...arguments);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _adder;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span></span><br><span class=\"line\">  _adder.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _args.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _adder();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)(5)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)(5)(6)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// 简化写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func(...args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        args.push(...rest)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = currying(add)</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)  <span class=\"comment\">// 未真正求值，收集参数的和</span></span><br><span class=\"line\">sum() <span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum())</span><br></pre></td></tr></table></figure>\n\n<p>第一种方法想要得到结果，需要Number(), 第二种需要前期搜集参数， 可以控制什么时候输出结果。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通的add函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Currying后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingAdd</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)           <span class=\"comment\">// 3</span></span><br><span class=\"line\">curryingAdd(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上就是把add函数的x，y两个参数变成了先用一个函数接收x然后返回一个函数去处理y参数。现在思路应该就比较清晰了，就是只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<h2 id=\"Currying的用法\"><a href=\"#Currying的用法\" class=\"headerlink\" title=\"Currying的用法\"></a>Currying的用法</h2><h3 id=\"参数复用\"><a href=\"#参数复用\" class=\"headerlink\" title=\"参数复用\"></a>参数复用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常正则验证字符串 reg.test(txt)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">reg, txt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(txt)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">check(<span class=\"regexp\">/\\d+/g</span>, <span class=\"string\">'test'</span>)      <span class=\"comment\">//false</span></span><br><span class=\"line\">check(<span class=\"regexp\">/[a-z]+/g</span>, <span class=\"string\">'test'</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Currying后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryingCheck</span>(<span class=\"params\">reg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">txt</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reg.test(txt)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNumber = curryingCheck(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLetter = curryingCheck(<span class=\"regexp\">/[a-z]+/g</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">hasNumber(<span class=\"string\">'test1'</span>)      <span class=\"comment\">// true</span></span><br><span class=\"line\">hasNumber(<span class=\"string\">'testtest'</span>)   <span class=\"comment\">// false</span></span><br><span class=\"line\">hasLetter(<span class=\"string\">'21212'</span>)      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的示例是一个正则的校验，正常来说直接调用check函数就可以了，但是如果我有很多地方都要校验是否有数字，其实就是需要将第一个参数reg进行复用，这样别的地方就能够直接调用hasNumber，hasLetter等函数，让参数能够复用，调用起来也更方便。</p>\n<h3 id=\"提前确认\"><a href=\"#提前确认\" class=\"headerlink\" title=\"提前确认\"></a>提前确认</h3><p>有一种典型的应用情景是这样的，每次调用函数都需要进行一次判断，但其实第一次判断计算之后，后续调用并不需要再次判断，这种情况下就非常适合使用柯里化方案来处理.</p>\n<p>在 DOM 中添加事件时需要兼容现代浏览器和 IE 浏览器（IE &lt; 9），方法就是对浏览器环境进行判断，看浏览器是否支持</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">            element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> on = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">                element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class=\"line\">                element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//换一种写法可能比较好理解一点，上面就是把isSupport这个参数给先确定下来了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isSupport, element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">    isSupport = isSupport || <span class=\"built_in\">document</span>.addEventListener;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSupport) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.attachEvent(<span class=\"string\">'on'</span> + event, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在做项目的过程中，封装一些dom操作可以说再常见不过，上面第一种写法也是比较常见，但是我们看看第二种写法，它相对一第一种写法就是自执行然后返回一个新的函数，是一种典型的柯里化应用，在第一次的 if…else if… 判断之后完成第一次计算，然后动态创建返回新的函数用于处理后续传入的参数</p>\n<p>这样做的好处就是之后调用之后就不需要再次调用计算了</p>\n<h3 id=\"延迟运行\"><a href=\"#延迟运行\" class=\"headerlink\" title=\"延迟运行\"></a>延迟运行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.apply(context, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Krry'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;.bind(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">fun() <span class=\"comment\">// Krry</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>bind</code> 用来改变函数执行时候的上下文==<code>this</code>==，但是函数本身并不执行，所以本质上是延迟计算，这一点和 <code>call</code> / <code>apply</code> 直接执行有所不同</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 支持多参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">judgeCurry</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.length &gt; args.length ? <span class=\"function\">(<span class=\"params\">...args1</span>) =&gt;</span> judgeCurry(...args,...args1) : fn(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"经典面试题\"><a href=\"#经典面试题\" class=\"headerlink\" title=\"经典面试题\"></a>经典面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现一个add方法，使计算结果能够满足如下预期：</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">//  6;</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">4</span>) <span class=\"comment\">// 10;</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>) <span class=\"comment\">// 15;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第一次执行时，定义一个数组专门用来存储所有的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _args.push(...arguments);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _adder;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span></span><br><span class=\"line\">  _adder.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _args.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _adder();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)(5)))</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(Number(add(1, 2, 3)(4)(5)(6)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// 简化写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rest.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func(...args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        args.push(...rest)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = currying(add)</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)  <span class=\"comment\">// 未真正求值，收集参数的和</span></span><br><span class=\"line\">sum() <span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum())</span><br></pre></td></tr></table></figure>\n\n<p>第一种方法想要得到结果，需要Number(), 第二种需要前期搜集参数， 可以控制什么时候输出结果。</p>\n"},{"title":"贝赛尔曲线","comments":1,"description":"贝赛尔曲线, canvas, css, js","date":"2016-08-01T00:53:10.000Z","keywords":"贝赛尔曲线","_content":"\n## 贝塞尔曲线简介\n\n这里写一篇关于贝塞尔曲线的基础知识，好多H5特效都用到了贝赛尔曲线。\n\n在这里讲解二次和三次贝赛尔曲线。二次（平方）贝塞尔曲线和三次（立方）贝塞尔曲线。二次贝赛尔曲线是由三个点来定义：两个锚点和一个控制点。三次贝塞尔曲线是由四个点控制，两个锚点，两个控制点。\n\n## 二次贝塞尔曲线\n\n二次贝塞尔曲线是那种只向一个方向弯曲的简单曲线，我们可以使用`quadraticCurveTo（x1，y1，x2，y2）`，该函数接收四个参数，表示两个点的X与Y坐标，第一个点是控制点，用于决定该曲线的形状，第二个点锚点。\n\n\n如图：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/Animation.gif)\n\n\n两个锚点和控制点：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/1K_3-8KIRB_VTG7U2WJKH9.png)\n\n给大家推荐一个网站：http://myst729.github.io/bezier-curve/\n\n示例代码：\n\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>二次贝赛尔曲线</title>\n    <meta name=\"keywords\" content=\"Bump\"/>\n    <meta name=\"description\" content=\"Bump\"/>\n    <style>\n        #canvas{\n            display: block;\n            margin:50px auto;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"500\" height=\"500\"></canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\"),\n        context = canvas.getContext(\"2d\");\n    context.fillStyle = \"blue\";\n    context.strokeStyle=\"#aaa\";\n    context.shadowColor = '#ccc';\n    context.shadowOffsetX = 4;\n    context.shadowOffsetY = 4;\n    context.shadowBlur = 4;\n    context.lineWidth = 20;\n    context.lineCap = \"round\";\n    context.beginPath();\n    context.moveTo(100,100);\n    context.quadraticCurveTo(150,100,200,200);\n    context.quadraticCurveTo(250,250,300,50);\n    context.quadraticCurveTo(330,0,400,50);\n    context.stroke();\n</script>\n</body>\n</html>\n```\n\n## 三次贝赛尔曲线\n三次贝赛尔曲线：能够向两个方向弯曲的曲线，`bezierCurveTo（x1,y1,x2,y2,x3,y3）`,传入三个坐标，前两个为该曲线的控制点，最后一个为锚点。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/Animation1.gif)\n\n三次贝塞尔曲线\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/YFT@M58PWOWIE-SRZN.png)\n\n示例代码:\n\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>三次贝塞尔曲线</title>\n    <meta name=\"keywords\" content=\"Bump\"/>\n    <meta name=\"description\" content=\"Bump\"/>\n    <style>\n        #canvas1{\n            display: block;\n            margin:50px auto;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas1\" width=\"500\" height=\"300\">\n    canvas not support\n</canvas>\n<script>\n    var canvas1 = document.getElementById(\"canvas1\"),\n        context = canvas1.getContext(\"2d\");\n    context.fillStyle = \"blue\";\n    context.strokeStyle=\"#aaa\";\n    context.shadowColor = '#ccc';\n    context.shadowOffsetX = 4;\n    context.shadowOffsetY = 4;\n    context.shadowBlur = 4;\n    context.lineWidth = 20;\n    context.lineCap = \"round\";\n    context.beginPath();\n    context.moveTo(130,70);\n    context.bezierCurveTo(130,250,450,70,430,270);\n    context.stroke();\n</script>\n</body>\n</html>\n```\n\n## 示例练习\n\n下面我们来用讲到的知识画一个躁动的心。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas2{\n            display: block;\n            margin:0 50px;\n            animation:scale 1s infinite alternate;\n        }\n        @keyframes scale {\n            to{\n                transform:scale(1.1);\n            }\n        }\n    </style>\n</head>\n<body>\n<div>\n    <canvas id=\"canvas2\" width=\"300\" height=\"300\">\n        canvas not support\n    </canvas>\n</div>\n<script>\n    //两个半圆加两个三次贝塞尔曲线搞定\n    window.onload = function () {\n        var canvas2 = document.getElementById(\"canvas2\");\n        var context = canvas2.getContext('2d'),\n            gradient = context.createLinearGradient(10, 10, 300, 300);\n        drawHeart(context,gradient);\n    };\n    function drawHeart(context,gradient) {\n        context.save();\n        context.beginPath();\n        gradient.addColorStop(0, '#adf0ff');\n        gradient.addColorStop(0.2, \"#ccc\");\n        gradient.addColorStop(0.4, \"#d967c8\");\n        gradient.addColorStop(0.6, \"#ff3300\");\n        context.fillStyle = gradient;\n        context.arc(100,100,50,Math.PI,0,false);\n        context.arc(200,100,50,Math.PI,0,false);\n        context.moveTo(250,100);\n        context.bezierCurveTo(240, 160, 180, 180, 150, 250);\n        context.bezierCurveTo( 120, 180,60, 160,50,100);\n        context.shadowColor = \"#f60\";\n        context.shadowOffsetX = 5;\n        context.shadowOffsetY = 5;\n        context.shadowBlur = 5;\n        context.fill();\n        context.closePath();\n    }\n</script>\n</body>\n</html>\n```\n\n打开浏览器可以看到一颗跳动的心\n\n","source":"_posts/js-4.md","raw":"---\ntitle: 贝赛尔曲线\ncomments: true\ndescription: 贝赛尔曲线, canvas, css, js\ntags: \"canvas\"\ndate: 2016-08-1 08:53:10\ncategories: \"js\"\nkeywords: 贝赛尔曲线\n---\n\n## 贝塞尔曲线简介\n\n这里写一篇关于贝塞尔曲线的基础知识，好多H5特效都用到了贝赛尔曲线。\n\n在这里讲解二次和三次贝赛尔曲线。二次（平方）贝塞尔曲线和三次（立方）贝塞尔曲线。二次贝赛尔曲线是由三个点来定义：两个锚点和一个控制点。三次贝塞尔曲线是由四个点控制，两个锚点，两个控制点。\n\n## 二次贝塞尔曲线\n\n二次贝塞尔曲线是那种只向一个方向弯曲的简单曲线，我们可以使用`quadraticCurveTo（x1，y1，x2，y2）`，该函数接收四个参数，表示两个点的X与Y坐标，第一个点是控制点，用于决定该曲线的形状，第二个点锚点。\n\n\n如图：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/Animation.gif)\n\n\n两个锚点和控制点：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/1K_3-8KIRB_VTG7U2WJKH9.png)\n\n给大家推荐一个网站：http://myst729.github.io/bezier-curve/\n\n示例代码：\n\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>二次贝赛尔曲线</title>\n    <meta name=\"keywords\" content=\"Bump\"/>\n    <meta name=\"description\" content=\"Bump\"/>\n    <style>\n        #canvas{\n            display: block;\n            margin:50px auto;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"500\" height=\"500\"></canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\"),\n        context = canvas.getContext(\"2d\");\n    context.fillStyle = \"blue\";\n    context.strokeStyle=\"#aaa\";\n    context.shadowColor = '#ccc';\n    context.shadowOffsetX = 4;\n    context.shadowOffsetY = 4;\n    context.shadowBlur = 4;\n    context.lineWidth = 20;\n    context.lineCap = \"round\";\n    context.beginPath();\n    context.moveTo(100,100);\n    context.quadraticCurveTo(150,100,200,200);\n    context.quadraticCurveTo(250,250,300,50);\n    context.quadraticCurveTo(330,0,400,50);\n    context.stroke();\n</script>\n</body>\n</html>\n```\n\n## 三次贝赛尔曲线\n三次贝赛尔曲线：能够向两个方向弯曲的曲线，`bezierCurveTo（x1,y1,x2,y2,x3,y3）`,传入三个坐标，前两个为该曲线的控制点，最后一个为锚点。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/Animation1.gif)\n\n三次贝塞尔曲线\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/YFT@M58PWOWIE-SRZN.png)\n\n示例代码:\n\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>三次贝塞尔曲线</title>\n    <meta name=\"keywords\" content=\"Bump\"/>\n    <meta name=\"description\" content=\"Bump\"/>\n    <style>\n        #canvas1{\n            display: block;\n            margin:50px auto;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas1\" width=\"500\" height=\"300\">\n    canvas not support\n</canvas>\n<script>\n    var canvas1 = document.getElementById(\"canvas1\"),\n        context = canvas1.getContext(\"2d\");\n    context.fillStyle = \"blue\";\n    context.strokeStyle=\"#aaa\";\n    context.shadowColor = '#ccc';\n    context.shadowOffsetX = 4;\n    context.shadowOffsetY = 4;\n    context.shadowBlur = 4;\n    context.lineWidth = 20;\n    context.lineCap = \"round\";\n    context.beginPath();\n    context.moveTo(130,70);\n    context.bezierCurveTo(130,250,450,70,430,270);\n    context.stroke();\n</script>\n</body>\n</html>\n```\n\n## 示例练习\n\n下面我们来用讲到的知识画一个躁动的心。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas2{\n            display: block;\n            margin:0 50px;\n            animation:scale 1s infinite alternate;\n        }\n        @keyframes scale {\n            to{\n                transform:scale(1.1);\n            }\n        }\n    </style>\n</head>\n<body>\n<div>\n    <canvas id=\"canvas2\" width=\"300\" height=\"300\">\n        canvas not support\n    </canvas>\n</div>\n<script>\n    //两个半圆加两个三次贝塞尔曲线搞定\n    window.onload = function () {\n        var canvas2 = document.getElementById(\"canvas2\");\n        var context = canvas2.getContext('2d'),\n            gradient = context.createLinearGradient(10, 10, 300, 300);\n        drawHeart(context,gradient);\n    };\n    function drawHeart(context,gradient) {\n        context.save();\n        context.beginPath();\n        gradient.addColorStop(0, '#adf0ff');\n        gradient.addColorStop(0.2, \"#ccc\");\n        gradient.addColorStop(0.4, \"#d967c8\");\n        gradient.addColorStop(0.6, \"#ff3300\");\n        context.fillStyle = gradient;\n        context.arc(100,100,50,Math.PI,0,false);\n        context.arc(200,100,50,Math.PI,0,false);\n        context.moveTo(250,100);\n        context.bezierCurveTo(240, 160, 180, 180, 150, 250);\n        context.bezierCurveTo( 120, 180,60, 160,50,100);\n        context.shadowColor = \"#f60\";\n        context.shadowOffsetX = 5;\n        context.shadowOffsetY = 5;\n        context.shadowBlur = 5;\n        context.fill();\n        context.closePath();\n    }\n</script>\n</body>\n</html>\n```\n\n打开浏览器可以看到一颗跳动的心\n\n","slug":"js-4","published":1,"updated":"2020-12-02T06:49:34.140Z","layout":"post","photos":[],"link":"","_id":"cki71walk003wtl9ka5miqrgp","content":"<h2 id=\"贝塞尔曲线简介\"><a href=\"#贝塞尔曲线简介\" class=\"headerlink\" title=\"贝塞尔曲线简介\"></a>贝塞尔曲线简介</h2><p>这里写一篇关于贝塞尔曲线的基础知识，好多H5特效都用到了贝赛尔曲线。</p>\n<p>在这里讲解二次和三次贝赛尔曲线。二次（平方）贝塞尔曲线和三次（立方）贝塞尔曲线。二次贝赛尔曲线是由三个点来定义：两个锚点和一个控制点。三次贝塞尔曲线是由四个点控制，两个锚点，两个控制点。</p>\n<h2 id=\"二次贝塞尔曲线\"><a href=\"#二次贝塞尔曲线\" class=\"headerlink\" title=\"二次贝塞尔曲线\"></a>二次贝塞尔曲线</h2><p>二次贝塞尔曲线是那种只向一个方向弯曲的简单曲线，我们可以使用<code>quadraticCurveTo（x1，y1，x2，y2）</code>，该函数接收四个参数，表示两个点的X与Y坐标，第一个点是控制点，用于决定该曲线的形状，第二个点锚点。</p>\n<p>如图：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/Animation.gif\" alt></p>\n<p>两个锚点和控制点：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/1K_3-8KIRB_VTG7U2WJKH9.png\" alt></p>\n<p>给大家推荐一个网站：<a href=\"http://myst729.github.io/bezier-curve/\" target=\"_blank\" rel=\"noopener\">http://myst729.github.io/bezier-curve/</a></p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>二次贝赛尔曲线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span> <span class=\"selector-tag\">auto</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    context.fillStyle = <span class=\"string\">\"blue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.strokeStyle=<span class=\"string\">\"#aaa\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.shadowColor = <span class=\"string\">'#ccc'</span>;</span></span><br><span class=\"line\">    context.shadowOffsetX = 4;</span><br><span class=\"line\">    context.shadowOffsetY = 4;</span><br><span class=\"line\">    context.shadowBlur = 4;</span><br><span class=\"line\">    context.lineWidth = 20;</span><br><span class=\"line\"><span class=\"javascript\">    context.lineCap = <span class=\"string\">\"round\"</span>;</span></span><br><span class=\"line\">    context.beginPath();</span><br><span class=\"line\">    context.moveTo(100,100);</span><br><span class=\"line\">    context.quadraticCurveTo(150,100,200,200);</span><br><span class=\"line\">    context.quadraticCurveTo(250,250,300,50);</span><br><span class=\"line\">    context.quadraticCurveTo(330,0,400,50);</span><br><span class=\"line\">    context.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三次贝赛尔曲线\"><a href=\"#三次贝赛尔曲线\" class=\"headerlink\" title=\"三次贝赛尔曲线\"></a>三次贝赛尔曲线</h2><p>三次贝赛尔曲线：能够向两个方向弯曲的曲线，<code>bezierCurveTo（x1,y1,x2,y2,x3,y3）</code>,传入三个坐标，前两个为该曲线的控制点，最后一个为锚点。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/Animation1.gif\" alt></p>\n<p>三次贝塞尔曲线</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/YFT@M58PWOWIE-SRZN.png\" alt></p>\n<p>示例代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>三次贝塞尔曲线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas1</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span> <span class=\"selector-tag\">auto</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span></span><br><span class=\"line\">    canvas not support</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas1\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas1.getContext(<span class=\"string\">\"2d\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    context.fillStyle = <span class=\"string\">\"blue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.strokeStyle=<span class=\"string\">\"#aaa\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.shadowColor = <span class=\"string\">'#ccc'</span>;</span></span><br><span class=\"line\">    context.shadowOffsetX = 4;</span><br><span class=\"line\">    context.shadowOffsetY = 4;</span><br><span class=\"line\">    context.shadowBlur = 4;</span><br><span class=\"line\">    context.lineWidth = 20;</span><br><span class=\"line\"><span class=\"javascript\">    context.lineCap = <span class=\"string\">\"round\"</span>;</span></span><br><span class=\"line\">    context.beginPath();</span><br><span class=\"line\">    context.moveTo(130,70);</span><br><span class=\"line\">    context.bezierCurveTo(130,250,450,70,430,270);</span><br><span class=\"line\">    context.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例练习\"><a href=\"#示例练习\" class=\"headerlink\" title=\"示例练习\"></a>示例练习</h2><p>下面我们来用讲到的知识画一个躁动的心。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas2</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span> 50<span class=\"selector-tag\">px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">animation</span><span class=\"selector-pseudo\">:scale</span> 1<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">infinite</span> <span class=\"selector-tag\">alternate</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"keyword\">@keyframes</span> scale &#123;</span></span><br><span class=\"line\">            to&#123;</span><br><span class=\"line\"><span class=\"css\">                <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(1.1)</span>;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span></span><br><span class=\"line\">        canvas not support</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//两个半圆加两个三次贝塞尔曲线搞定</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> canvas2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas2\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> context = canvas2.getContext(<span class=\"string\">'2d'</span>),</span></span><br><span class=\"line\">            gradient = context.createLinearGradient(10, 10, 300, 300);</span><br><span class=\"line\">        drawHeart(context,gradient);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHeart</span>(<span class=\"params\">context,gradient</span>) </span>&#123;</span></span><br><span class=\"line\">        context.save();</span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'#adf0ff'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.2</span>, <span class=\"string\">\"#ccc\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.4</span>, <span class=\"string\">\"#d967c8\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.6</span>, <span class=\"string\">\"#ff3300\"</span>);</span></span><br><span class=\"line\">        context.fillStyle = gradient;</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"built_in\">Math</span>.PI,<span class=\"number\">0</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        context.arc(<span class=\"number\">200</span>,<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"built_in\">Math</span>.PI,<span class=\"number\">0</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        context.moveTo(250,100);</span><br><span class=\"line\">        context.bezierCurveTo(240, 160, 180, 180, 150, 250);</span><br><span class=\"line\">        context.bezierCurveTo( 120, 180,60, 160,50,100);</span><br><span class=\"line\"><span class=\"javascript\">        context.shadowColor = <span class=\"string\">\"#f60\"</span>;</span></span><br><span class=\"line\">        context.shadowOffsetX = 5;</span><br><span class=\"line\">        context.shadowOffsetY = 5;</span><br><span class=\"line\">        context.shadowBlur = 5;</span><br><span class=\"line\">        context.fill();</span><br><span class=\"line\">        context.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器可以看到一颗跳动的心</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"贝塞尔曲线简介\"><a href=\"#贝塞尔曲线简介\" class=\"headerlink\" title=\"贝塞尔曲线简介\"></a>贝塞尔曲线简介</h2><p>这里写一篇关于贝塞尔曲线的基础知识，好多H5特效都用到了贝赛尔曲线。</p>\n<p>在这里讲解二次和三次贝赛尔曲线。二次（平方）贝塞尔曲线和三次（立方）贝塞尔曲线。二次贝赛尔曲线是由三个点来定义：两个锚点和一个控制点。三次贝塞尔曲线是由四个点控制，两个锚点，两个控制点。</p>\n<h2 id=\"二次贝塞尔曲线\"><a href=\"#二次贝塞尔曲线\" class=\"headerlink\" title=\"二次贝塞尔曲线\"></a>二次贝塞尔曲线</h2><p>二次贝塞尔曲线是那种只向一个方向弯曲的简单曲线，我们可以使用<code>quadraticCurveTo（x1，y1，x2，y2）</code>，该函数接收四个参数，表示两个点的X与Y坐标，第一个点是控制点，用于决定该曲线的形状，第二个点锚点。</p>\n<p>如图：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/Animation.gif\" alt></p>\n<p>两个锚点和控制点：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/1K_3-8KIRB_VTG7U2WJKH9.png\" alt></p>\n<p>给大家推荐一个网站：<a href=\"http://myst729.github.io/bezier-curve/\" target=\"_blank\" rel=\"noopener\">http://myst729.github.io/bezier-curve/</a></p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>二次贝赛尔曲线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span> <span class=\"selector-tag\">auto</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    context.fillStyle = <span class=\"string\">\"blue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.strokeStyle=<span class=\"string\">\"#aaa\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.shadowColor = <span class=\"string\">'#ccc'</span>;</span></span><br><span class=\"line\">    context.shadowOffsetX = 4;</span><br><span class=\"line\">    context.shadowOffsetY = 4;</span><br><span class=\"line\">    context.shadowBlur = 4;</span><br><span class=\"line\">    context.lineWidth = 20;</span><br><span class=\"line\"><span class=\"javascript\">    context.lineCap = <span class=\"string\">\"round\"</span>;</span></span><br><span class=\"line\">    context.beginPath();</span><br><span class=\"line\">    context.moveTo(100,100);</span><br><span class=\"line\">    context.quadraticCurveTo(150,100,200,200);</span><br><span class=\"line\">    context.quadraticCurveTo(250,250,300,50);</span><br><span class=\"line\">    context.quadraticCurveTo(330,0,400,50);</span><br><span class=\"line\">    context.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三次贝赛尔曲线\"><a href=\"#三次贝赛尔曲线\" class=\"headerlink\" title=\"三次贝赛尔曲线\"></a>三次贝赛尔曲线</h2><p>三次贝赛尔曲线：能够向两个方向弯曲的曲线，<code>bezierCurveTo（x1,y1,x2,y2,x3,y3）</code>,传入三个坐标，前两个为该曲线的控制点，最后一个为锚点。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/Animation1.gif\" alt></p>\n<p>三次贝塞尔曲线</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/YFT@M58PWOWIE-SRZN.png\" alt></p>\n<p>示例代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>三次贝塞尔曲线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Bump\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas1</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:50px</span> <span class=\"selector-tag\">auto</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span></span><br><span class=\"line\">    canvas not support</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canvas1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas1\"</span>),</span></span><br><span class=\"line\"><span class=\"javascript\">        context = canvas1.getContext(<span class=\"string\">\"2d\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    context.fillStyle = <span class=\"string\">\"blue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.strokeStyle=<span class=\"string\">\"#aaa\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    context.shadowColor = <span class=\"string\">'#ccc'</span>;</span></span><br><span class=\"line\">    context.shadowOffsetX = 4;</span><br><span class=\"line\">    context.shadowOffsetY = 4;</span><br><span class=\"line\">    context.shadowBlur = 4;</span><br><span class=\"line\">    context.lineWidth = 20;</span><br><span class=\"line\"><span class=\"javascript\">    context.lineCap = <span class=\"string\">\"round\"</span>;</span></span><br><span class=\"line\">    context.beginPath();</span><br><span class=\"line\">    context.moveTo(130,70);</span><br><span class=\"line\">    context.bezierCurveTo(130,250,450,70,430,270);</span><br><span class=\"line\">    context.stroke();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例练习\"><a href=\"#示例练习\" class=\"headerlink\" title=\"示例练习\"></a>示例练习</h2><p>下面我们来用讲到的知识画一个躁动的心。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#canvas2</span>&#123;</span></span><br><span class=\"line\">            display: block;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span><span class=\"selector-pseudo\">:0</span> 50<span class=\"selector-tag\">px</span>;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">animation</span><span class=\"selector-pseudo\">:scale</span> 1<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">infinite</span> <span class=\"selector-tag\">alternate</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"keyword\">@keyframes</span> scale &#123;</span></span><br><span class=\"line\">            to&#123;</span><br><span class=\"line\"><span class=\"css\">                <span class=\"selector-tag\">transform</span><span class=\"selector-pseudo\">:scale(1.1)</span>;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"300\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span></span><br><span class=\"line\">        canvas not support</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//两个半圆加两个三次贝塞尔曲线搞定</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> canvas2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas2\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> context = canvas2.getContext(<span class=\"string\">'2d'</span>),</span></span><br><span class=\"line\">            gradient = context.createLinearGradient(10, 10, 300, 300);</span><br><span class=\"line\">        drawHeart(context,gradient);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHeart</span>(<span class=\"params\">context,gradient</span>) </span>&#123;</span></span><br><span class=\"line\">        context.save();</span><br><span class=\"line\">        context.beginPath();</span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0</span>, <span class=\"string\">'#adf0ff'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.2</span>, <span class=\"string\">\"#ccc\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.4</span>, <span class=\"string\">\"#d967c8\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        gradient.addColorStop(<span class=\"number\">0.6</span>, <span class=\"string\">\"#ff3300\"</span>);</span></span><br><span class=\"line\">        context.fillStyle = gradient;</span><br><span class=\"line\"><span class=\"javascript\">        context.arc(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"built_in\">Math</span>.PI,<span class=\"number\">0</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        context.arc(<span class=\"number\">200</span>,<span class=\"number\">100</span>,<span class=\"number\">50</span>,<span class=\"built_in\">Math</span>.PI,<span class=\"number\">0</span>,<span class=\"literal\">false</span>);</span></span><br><span class=\"line\">        context.moveTo(250,100);</span><br><span class=\"line\">        context.bezierCurveTo(240, 160, 180, 180, 150, 250);</span><br><span class=\"line\">        context.bezierCurveTo( 120, 180,60, 160,50,100);</span><br><span class=\"line\"><span class=\"javascript\">        context.shadowColor = <span class=\"string\">\"#f60\"</span>;</span></span><br><span class=\"line\">        context.shadowOffsetX = 5;</span><br><span class=\"line\">        context.shadowOffsetY = 5;</span><br><span class=\"line\">        context.shadowBlur = 5;</span><br><span class=\"line\">        context.fill();</span><br><span class=\"line\">        context.closePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器可以看到一颗跳动的心</p>\n"},{"title":"基本数据类型与引用数据类型","comments":1,"description":"基本数据类型与引用数据类型","date":"2016-02-05T08:15:10.000Z","keywords":"string,number,null,undefined,boolean,基本数据类型与引用数据类型","_content":"## 概述\n\n基本类型是指简单的数据段，比如`string`,`number`,`null`,`undefined`,`boolean`等基本数据是按照值访问的，可以操作存在变量中的实际值。\n\n引用类型是一种数据结构，用于将数据很功能组合在一起。描述的是一类对象所具有的属性和方法。引用类型的值保存在内存中的对象，不允许直接访问内存中的位置。\n\n```js\nvar a = 10;\nvar b = a;\nvar a = 5;\nalert(b); //10;\nvar a = [1,2,3];\nvar b = a;\na[0]= 123;\nconsole.log(b);//[123,2,3];\n```\n\n## 动态的属性\n\n```js\nvar a = new Object();\na.age = 20;\nalert(a.age);    //20\nvar a = 'string';\na.age = 5;\nalert(a.age);   //undefined;\n```\n\n上例说明不能给基本类型添加属性，虽然没有报错。只能够给引用类型动态的添加属性。\n\n## 复制变量值\n\n```js\nvar a = 10;\nvar b = a;\n// 这个例子基本类型：a = 10,b=10.但是他们没有关系，不能互相影响。\nvar a = new Object();\na.age = 20;\nvar b = a;\nalert(b.age); //20\n```\n\n这里a,b指向同一个对象，当a.age存在的时候，也可以通过b.age来访问。\n\n## 传递参数\n\n访问变量有按值和按引用两种方式，但是参数只能按值传递。\n```js\nfunction a(b) {\n     b = 20;\n     return b;\n}\nvar c = 30;\nvar d =  a(c);\nalert(c); //30\nalert(d);  //20\n```\n\n上例可以看出数值等基本类型是按值传递的。\n\n```js\nfunction a(b) {\n  b.name = 'hbb';\n}\nvar c = new Object();\na(c);\nalert(c.name);  //hbb;\n```\n\n`b`与`c`引用的是同一个对象，指向同一个对象。所以通过c也能访问。\n\n```js\nfunction a(b) {\n  b.name = 'hbb';\n  b = new Object();\n  b.name = 'hb';\n}\nvar c = new Object();\na(c);\nalert(c.name);  //hbb;\n```\n\n例中，添加了两行代码，在`b.name = 'hbb'`,基础上重新定义了一个对象，该对象带有一个不同值得`name`属性。如果对象是按照引用传递的话，`c.name = 'hb'`， 但是实际即便在函数内修改参数的值，原始的引用保持不变，是`hbb`，所以对象引用类型也是按照值传递的。\n\n```js\nvar a = [1,2,3];\nvar b = a;\na = [4,5,6];\nconsole.log(b); //123\n```\n\n这里变为[1,2,3],因为前面a与b是引用关系，他们共同指向一个空间的内容。（指向同一个栈）而不是`b`指向`a`，`a`在指向数组，`b=[1,2,3]`。当把[4,5,6]赋值给a的时候，只是对a进行重新赋值，改变a的指向，并没有对a指向空间内容产生变化，所以并不会对b的引用产生影响。\n\n上述这些语句只是我自己的见解，如有不对，还请见谅，随时留言提醒我。欢迎指正！","source":"_posts/js-5.md","raw":"---\ntitle: 基本数据类型与引用数据类型\ncomments: true\ndescription: 基本数据类型与引用数据类型\ntags: \"js\"\ndate: 2016-02-5 16:15:10\ncategories: \"js\"\nkeywords: string,number,null,undefined,boolean,基本数据类型与引用数据类型\n---\n## 概述\n\n基本类型是指简单的数据段，比如`string`,`number`,`null`,`undefined`,`boolean`等基本数据是按照值访问的，可以操作存在变量中的实际值。\n\n引用类型是一种数据结构，用于将数据很功能组合在一起。描述的是一类对象所具有的属性和方法。引用类型的值保存在内存中的对象，不允许直接访问内存中的位置。\n\n```js\nvar a = 10;\nvar b = a;\nvar a = 5;\nalert(b); //10;\nvar a = [1,2,3];\nvar b = a;\na[0]= 123;\nconsole.log(b);//[123,2,3];\n```\n\n## 动态的属性\n\n```js\nvar a = new Object();\na.age = 20;\nalert(a.age);    //20\nvar a = 'string';\na.age = 5;\nalert(a.age);   //undefined;\n```\n\n上例说明不能给基本类型添加属性，虽然没有报错。只能够给引用类型动态的添加属性。\n\n## 复制变量值\n\n```js\nvar a = 10;\nvar b = a;\n// 这个例子基本类型：a = 10,b=10.但是他们没有关系，不能互相影响。\nvar a = new Object();\na.age = 20;\nvar b = a;\nalert(b.age); //20\n```\n\n这里a,b指向同一个对象，当a.age存在的时候，也可以通过b.age来访问。\n\n## 传递参数\n\n访问变量有按值和按引用两种方式，但是参数只能按值传递。\n```js\nfunction a(b) {\n     b = 20;\n     return b;\n}\nvar c = 30;\nvar d =  a(c);\nalert(c); //30\nalert(d);  //20\n```\n\n上例可以看出数值等基本类型是按值传递的。\n\n```js\nfunction a(b) {\n  b.name = 'hbb';\n}\nvar c = new Object();\na(c);\nalert(c.name);  //hbb;\n```\n\n`b`与`c`引用的是同一个对象，指向同一个对象。所以通过c也能访问。\n\n```js\nfunction a(b) {\n  b.name = 'hbb';\n  b = new Object();\n  b.name = 'hb';\n}\nvar c = new Object();\na(c);\nalert(c.name);  //hbb;\n```\n\n例中，添加了两行代码，在`b.name = 'hbb'`,基础上重新定义了一个对象，该对象带有一个不同值得`name`属性。如果对象是按照引用传递的话，`c.name = 'hb'`， 但是实际即便在函数内修改参数的值，原始的引用保持不变，是`hbb`，所以对象引用类型也是按照值传递的。\n\n```js\nvar a = [1,2,3];\nvar b = a;\na = [4,5,6];\nconsole.log(b); //123\n```\n\n这里变为[1,2,3],因为前面a与b是引用关系，他们共同指向一个空间的内容。（指向同一个栈）而不是`b`指向`a`，`a`在指向数组，`b=[1,2,3]`。当把[4,5,6]赋值给a的时候，只是对a进行重新赋值，改变a的指向，并没有对a指向空间内容产生变化，所以并不会对b的引用产生影响。\n\n上述这些语句只是我自己的见解，如有不对，还请见谅，随时留言提醒我。欢迎指正！","slug":"js-5","published":1,"updated":"2020-12-02T06:49:34.140Z","layout":"post","photos":[],"link":"","_id":"cki71wall003ztl9kl5l0bl8c","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>基本类型是指简单的数据段，比如<code>string</code>,<code>number</code>,<code>null</code>,<code>undefined</code>,<code>boolean</code>等基本数据是按照值访问的，可以操作存在变量中的实际值。</p>\n<p>引用类型是一种数据结构，用于将数据很功能组合在一起。描述的是一类对象所具有的属性和方法。引用类型的值保存在内存中的对象，不允许直接访问内存中的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">alert(b); <span class=\"comment\">//10;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a[<span class=\"number\">0</span>]= <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//[123,2,3];</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态的属性\"><a href=\"#动态的属性\" class=\"headerlink\" title=\"动态的属性\"></a>动态的属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(a.age);    <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'string'</span>;</span><br><span class=\"line\">a.age = <span class=\"number\">5</span>;</span><br><span class=\"line\">alert(a.age);   <span class=\"comment\">//undefined;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例说明不能给基本类型添加属性，虽然没有报错。只能够给引用类型动态的添加属性。</p>\n<h2 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"comment\">// 这个例子基本类型：a = 10,b=10.但是他们没有关系，不能互相影响。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">alert(b.age); <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里a,b指向同一个对象，当a.age存在的时候，也可以通过b.age来访问。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><p>访问变量有按值和按引用两种方式，但是参数只能按值传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">     b = <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d =  a(c);</span><br><span class=\"line\">alert(c); <span class=\"comment\">//30</span></span><br><span class=\"line\">alert(d);  <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出数值等基本类型是按值传递的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  b.name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a(c);</span><br><span class=\"line\">alert(c.name);  <span class=\"comment\">//hbb;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>b</code>与<code>c</code>引用的是同一个对象，指向同一个对象。所以通过c也能访问。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  b.name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\">  b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  b.name = <span class=\"string\">'hb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a(c);</span><br><span class=\"line\">alert(c.name);  <span class=\"comment\">//hbb;</span></span><br></pre></td></tr></table></figure>\n\n<p>例中，添加了两行代码，在<code>b.name = &#39;hbb&#39;</code>,基础上重新定义了一个对象，该对象带有一个不同值得<code>name</code>属性。如果对象是按照引用传递的话，<code>c.name = &#39;hb&#39;</code>， 但是实际即便在函数内修改参数的值，原始的引用保持不变，是<code>hbb</code>，所以对象引用类型也是按照值传递的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p>这里变为[1,2,3],因为前面a与b是引用关系，他们共同指向一个空间的内容。（指向同一个栈）而不是<code>b</code>指向<code>a</code>，<code>a</code>在指向数组，<code>b=[1,2,3]</code>。当把[4,5,6]赋值给a的时候，只是对a进行重新赋值，改变a的指向，并没有对a指向空间内容产生变化，所以并不会对b的引用产生影响。</p>\n<p>上述这些语句只是我自己的见解，如有不对，还请见谅，随时留言提醒我。欢迎指正！</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>基本类型是指简单的数据段，比如<code>string</code>,<code>number</code>,<code>null</code>,<code>undefined</code>,<code>boolean</code>等基本数据是按照值访问的，可以操作存在变量中的实际值。</p>\n<p>引用类型是一种数据结构，用于将数据很功能组合在一起。描述的是一类对象所具有的属性和方法。引用类型的值保存在内存中的对象，不允许直接访问内存中的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">alert(b); <span class=\"comment\">//10;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a[<span class=\"number\">0</span>]= <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//[123,2,3];</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态的属性\"><a href=\"#动态的属性\" class=\"headerlink\" title=\"动态的属性\"></a>动态的属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">alert(a.age);    <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'string'</span>;</span><br><span class=\"line\">a.age = <span class=\"number\">5</span>;</span><br><span class=\"line\">alert(a.age);   <span class=\"comment\">//undefined;</span></span><br></pre></td></tr></table></figure>\n\n<p>上例说明不能给基本类型添加属性，虽然没有报错。只能够给引用类型动态的添加属性。</p>\n<h2 id=\"复制变量值\"><a href=\"#复制变量值\" class=\"headerlink\" title=\"复制变量值\"></a>复制变量值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"comment\">// 这个例子基本类型：a = 10,b=10.但是他们没有关系，不能互相影响。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a.age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">alert(b.age); <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<p>这里a,b指向同一个对象，当a.age存在的时候，也可以通过b.age来访问。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><p>访问变量有按值和按引用两种方式，但是参数只能按值传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">     b = <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d =  a(c);</span><br><span class=\"line\">alert(c); <span class=\"comment\">//30</span></span><br><span class=\"line\">alert(d);  <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<p>上例可以看出数值等基本类型是按值传递的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  b.name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a(c);</span><br><span class=\"line\">alert(c.name);  <span class=\"comment\">//hbb;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>b</code>与<code>c</code>引用的是同一个对象，指向同一个对象。所以通过c也能访问。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  b.name = <span class=\"string\">'hbb'</span>;</span><br><span class=\"line\">  b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  b.name = <span class=\"string\">'hb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">a(c);</span><br><span class=\"line\">alert(c.name);  <span class=\"comment\">//hbb;</span></span><br></pre></td></tr></table></figure>\n\n<p>例中，添加了两行代码，在<code>b.name = &#39;hbb&#39;</code>,基础上重新定义了一个对象，该对象带有一个不同值得<code>name</code>属性。如果对象是按照引用传递的话，<code>c.name = &#39;hb&#39;</code>， 但是实际即便在函数内修改参数的值，原始的引用保持不变，是<code>hbb</code>，所以对象引用类型也是按照值传递的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p>这里变为[1,2,3],因为前面a与b是引用关系，他们共同指向一个空间的内容。（指向同一个栈）而不是<code>b</code>指向<code>a</code>，<code>a</code>在指向数组，<code>b=[1,2,3]</code>。当把[4,5,6]赋值给a的时候，只是对a进行重新赋值，改变a的指向，并没有对a指向空间内容产生变化，所以并不会对b的引用产生影响。</p>\n<p>上述这些语句只是我自己的见解，如有不对，还请见谅，随时留言提醒我。欢迎指正！</p>\n"},{"title":"jQuery中queue的分析","comments":1,"description":"queue() 方法显示或操作在匹配元素上执行的函数队列(动画队列)","date":"2016-08-15T04:35:45.000Z","keywords":"jQuery, js, queue的分析, 函数队列, 动画队列","_content":"\n`queue()` 方法显示或操作在匹配元素上执行的函数队列(动画队列)。\n\n## 动画队列\n\n下面我写了三个队列:\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n        width:300,\n        height:300\n },500);\n    $box.css('background','blue');\n    $box.animate({\n        left:100,\n        top:100\n    },500);\n    var n = $box.queue(\"fx\");\n    console.log(n);\n})();\n```\n\n上面的队列的执行顺序。—–>先变`background`然后在`width`，`height`最后才是`left，top`。（`JavaScript`是单线程控制）\n\n## 解决css属性变化不是队列的问题\n\n因为`css`不是队列，是瞬间完成的，所以首先`background`就已经瞬间完成，接着才是`width`，`height`—>`left`，`top`。如果我们想让`css`属性变化在某个队列完成之后才执行，有两种办法：\n\n### 第一个种：在某个队列里面添加回调函数\n\n```js\n(function () {\n     var $box = $('#box');\n     $box.animate({\n           width:300,\n           height:300\n },500,function () {\n        $box.css('background','blue');\n});\n$box.animate({\n        left:100,\n        top:100\n    },500);\n})();\n```\n\n这样达到我们的要求。比如在`width`，`height`变化完后在改变`background`。\n\n### 第二个种：使用.queue()\n\n把这个`css`属性变化过程添加到要求的队列后面。\n\n```js\n(function () {\n     var $box = $('#box');\n     $box.animate({\n          width:300,\n          height:300\n},500);\n$box.queue(function () {\n        $box.css('background','blue');\n });\n $box.animate({\n        left:100,\n        top:100\n    },500);\n})();\n```\n\n其实上面的例子在执行到`background`变化完之后就不会在执行后面的队列。因为没有`.dequeue()`不知道这个队列什么时候执行完，所以要加上`.dequeue()`。\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n          width:300,\n          height:300\n    },500);\n    $box.queue(function () {\n          $box.css('background','blue');\n          $box.dequeue();//结束此次队列\n    });\n    $box.animate({\n          left:100,\n          top:100\n    },500);\n})();\n```\n\n## 指定动画执行顺序及阻止某个特定动画队列\n\n关于队列执行顺序的问题：\n\n```js\n(function () {\n  var $box = $('#box');\n  $box.animate({\n    width:300,\n    height:300\n  },500,function () {\n    $box.queue(function () {\n      $box.css('background','blue');\n      $box.dequeue();//结束此次队列\n    });\n  });\n  $box.animate({\n    left:100,\n    top:100\n  },500);\n})();\n```\n\n这个队列执行顺序其实是：先变化`width`，`height`然后是`top`，`left`最后才是`background`。因为`background`所在的队列是`width`所在队列的回调函数，它是后面加上去的。`width`与`top`所在的队列是原先就在的，所以回调函数之后放在原有队列的最后面执行。\n如果我在队列1执行完后不想再执行队列2，该怎么阻止队列2执行呢？可以先给队列2起个名字，再用`.cleartQueue()`来阻止。\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n        width:300,\n        height:300\n    },500);\n    $box.queue(function () {\n        $box.css('background','blue');\n        $box.dequeue();  //结束此次队列\n    });\n    $box.animate('hbb',{\n         left:100,\n         top:100\n    },500);\n    $box.clearQueue('hbb');\n})();\n```\n","source":"_posts/js-7.md","raw":"---\ntitle: jQuery中queue的分析\ncomments: true\ndescription: queue() 方法显示或操作在匹配元素上执行的函数队列(动画队列)\ntags: \"jquery\"\ndate: 2016-08-15 12:35:45\ncategories: \"js\"\nkeywords: jQuery, js, queue的分析, 函数队列, 动画队列\n---\n\n`queue()` 方法显示或操作在匹配元素上执行的函数队列(动画队列)。\n\n## 动画队列\n\n下面我写了三个队列:\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n        width:300,\n        height:300\n },500);\n    $box.css('background','blue');\n    $box.animate({\n        left:100,\n        top:100\n    },500);\n    var n = $box.queue(\"fx\");\n    console.log(n);\n})();\n```\n\n上面的队列的执行顺序。—–>先变`background`然后在`width`，`height`最后才是`left，top`。（`JavaScript`是单线程控制）\n\n## 解决css属性变化不是队列的问题\n\n因为`css`不是队列，是瞬间完成的，所以首先`background`就已经瞬间完成，接着才是`width`，`height`—>`left`，`top`。如果我们想让`css`属性变化在某个队列完成之后才执行，有两种办法：\n\n### 第一个种：在某个队列里面添加回调函数\n\n```js\n(function () {\n     var $box = $('#box');\n     $box.animate({\n           width:300,\n           height:300\n },500,function () {\n        $box.css('background','blue');\n});\n$box.animate({\n        left:100,\n        top:100\n    },500);\n})();\n```\n\n这样达到我们的要求。比如在`width`，`height`变化完后在改变`background`。\n\n### 第二个种：使用.queue()\n\n把这个`css`属性变化过程添加到要求的队列后面。\n\n```js\n(function () {\n     var $box = $('#box');\n     $box.animate({\n          width:300,\n          height:300\n},500);\n$box.queue(function () {\n        $box.css('background','blue');\n });\n $box.animate({\n        left:100,\n        top:100\n    },500);\n})();\n```\n\n其实上面的例子在执行到`background`变化完之后就不会在执行后面的队列。因为没有`.dequeue()`不知道这个队列什么时候执行完，所以要加上`.dequeue()`。\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n          width:300,\n          height:300\n    },500);\n    $box.queue(function () {\n          $box.css('background','blue');\n          $box.dequeue();//结束此次队列\n    });\n    $box.animate({\n          left:100,\n          top:100\n    },500);\n})();\n```\n\n## 指定动画执行顺序及阻止某个特定动画队列\n\n关于队列执行顺序的问题：\n\n```js\n(function () {\n  var $box = $('#box');\n  $box.animate({\n    width:300,\n    height:300\n  },500,function () {\n    $box.queue(function () {\n      $box.css('background','blue');\n      $box.dequeue();//结束此次队列\n    });\n  });\n  $box.animate({\n    left:100,\n    top:100\n  },500);\n})();\n```\n\n这个队列执行顺序其实是：先变化`width`，`height`然后是`top`，`left`最后才是`background`。因为`background`所在的队列是`width`所在队列的回调函数，它是后面加上去的。`width`与`top`所在的队列是原先就在的，所以回调函数之后放在原有队列的最后面执行。\n如果我在队列1执行完后不想再执行队列2，该怎么阻止队列2执行呢？可以先给队列2起个名字，再用`.cleartQueue()`来阻止。\n\n```js\n(function () {\n    var $box = $('#box');\n    $box.animate({\n        width:300,\n        height:300\n    },500);\n    $box.queue(function () {\n        $box.css('background','blue');\n        $box.dequeue();  //结束此次队列\n    });\n    $box.animate('hbb',{\n         left:100,\n         top:100\n    },500);\n    $box.clearQueue('hbb');\n})();\n```\n","slug":"js-7","published":1,"updated":"2020-12-02T06:49:34.141Z","layout":"post","photos":[],"link":"","_id":"cki71walm0043tl9ka2wc8h7r","content":"<p><code>queue()</code> 方法显示或操作在匹配元素上执行的函数队列(动画队列)。</p>\n<h2 id=\"动画队列\"><a href=\"#动画队列\" class=\"headerlink\" title=\"动画队列\"></a>动画队列</h2><p>下面我写了三个队列:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        width:<span class=\"number\">300</span>,</span><br><span class=\"line\">        height:<span class=\"number\">300</span></span><br><span class=\"line\"> &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = $box.queue(<span class=\"string\">\"fx\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>上面的队列的执行顺序。—–&gt;先变<code>background</code>然后在<code>width</code>，<code>height</code>最后才是<code>left，top</code>。（<code>JavaScript</code>是单线程控制）</p>\n<h2 id=\"解决css属性变化不是队列的问题\"><a href=\"#解决css属性变化不是队列的问题\" class=\"headerlink\" title=\"解决css属性变化不是队列的问题\"></a>解决css属性变化不是队列的问题</h2><p>因为<code>css</code>不是队列，是瞬间完成的，所以首先<code>background</code>就已经瞬间完成，接着才是<code>width</code>，<code>height</code>—&gt;<code>left</code>，<code>top</code>。如果我们想让<code>css</code>属性变化在某个队列完成之后才执行，有两种办法：</p>\n<h3 id=\"第一个种：在某个队列里面添加回调函数\"><a href=\"#第一个种：在某个队列里面添加回调函数\" class=\"headerlink\" title=\"第一个种：在某个队列里面添加回调函数\"></a>第一个种：在某个队列里面添加回调函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">     $box.animate(&#123;</span><br><span class=\"line\">           width:<span class=\"number\">300</span>,</span><br><span class=\"line\">           height:<span class=\"number\">300</span></span><br><span class=\"line\"> &#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>这样达到我们的要求。比如在<code>width</code>，<code>height</code>变化完后在改变<code>background</code>。</p>\n<h3 id=\"第二个种：使用-queue\"><a href=\"#第二个种：使用-queue\" class=\"headerlink\" title=\"第二个种：使用.queue()\"></a>第二个种：使用.queue()</h3><p>把这个<code>css</code>属性变化过程添加到要求的队列后面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">     $box.animate(&#123;</span><br><span class=\"line\">          width:<span class=\"number\">300</span>,</span><br><span class=\"line\">          height:<span class=\"number\">300</span></span><br><span class=\"line\">&#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">$box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> $box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>其实上面的例子在执行到<code>background</code>变化完之后就不会在执行后面的队列。因为没有<code>.dequeue()</code>不知道这个队列什么时候执行完，所以要加上<code>.dequeue()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">          width:<span class=\"number\">300</span>,</span><br><span class=\"line\">          height:<span class=\"number\">300</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">          $box.dequeue();<span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">          left:<span class=\"number\">100</span>,</span><br><span class=\"line\">          top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定动画执行顺序及阻止某个特定动画队列\"><a href=\"#指定动画执行顺序及阻止某个特定动画队列\" class=\"headerlink\" title=\"指定动画执行顺序及阻止某个特定动画队列\"></a>指定动画执行顺序及阻止某个特定动画队列</h2><p>关于队列执行顺序的问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">  $box.animate(&#123;</span><br><span class=\"line\">    width:<span class=\"number\">300</span>,</span><br><span class=\"line\">    height:<span class=\"number\">300</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">      $box.dequeue();<span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $box.animate(&#123;</span><br><span class=\"line\">    left:<span class=\"number\">100</span>,</span><br><span class=\"line\">    top:<span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>这个队列执行顺序其实是：先变化<code>width</code>，<code>height</code>然后是<code>top</code>，<code>left</code>最后才是<code>background</code>。因为<code>background</code>所在的队列是<code>width</code>所在队列的回调函数，它是后面加上去的。<code>width</code>与<code>top</code>所在的队列是原先就在的，所以回调函数之后放在原有队列的最后面执行。<br>如果我在队列1执行完后不想再执行队列2，该怎么阻止队列2执行呢？可以先给队列2起个名字，再用<code>.cleartQueue()</code>来阻止。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        width:<span class=\"number\">300</span>,</span><br><span class=\"line\">        height:<span class=\"number\">300</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">        $box.dequeue();  <span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $box.animate(<span class=\"string\">'hbb'</span>,&#123;</span><br><span class=\"line\">         left:<span class=\"number\">100</span>,</span><br><span class=\"line\">         top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.clearQueue(<span class=\"string\">'hbb'</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p><code>queue()</code> 方法显示或操作在匹配元素上执行的函数队列(动画队列)。</p>\n<h2 id=\"动画队列\"><a href=\"#动画队列\" class=\"headerlink\" title=\"动画队列\"></a>动画队列</h2><p>下面我写了三个队列:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        width:<span class=\"number\">300</span>,</span><br><span class=\"line\">        height:<span class=\"number\">300</span></span><br><span class=\"line\"> &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = $box.queue(<span class=\"string\">\"fx\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>上面的队列的执行顺序。—–&gt;先变<code>background</code>然后在<code>width</code>，<code>height</code>最后才是<code>left，top</code>。（<code>JavaScript</code>是单线程控制）</p>\n<h2 id=\"解决css属性变化不是队列的问题\"><a href=\"#解决css属性变化不是队列的问题\" class=\"headerlink\" title=\"解决css属性变化不是队列的问题\"></a>解决css属性变化不是队列的问题</h2><p>因为<code>css</code>不是队列，是瞬间完成的，所以首先<code>background</code>就已经瞬间完成，接着才是<code>width</code>，<code>height</code>—&gt;<code>left</code>，<code>top</code>。如果我们想让<code>css</code>属性变化在某个队列完成之后才执行，有两种办法：</p>\n<h3 id=\"第一个种：在某个队列里面添加回调函数\"><a href=\"#第一个种：在某个队列里面添加回调函数\" class=\"headerlink\" title=\"第一个种：在某个队列里面添加回调函数\"></a>第一个种：在某个队列里面添加回调函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">     $box.animate(&#123;</span><br><span class=\"line\">           width:<span class=\"number\">300</span>,</span><br><span class=\"line\">           height:<span class=\"number\">300</span></span><br><span class=\"line\"> &#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>这样达到我们的要求。比如在<code>width</code>，<code>height</code>变化完后在改变<code>background</code>。</p>\n<h3 id=\"第二个种：使用-queue\"><a href=\"#第二个种：使用-queue\" class=\"headerlink\" title=\"第二个种：使用.queue()\"></a>第二个种：使用.queue()</h3><p>把这个<code>css</code>属性变化过程添加到要求的队列后面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">     $box.animate(&#123;</span><br><span class=\"line\">          width:<span class=\"number\">300</span>,</span><br><span class=\"line\">          height:<span class=\"number\">300</span></span><br><span class=\"line\">&#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">$box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> $box.animate(&#123;</span><br><span class=\"line\">        left:<span class=\"number\">100</span>,</span><br><span class=\"line\">        top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>其实上面的例子在执行到<code>background</code>变化完之后就不会在执行后面的队列。因为没有<code>.dequeue()</code>不知道这个队列什么时候执行完，所以要加上<code>.dequeue()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">          width:<span class=\"number\">300</span>,</span><br><span class=\"line\">          height:<span class=\"number\">300</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">          $box.dequeue();<span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">          left:<span class=\"number\">100</span>,</span><br><span class=\"line\">          top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定动画执行顺序及阻止某个特定动画队列\"><a href=\"#指定动画执行顺序及阻止某个特定动画队列\" class=\"headerlink\" title=\"指定动画执行顺序及阻止某个特定动画队列\"></a>指定动画执行顺序及阻止某个特定动画队列</h2><p>关于队列执行顺序的问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">  $box.animate(&#123;</span><br><span class=\"line\">    width:<span class=\"number\">300</span>,</span><br><span class=\"line\">    height:<span class=\"number\">300</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">      $box.dequeue();<span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $box.animate(&#123;</span><br><span class=\"line\">    left:<span class=\"number\">100</span>,</span><br><span class=\"line\">    top:<span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>这个队列执行顺序其实是：先变化<code>width</code>，<code>height</code>然后是<code>top</code>，<code>left</code>最后才是<code>background</code>。因为<code>background</code>所在的队列是<code>width</code>所在队列的回调函数，它是后面加上去的。<code>width</code>与<code>top</code>所在的队列是原先就在的，所以回调函数之后放在原有队列的最后面执行。<br>如果我在队列1执行完后不想再执行队列2，该怎么阻止队列2执行呢？可以先给队列2起个名字，再用<code>.cleartQueue()</code>来阻止。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>);</span><br><span class=\"line\">    $box.animate(&#123;</span><br><span class=\"line\">        width:<span class=\"number\">300</span>,</span><br><span class=\"line\">        height:<span class=\"number\">300</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $box.css(<span class=\"string\">'background'</span>,<span class=\"string\">'blue'</span>);</span><br><span class=\"line\">        $box.dequeue();  <span class=\"comment\">//结束此次队列</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $box.animate(<span class=\"string\">'hbb'</span>,&#123;</span><br><span class=\"line\">         left:<span class=\"number\">100</span>,</span><br><span class=\"line\">         top:<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    $box.clearQueue(<span class=\"string\">'hbb'</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n"},{"title":"get与post区别","comments":1,"description":"HTTP适用于从www服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：GET POST PUT DELETE。","date":"2016-03-15T10:45:10.000Z","keywords":"HTTP, GET, POST, PUT, DELETE","_content":"\n## `get`与`post`概述\n\n说起`get`与`post`我们不得不提起`http`。 首先认识`HTTP`：（`HTTP，HyperText Transfer Protocol`)超文本传输协议，目的是保证客户机与服务器之间的通信。\n\n`HTTP`适用于从`www`服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：`GET POST PUT DELETE`。\n\n一般在浏览器输入网址访问资源都是通过`get`方式。在`form`中我们也可以通过`method`指定传输方式`get`或者`post`。\n\n## URL\n\n`URL:Uniform Resource Locator`统一定位资源符。 基本`URL`包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。 如“协议://授权/路径?查询”。 完整的、带有授权部分的普通统一资源标志符语法看上去如下：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志。\n\n`HTTP`中的四种方法就是对应的这个资源的查，改，增，删这四个操作。\n\n## get与post区别\n\n如果你要是认为`get`与`post`的区别是数据在`url`可见，而`post`不可见。那你只是知道了一部分。其实`get`与`post`的区别很多。\n\n**get方法**\n\n1.请求可被缓存 。\n\n2.请求保存在浏览器历史记录当中。\n\n3.请求可被收藏为书签。\n\n4.不应再请求敏感数据时使用。\n\n5.请求有长度限制。\n\n6.get请求只应当用于取回数据，\n\n**post请求**\n\n1.不会被缓存。\n\n2.不会保存在历史记录中。\n\n3.post请求不能收藏为书签。\n\n4.post请求对数据的长度没有限制。\n\n\n`get`相对安全：这里的相对安全指get不会改变服务器里面的数据，而`post`一般会更改里面的数据。\n\n`post`相对安全：这里的相对安全指`post`不会在`url`中显示请求的一些参数，而`get`在`url`可以看到。\n\n \n\n## HTTP方法的幂等性\n\n是指一次和多次请求某一个资源应该具有同样的副作用。\n\n`GET`是获取指定`URL`上的资源，是读操作，重要的一点是不论对某个资源`GET`多少次，它的状态是不会改变的， 所以我们说`GET`是安全的，所以`GET`返回的内容可以被浏览器，`Cache`服务器缓存起来。\n\n而`POST`的语意是对指定资源“追加/添加”数据，所以是不安全的，每次提交的`POST`，参与的代码都会认为这个操作会修改操作对象资源的状态， 缓存服务器不会缓存`POST`请求返回内容。所以是不安全的。\n\n`get`与`post`不同涉及到很广的知识面。在查阅资料的过程中也看到了一篇有意思的文章：http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml\n\n除了上述列举的不同其实还有以下三点：\n\n`GET`和`POST`本质上就是`TCP`链接。这里可以把`TCP`理解为运输模块。传输的数据太大对浏览器与服务器都是很大的负担。通常会限制url数据大小。\n\n`GET`一个`TCP`数据包，`POST`会产生两个。\n\n对于`GET`方式的请求，浏览器会把`http header`和`data`一并发送出去，服务器响应200(返回数据); 而对于`POST`，浏览器先发送`header`，服务器响应100 `continue`，浏览器再发送`data`，服务器响应200 ok(返回数据)。\n\n## TCP\n`Transmission Control Protocol/Internet Protocol`的简写，中译名为传输控制协议/因特网互联协议， 又名网络通讯协议，是`Internet`最基本的协议、`Internet`国际互联网络的基础，由网络层的`IP`协议和传输层的`TCP`协议组成。 `TCP/IP` 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。 通俗而言：`TCP`负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而`IP`是给因特网的每一台联网设备规定一个地址。\n\n## 总结\n\n我们理解`get`与`post`的区别不能仅仅局限于数据在`url`是否可见，发散思维，在学习过程中多思考，慢慢锻炼自己的思维能力。有思路，问题也就迎刃而解！\n\n博主是自学的，文章也查阅了不少资料，但是因为能力所限，内容难免有些缺陷。\n","source":"_posts/js-6.md","raw":"---\ntitle: get与post区别\ncomments: true\ndescription: HTTP适用于从www服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：GET POST PUT DELETE。\ntags: \"js\"\ndate: 2016-03-15 18:45:10\ncategories: \"js\"\nkeywords: HTTP, GET, POST, PUT, DELETE\n---\n\n## `get`与`post`概述\n\n说起`get`与`post`我们不得不提起`http`。 首先认识`HTTP`：（`HTTP，HyperText Transfer Protocol`)超文本传输协议，目的是保证客户机与服务器之间的通信。\n\n`HTTP`适用于从`www`服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：`GET POST PUT DELETE`。\n\n一般在浏览器输入网址访问资源都是通过`get`方式。在`form`中我们也可以通过`method`指定传输方式`get`或者`post`。\n\n## URL\n\n`URL:Uniform Resource Locator`统一定位资源符。 基本`URL`包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。 如“协议://授权/路径?查询”。 完整的、带有授权部分的普通统一资源标志符语法看上去如下：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志。\n\n`HTTP`中的四种方法就是对应的这个资源的查，改，增，删这四个操作。\n\n## get与post区别\n\n如果你要是认为`get`与`post`的区别是数据在`url`可见，而`post`不可见。那你只是知道了一部分。其实`get`与`post`的区别很多。\n\n**get方法**\n\n1.请求可被缓存 。\n\n2.请求保存在浏览器历史记录当中。\n\n3.请求可被收藏为书签。\n\n4.不应再请求敏感数据时使用。\n\n5.请求有长度限制。\n\n6.get请求只应当用于取回数据，\n\n**post请求**\n\n1.不会被缓存。\n\n2.不会保存在历史记录中。\n\n3.post请求不能收藏为书签。\n\n4.post请求对数据的长度没有限制。\n\n\n`get`相对安全：这里的相对安全指get不会改变服务器里面的数据，而`post`一般会更改里面的数据。\n\n`post`相对安全：这里的相对安全指`post`不会在`url`中显示请求的一些参数，而`get`在`url`可以看到。\n\n \n\n## HTTP方法的幂等性\n\n是指一次和多次请求某一个资源应该具有同样的副作用。\n\n`GET`是获取指定`URL`上的资源，是读操作，重要的一点是不论对某个资源`GET`多少次，它的状态是不会改变的， 所以我们说`GET`是安全的，所以`GET`返回的内容可以被浏览器，`Cache`服务器缓存起来。\n\n而`POST`的语意是对指定资源“追加/添加”数据，所以是不安全的，每次提交的`POST`，参与的代码都会认为这个操作会修改操作对象资源的状态， 缓存服务器不会缓存`POST`请求返回内容。所以是不安全的。\n\n`get`与`post`不同涉及到很广的知识面。在查阅资料的过程中也看到了一篇有意思的文章：http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml\n\n除了上述列举的不同其实还有以下三点：\n\n`GET`和`POST`本质上就是`TCP`链接。这里可以把`TCP`理解为运输模块。传输的数据太大对浏览器与服务器都是很大的负担。通常会限制url数据大小。\n\n`GET`一个`TCP`数据包，`POST`会产生两个。\n\n对于`GET`方式的请求，浏览器会把`http header`和`data`一并发送出去，服务器响应200(返回数据); 而对于`POST`，浏览器先发送`header`，服务器响应100 `continue`，浏览器再发送`data`，服务器响应200 ok(返回数据)。\n\n## TCP\n`Transmission Control Protocol/Internet Protocol`的简写，中译名为传输控制协议/因特网互联协议， 又名网络通讯协议，是`Internet`最基本的协议、`Internet`国际互联网络的基础，由网络层的`IP`协议和传输层的`TCP`协议组成。 `TCP/IP` 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。 通俗而言：`TCP`负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而`IP`是给因特网的每一台联网设备规定一个地址。\n\n## 总结\n\n我们理解`get`与`post`的区别不能仅仅局限于数据在`url`是否可见，发散思维，在学习过程中多思考，慢慢锻炼自己的思维能力。有思路，问题也就迎刃而解！\n\n博主是自学的，文章也查阅了不少资料，但是因为能力所限，内容难免有些缺陷。\n","slug":"js-6","published":1,"updated":"2020-12-02T06:49:34.141Z","layout":"post","photos":[],"link":"","_id":"cki71walo0046tl9ko1vylycb","content":"<h2 id=\"get与post概述\"><a href=\"#get与post概述\" class=\"headerlink\" title=\"get与post概述\"></a><code>get</code>与<code>post</code>概述</h2><p>说起<code>get</code>与<code>post</code>我们不得不提起<code>http</code>。 首先认识<code>HTTP</code>：（<code>HTTP，HyperText Transfer Protocol</code>)超文本传输协议，目的是保证客户机与服务器之间的通信。</p>\n<p><code>HTTP</code>适用于从<code>www</code>服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：<code>GET POST PUT DELETE</code>。</p>\n<p>一般在浏览器输入网址访问资源都是通过<code>get</code>方式。在<code>form</code>中我们也可以通过<code>method</code>指定传输方式<code>get</code>或者<code>post</code>。</p>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p><code>URL:Uniform Resource Locator</code>统一定位资源符。 基本<code>URL</code>包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。 如“协议://授权/路径?查询”。 完整的、带有授权部分的普通统一资源标志符语法看上去如下：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志。</p>\n<p><code>HTTP</code>中的四种方法就是对应的这个资源的查，改，增，删这四个操作。</p>\n<h2 id=\"get与post区别\"><a href=\"#get与post区别\" class=\"headerlink\" title=\"get与post区别\"></a>get与post区别</h2><p>如果你要是认为<code>get</code>与<code>post</code>的区别是数据在<code>url</code>可见，而<code>post</code>不可见。那你只是知道了一部分。其实<code>get</code>与<code>post</code>的区别很多。</p>\n<p><strong>get方法</strong></p>\n<p>1.请求可被缓存 。</p>\n<p>2.请求保存在浏览器历史记录当中。</p>\n<p>3.请求可被收藏为书签。</p>\n<p>4.不应再请求敏感数据时使用。</p>\n<p>5.请求有长度限制。</p>\n<p>6.get请求只应当用于取回数据，</p>\n<p><strong>post请求</strong></p>\n<p>1.不会被缓存。</p>\n<p>2.不会保存在历史记录中。</p>\n<p>3.post请求不能收藏为书签。</p>\n<p>4.post请求对数据的长度没有限制。</p>\n<p><code>get</code>相对安全：这里的相对安全指get不会改变服务器里面的数据，而<code>post</code>一般会更改里面的数据。</p>\n<p><code>post</code>相对安全：这里的相对安全指<code>post</code>不会在<code>url</code>中显示请求的一些参数，而<code>get</code>在<code>url</code>可以看到。</p>\n<h2 id=\"HTTP方法的幂等性\"><a href=\"#HTTP方法的幂等性\" class=\"headerlink\" title=\"HTTP方法的幂等性\"></a>HTTP方法的幂等性</h2><p>是指一次和多次请求某一个资源应该具有同样的副作用。</p>\n<p><code>GET</code>是获取指定<code>URL</code>上的资源，是读操作，重要的一点是不论对某个资源<code>GET</code>多少次，它的状态是不会改变的， 所以我们说<code>GET</code>是安全的，所以<code>GET</code>返回的内容可以被浏览器，<code>Cache</code>服务器缓存起来。</p>\n<p>而<code>POST</code>的语意是对指定资源“追加/添加”数据，所以是不安全的，每次提交的<code>POST</code>，参与的代码都会认为这个操作会修改操作对象资源的状态， 缓存服务器不会缓存<code>POST</code>请求返回内容。所以是不安全的。</p>\n<p><code>get</code>与<code>post</code>不同涉及到很广的知识面。在查阅资料的过程中也看到了一篇有意思的文章：<a href=\"http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml\" target=\"_blank\" rel=\"noopener\">http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml</a></p>\n<p>除了上述列举的不同其实还有以下三点：</p>\n<p><code>GET</code>和<code>POST</code>本质上就是<code>TCP</code>链接。这里可以把<code>TCP</code>理解为运输模块。传输的数据太大对浏览器与服务器都是很大的负担。通常会限制url数据大小。</p>\n<p><code>GET</code>一个<code>TCP</code>数据包，<code>POST</code>会产生两个。</p>\n<p>对于<code>GET</code>方式的请求，浏览器会把<code>http header</code>和<code>data</code>一并发送出去，服务器响应200(返回数据); 而对于<code>POST</code>，浏览器先发送<code>header</code>，服务器响应100 <code>continue</code>，浏览器再发送<code>data</code>，服务器响应200 ok(返回数据)。</p>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><p><code>Transmission Control Protocol/Internet Protocol</code>的简写，中译名为传输控制协议/因特网互联协议， 又名网络通讯协议，是<code>Internet</code>最基本的协议、<code>Internet</code>国际互联网络的基础，由网络层的<code>IP</code>协议和传输层的<code>TCP</code>协议组成。 <code>TCP/IP</code> 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。 通俗而言：<code>TCP</code>负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而<code>IP</code>是给因特网的每一台联网设备规定一个地址。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们理解<code>get</code>与<code>post</code>的区别不能仅仅局限于数据在<code>url</code>是否可见，发散思维，在学习过程中多思考，慢慢锻炼自己的思维能力。有思路，问题也就迎刃而解！</p>\n<p>博主是自学的，文章也查阅了不少资料，但是因为能力所限，内容难免有些缺陷。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"get与post概述\"><a href=\"#get与post概述\" class=\"headerlink\" title=\"get与post概述\"></a><code>get</code>与<code>post</code>概述</h2><p>说起<code>get</code>与<code>post</code>我们不得不提起<code>http</code>。 首先认识<code>HTTP</code>：（<code>HTTP，HyperText Transfer Protocol</code>)超文本传输协议，目的是保证客户机与服务器之间的通信。</p>\n<p><code>HTTP</code>适用于从<code>www</code>服务器传输文本到本地浏览器的传输协议，可使浏览器高效，快速的传输，还可以确定传输文档中的哪一部分首先显示。 与服务器交互的四种最基本的方法：<code>GET POST PUT DELETE</code>。</p>\n<p>一般在浏览器输入网址访问资源都是通过<code>get</code>方式。在<code>form</code>中我们也可以通过<code>method</code>指定传输方式<code>get</code>或者<code>post</code>。</p>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p><code>URL:Uniform Resource Locator</code>统一定位资源符。 基本<code>URL</code>包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。 如“协议://授权/路径?查询”。 完整的、带有授权部分的普通统一资源标志符语法看上去如下：协议://用户名:密码@子域名.域名.顶级域名:端口号/目录/文件名.文件后缀?参数=值#标志。</p>\n<p><code>HTTP</code>中的四种方法就是对应的这个资源的查，改，增，删这四个操作。</p>\n<h2 id=\"get与post区别\"><a href=\"#get与post区别\" class=\"headerlink\" title=\"get与post区别\"></a>get与post区别</h2><p>如果你要是认为<code>get</code>与<code>post</code>的区别是数据在<code>url</code>可见，而<code>post</code>不可见。那你只是知道了一部分。其实<code>get</code>与<code>post</code>的区别很多。</p>\n<p><strong>get方法</strong></p>\n<p>1.请求可被缓存 。</p>\n<p>2.请求保存在浏览器历史记录当中。</p>\n<p>3.请求可被收藏为书签。</p>\n<p>4.不应再请求敏感数据时使用。</p>\n<p>5.请求有长度限制。</p>\n<p>6.get请求只应当用于取回数据，</p>\n<p><strong>post请求</strong></p>\n<p>1.不会被缓存。</p>\n<p>2.不会保存在历史记录中。</p>\n<p>3.post请求不能收藏为书签。</p>\n<p>4.post请求对数据的长度没有限制。</p>\n<p><code>get</code>相对安全：这里的相对安全指get不会改变服务器里面的数据，而<code>post</code>一般会更改里面的数据。</p>\n<p><code>post</code>相对安全：这里的相对安全指<code>post</code>不会在<code>url</code>中显示请求的一些参数，而<code>get</code>在<code>url</code>可以看到。</p>\n<h2 id=\"HTTP方法的幂等性\"><a href=\"#HTTP方法的幂等性\" class=\"headerlink\" title=\"HTTP方法的幂等性\"></a>HTTP方法的幂等性</h2><p>是指一次和多次请求某一个资源应该具有同样的副作用。</p>\n<p><code>GET</code>是获取指定<code>URL</code>上的资源，是读操作，重要的一点是不论对某个资源<code>GET</code>多少次，它的状态是不会改变的， 所以我们说<code>GET</code>是安全的，所以<code>GET</code>返回的内容可以被浏览器，<code>Cache</code>服务器缓存起来。</p>\n<p>而<code>POST</code>的语意是对指定资源“追加/添加”数据，所以是不安全的，每次提交的<code>POST</code>，参与的代码都会认为这个操作会修改操作对象资源的状态， 缓存服务器不会缓存<code>POST</code>请求返回内容。所以是不安全的。</p>\n<p><code>get</code>与<code>post</code>不同涉及到很广的知识面。在查阅资料的过程中也看到了一篇有意思的文章：<a href=\"http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml\" target=\"_blank\" rel=\"noopener\">http://www.techweb.com.cn/network/system/2016-10-11/2407736.shtml</a></p>\n<p>除了上述列举的不同其实还有以下三点：</p>\n<p><code>GET</code>和<code>POST</code>本质上就是<code>TCP</code>链接。这里可以把<code>TCP</code>理解为运输模块。传输的数据太大对浏览器与服务器都是很大的负担。通常会限制url数据大小。</p>\n<p><code>GET</code>一个<code>TCP</code>数据包，<code>POST</code>会产生两个。</p>\n<p>对于<code>GET</code>方式的请求，浏览器会把<code>http header</code>和<code>data</code>一并发送出去，服务器响应200(返回数据); 而对于<code>POST</code>，浏览器先发送<code>header</code>，服务器响应100 <code>continue</code>，浏览器再发送<code>data</code>，服务器响应200 ok(返回数据)。</p>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><p><code>Transmission Control Protocol/Internet Protocol</code>的简写，中译名为传输控制协议/因特网互联协议， 又名网络通讯协议，是<code>Internet</code>最基本的协议、<code>Internet</code>国际互联网络的基础，由网络层的<code>IP</code>协议和传输层的<code>TCP</code>协议组成。 <code>TCP/IP</code> 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。 通俗而言：<code>TCP</code>负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而<code>IP</code>是给因特网的每一台联网设备规定一个地址。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们理解<code>get</code>与<code>post</code>的区别不能仅仅局限于数据在<code>url</code>是否可见，发散思维，在学习过程中多思考，慢慢锻炼自己的思维能力。有思路，问题也就迎刃而解！</p>\n<p>博主是自学的，文章也查阅了不少资料，但是因为能力所限，内容难免有些缺陷。</p>\n"},{"title":"事件冒泡及捕获","comments":1,"description":"IE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。","date":"2016-09-10T11:35:50.000Z","keywords":"事件冒泡, 捕获","_content":"\n## 事件冒泡与事件捕获\n\n### 事件冒泡\n\nIE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。\n\n### 事件捕获\n\n恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。\n\n### 事件冒泡及捕获\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/m1.jpg)\n\n下面来看个示例：\n\n```html\n<div id = 'box'>\n  <p>111</p>\n</div>\n```\n\n在`div`中插入以下`p`标签，`p`与`div`都有点击事件，当点击`p`的时候那个先执行呢？\n\n```js\nvar oBox = document.getElementById('box'),\n    oP = oBox.children[0];\n    oBox.onclick = function () {\n      alert('box先触发')\n    };\n    oP.onclick = function (e) {\n      e = e ||window.event;\n      //e.cancelBubble = true;\n      alert('p先触发')\n    }\n```\n\n点击`p`，`p`先触发，然后`box`再触发。我们如果不需要`box`触发，可以阻至冒泡。（冒泡是从内到外，捕获是从外到内）\n\n可以再`p`点击内加上`e.cancelBubble = true`; 这样`box`点击事件就不会触发(阻止冒泡)。\n\n使用`addEventListener`来写也可以\n\n```js\noBox.addEventListener('click',function () {\n  alert('box先触发')\n},false);\noP.addEventListener('click',function () {\n    alert('p先触发')\n},false);\n```\n\n如果默认false为冒泡；如果要事件捕获可以把`box`中的false改为true。\n\n## 事件委托\n我找到一个比较流行的例子：取快递事件。\n\n有30个同事预计会在周一收到快递。为签收快递，有两种办法：一是30个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。\n\n这里其实还有2层意思的：\n\n第一，现在委托前台的同事是可以代为签收的，即程序中的现有的`dom`节点是有事件的；\n\n第二，新员工也是可以被前台MM代为签收的，即程序中新添加的`dom`节点也是有事件的。\n\n在`js`中，事件程序的处理数量直接关系到页面的整体运行，因为需要不断的与`DOM`节点进行交互，访问DOM节点次数越多，就会延长浏览器的交互时间。减少DOM操作优化性能的重要手段，可以利用事件委托来处理。//\n比如有10个或者更多个li，我们点击li就会弹出相应的内容，相信我们大多数都会用到`for`去遍历:\n\n```js\n  var aLi = document.querySelectorAll(\"#box ul li\");\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n      alert(this.innerHTML);\n    }\n  }\n```\n每一次点击都会去访问`li`节点，毫无疑问增加了访问DOM的次数，如果更多数量这样的就会影响性能。\n\n上面情况适合采用事件委托：\n\n```js\nvar oBox = document.getElementById('box');\noBox.onclick = function (e) {\n  e = e || window.event;\n  if (e.target.nodeName === 'LI'){\n    alert(e.target.innerHTML);\n  }\n};\n```\n\n这样委托用`oBox`点击去管理所有的`li`点击，比上面遍历li要好一些。\n\n```js\n<ul>\n  <li>11</li>\n  <li>22</li>\n  <li>33</li>\n  <li>44</li>\n  <li>55</li>\n  <li>66</li>\n  <li>77</li>\n  <li>88</li>\n  <li>99</li>\n  <li>10</li>\n</ul>\n<button id=“btn”>生成</button>\n```\n\n刚生成的`li`有没有点击事件呢？\n\n```js\nvar oBox = document.getElementById('box');\nvar oUl = oBox.children[0];\nvar btn = document.getElementById('btn');\n var aLi = document.querySelectorAll(\"#box ul li\");\n for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n    alert(this.innerHTML);\n  }\n}\n//生成li\nbtn.onclick = function() {\n  var li = document.createElement('li');\n  li.innerHTML = '1111';\n  oUl.appendChild(li);\n  click();\n};\n```\n\n这样生成的`li`没有点击事件的.\n\n采用事件委托方法可以。\n\n```js\nvar oBox = document.getElementById('box');\nvar btn = document.getElementById('btn');\nvar oUl = oBox.children[0];\nvar aLi = document.querySelectorAll(\"#box ul li\");\noBox.onclick = function (e) {\n  e = e || window.event;\n  if (e.target.nodeName === 'LI'){\n    alert(e.target.innerHTML);\n  }\n};\nbtn.addEventListener('click',function () {\n //生成li\n  var li = document.createElement('li');\n  li.innerHTML = '1111';\n  oUl.appendChild(li);\n});\n```\n\n## jQuery中的delegate\n\n`jquery`中的`delegate`也可以。`delegate()` 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。\n\n使用 `delegate()` 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。//`jQuery`中`live/die`也有这样的功能。\n\n```js\n//生成li\nvar $box = $('#box'),\n       $btn = $('#btn'),\n       i = 1;\n$box.delegate('li','click',function () {\n      $(this).slideToggle();\n});\n$btn.click(function (i) {\n      $('<li>i</li>').insertAfter('button');\n      i++;\n});\n```\n这样生成的`li`有点击事件的。\n\n事件冒泡，捕获与委托现实中经常遇到，主要就是能清楚概念，我在刚开始解除时候也是晕，理解它就好了，用的时候也有针对性。\n","source":"_posts/js-9.md","raw":"---\ntitle: 事件冒泡及捕获\ncomments: true\ndescription: IE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。\ntags: \"js\"\ndate: 2016-09-10 19:35:50\ncategories: \"js\"\nkeywords: 事件冒泡, 捕获\n---\n\n## 事件冒泡与事件捕获\n\n### 事件冒泡\n\nIE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。\n\n### 事件捕获\n\n恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。\n\n### 事件冒泡及捕获\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/m1.jpg)\n\n下面来看个示例：\n\n```html\n<div id = 'box'>\n  <p>111</p>\n</div>\n```\n\n在`div`中插入以下`p`标签，`p`与`div`都有点击事件，当点击`p`的时候那个先执行呢？\n\n```js\nvar oBox = document.getElementById('box'),\n    oP = oBox.children[0];\n    oBox.onclick = function () {\n      alert('box先触发')\n    };\n    oP.onclick = function (e) {\n      e = e ||window.event;\n      //e.cancelBubble = true;\n      alert('p先触发')\n    }\n```\n\n点击`p`，`p`先触发，然后`box`再触发。我们如果不需要`box`触发，可以阻至冒泡。（冒泡是从内到外，捕获是从外到内）\n\n可以再`p`点击内加上`e.cancelBubble = true`; 这样`box`点击事件就不会触发(阻止冒泡)。\n\n使用`addEventListener`来写也可以\n\n```js\noBox.addEventListener('click',function () {\n  alert('box先触发')\n},false);\noP.addEventListener('click',function () {\n    alert('p先触发')\n},false);\n```\n\n如果默认false为冒泡；如果要事件捕获可以把`box`中的false改为true。\n\n## 事件委托\n我找到一个比较流行的例子：取快递事件。\n\n有30个同事预计会在周一收到快递。为签收快递，有两种办法：一是30个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。\n\n这里其实还有2层意思的：\n\n第一，现在委托前台的同事是可以代为签收的，即程序中的现有的`dom`节点是有事件的；\n\n第二，新员工也是可以被前台MM代为签收的，即程序中新添加的`dom`节点也是有事件的。\n\n在`js`中，事件程序的处理数量直接关系到页面的整体运行，因为需要不断的与`DOM`节点进行交互，访问DOM节点次数越多，就会延长浏览器的交互时间。减少DOM操作优化性能的重要手段，可以利用事件委托来处理。//\n比如有10个或者更多个li，我们点击li就会弹出相应的内容，相信我们大多数都会用到`for`去遍历:\n\n```js\n  var aLi = document.querySelectorAll(\"#box ul li\");\n  for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n      alert(this.innerHTML);\n    }\n  }\n```\n每一次点击都会去访问`li`节点，毫无疑问增加了访问DOM的次数，如果更多数量这样的就会影响性能。\n\n上面情况适合采用事件委托：\n\n```js\nvar oBox = document.getElementById('box');\noBox.onclick = function (e) {\n  e = e || window.event;\n  if (e.target.nodeName === 'LI'){\n    alert(e.target.innerHTML);\n  }\n};\n```\n\n这样委托用`oBox`点击去管理所有的`li`点击，比上面遍历li要好一些。\n\n```js\n<ul>\n  <li>11</li>\n  <li>22</li>\n  <li>33</li>\n  <li>44</li>\n  <li>55</li>\n  <li>66</li>\n  <li>77</li>\n  <li>88</li>\n  <li>99</li>\n  <li>10</li>\n</ul>\n<button id=“btn”>生成</button>\n```\n\n刚生成的`li`有没有点击事件呢？\n\n```js\nvar oBox = document.getElementById('box');\nvar oUl = oBox.children[0];\nvar btn = document.getElementById('btn');\n var aLi = document.querySelectorAll(\"#box ul li\");\n for (var i = 0,length = aLi.length; i < length; i++) {\n    aLi[i].onclick = function () {\n    alert(this.innerHTML);\n  }\n}\n//生成li\nbtn.onclick = function() {\n  var li = document.createElement('li');\n  li.innerHTML = '1111';\n  oUl.appendChild(li);\n  click();\n};\n```\n\n这样生成的`li`没有点击事件的.\n\n采用事件委托方法可以。\n\n```js\nvar oBox = document.getElementById('box');\nvar btn = document.getElementById('btn');\nvar oUl = oBox.children[0];\nvar aLi = document.querySelectorAll(\"#box ul li\");\noBox.onclick = function (e) {\n  e = e || window.event;\n  if (e.target.nodeName === 'LI'){\n    alert(e.target.innerHTML);\n  }\n};\nbtn.addEventListener('click',function () {\n //生成li\n  var li = document.createElement('li');\n  li.innerHTML = '1111';\n  oUl.appendChild(li);\n});\n```\n\n## jQuery中的delegate\n\n`jquery`中的`delegate`也可以。`delegate()` 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。\n\n使用 `delegate()` 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。//`jQuery`中`live/die`也有这样的功能。\n\n```js\n//生成li\nvar $box = $('#box'),\n       $btn = $('#btn'),\n       i = 1;\n$box.delegate('li','click',function () {\n      $(this).slideToggle();\n});\n$btn.click(function (i) {\n      $('<li>i</li>').insertAfter('button');\n      i++;\n});\n```\n这样生成的`li`有点击事件的。\n\n事件冒泡，捕获与委托现实中经常遇到，主要就是能清楚概念，我在刚开始解除时候也是晕，理解它就好了，用的时候也有针对性。\n","slug":"js-9","published":1,"updated":"2020-12-02T06:49:34.142Z","layout":"post","photos":[],"link":"","_id":"cki71walq004atl9kmhj5er99","content":"<h2 id=\"事件冒泡与事件捕获\"><a href=\"#事件冒泡与事件捕获\" class=\"headerlink\" title=\"事件冒泡与事件捕获\"></a>事件冒泡与事件捕获</h2><h3 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h3><p>IE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。</p>\n<h3 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h3><p>恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。</p>\n<h3 id=\"事件冒泡及捕获\"><a href=\"#事件冒泡及捕获\" class=\"headerlink\" title=\"事件冒泡及捕获\"></a>事件冒泡及捕获</h3><p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/m1.jpg\" alt></p>\n<p>下面来看个示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> = <span class=\"string\">'box'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>div</code>中插入以下<code>p</code>标签，<code>p</code>与<code>div</code>都有点击事件，当点击<code>p</code>的时候那个先执行呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>),</span><br><span class=\"line\">    oP = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'box先触发'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    oP.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e = e ||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">      <span class=\"comment\">//e.cancelBubble = true;</span></span><br><span class=\"line\">      alert(<span class=\"string\">'p先触发'</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击<code>p</code>，<code>p</code>先触发，然后<code>box</code>再触发。我们如果不需要<code>box</code>触发，可以阻至冒泡。（冒泡是从内到外，捕获是从外到内）</p>\n<p>可以再<code>p</code>点击内加上<code>e.cancelBubble = true</code>; 这样<code>box</code>点击事件就不会触发(阻止冒泡)。</p>\n<p>使用<code>addEventListener</code>来写也可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oBox.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'box先触发'</span>)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">oP.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'p先触发'</span>)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果默认false为冒泡；如果要事件捕获可以把<code>box</code>中的false改为true。</p>\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>我找到一个比较流行的例子：取快递事件。</p>\n<p>有30个同事预计会在周一收到快递。为签收快递，有两种办法：一是30个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>\n<p>这里其实还有2层意思的：</p>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的<code>dom</code>节点是有事件的；</p>\n<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的<code>dom</code>节点也是有事件的。</p>\n<p>在<code>js</code>中，事件程序的处理数量直接关系到页面的整体运行，因为需要不断的与<code>DOM</code>节点进行交互，访问DOM节点次数越多，就会延长浏览器的交互时间。减少DOM操作优化性能的重要手段，可以利用事件委托来处理。//<br>比如有10个或者更多个li，我们点击li就会弹出相应的内容，相信我们大多数都会用到<code>for</code>去遍历:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每一次点击都会去访问<code>li</code>节点，毫无疑问增加了访问DOM的次数，如果更多数量这样的就会影响性能。</p>\n<p>上面情况适合采用事件委托：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\">oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">    alert(e.target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样委托用<code>oBox</code>点击去管理所有的<code>li</code>点击，比上面遍历li要好一些。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">11</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;22&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">33</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;44&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">55</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;66&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">77</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;88&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">99</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button id=“btn”&gt;生成&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>刚生成的<code>li</code>有没有点击事件呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> oUl = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成li</span></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'1111'</span>;</span><br><span class=\"line\">  oUl.appendChild(li);</span><br><span class=\"line\">  click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样生成的<code>li</code>没有点击事件的.</p>\n<p>采用事件委托方法可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> oUl = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\">oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">    alert(e.target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//生成li</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'1111'</span>;</span><br><span class=\"line\">  oUl.appendChild(li);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery中的delegate\"><a href=\"#jQuery中的delegate\" class=\"headerlink\" title=\"jQuery中的delegate\"></a>jQuery中的delegate</h2><p><code>jquery</code>中的<code>delegate</code>也可以。<code>delegate()</code> 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</p>\n<p>使用 <code>delegate()</code> 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。//<code>jQuery</code>中<code>live/die</code>也有这样的功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成li</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>),</span><br><span class=\"line\">       $btn = $(<span class=\"string\">'#btn'</span>),</span><br><span class=\"line\">       i = <span class=\"number\">1</span>;</span><br><span class=\"line\">$box.delegate(<span class=\"string\">'li'</span>,<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"keyword\">this</span>).slideToggle();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$btn.click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">'&lt;li&gt;i&lt;/li&gt;'</span>).insertAfter(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样生成的<code>li</code>有点击事件的。</p>\n<p>事件冒泡，捕获与委托现实中经常遇到，主要就是能清楚概念，我在刚开始解除时候也是晕，理解它就好了，用的时候也有针对性。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"事件冒泡与事件捕获\"><a href=\"#事件冒泡与事件捕获\" class=\"headerlink\" title=\"事件冒泡与事件捕获\"></a>事件冒泡与事件捕获</h2><h3 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h3><p>IE的事件流叫做事件冒泡，即事件开始由最具体的元素(文档中嵌套层次最深的节点）接收，然后逐级向上传播到对象层次的最顶层(由里向外触发同类事件)。</p>\n<h3 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h3><p>恰恰相反，是从不太具体的节点早接收事件，最具体的节点最后接收事件，目的就在于时间到达预定目标之前捕获它（由外向内触发同类事件）。</p>\n<h3 id=\"事件冒泡及捕获\"><a href=\"#事件冒泡及捕获\" class=\"headerlink\" title=\"事件冒泡及捕获\"></a>事件冒泡及捕获</h3><p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/m1.jpg\" alt></p>\n<p>下面来看个示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> = <span class=\"string\">'box'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>div</code>中插入以下<code>p</code>标签，<code>p</code>与<code>div</code>都有点击事件，当点击<code>p</code>的时候那个先执行呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>),</span><br><span class=\"line\">    oP = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'box先触发'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    oP.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e = e ||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">      <span class=\"comment\">//e.cancelBubble = true;</span></span><br><span class=\"line\">      alert(<span class=\"string\">'p先触发'</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击<code>p</code>，<code>p</code>先触发，然后<code>box</code>再触发。我们如果不需要<code>box</code>触发，可以阻至冒泡。（冒泡是从内到外，捕获是从外到内）</p>\n<p>可以再<code>p</code>点击内加上<code>e.cancelBubble = true</code>; 这样<code>box</code>点击事件就不会触发(阻止冒泡)。</p>\n<p>使用<code>addEventListener</code>来写也可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oBox.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'box先触发'</span>)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">oP.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'p先触发'</span>)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果默认false为冒泡；如果要事件捕获可以把<code>box</code>中的false改为true。</p>\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>我找到一个比较流行的例子：取快递事件。</p>\n<p>有30个同事预计会在周一收到快递。为签收快递，有两种办法：一是30个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>\n<p>这里其实还有2层意思的：</p>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的<code>dom</code>节点是有事件的；</p>\n<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的<code>dom</code>节点也是有事件的。</p>\n<p>在<code>js</code>中，事件程序的处理数量直接关系到页面的整体运行，因为需要不断的与<code>DOM</code>节点进行交互，访问DOM节点次数越多，就会延长浏览器的交互时间。减少DOM操作优化性能的重要手段，可以利用事件委托来处理。//<br>比如有10个或者更多个li，我们点击li就会弹出相应的内容，相信我们大多数都会用到<code>for</code>去遍历:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">  aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每一次点击都会去访问<code>li</code>节点，毫无疑问增加了访问DOM的次数，如果更多数量这样的就会影响性能。</p>\n<p>上面情况适合采用事件委托：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\">oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">    alert(e.target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样委托用<code>oBox</code>点击去管理所有的<code>li</code>点击，比上面遍历li要好一些。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">11</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;22&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">33</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;44&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">55</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;66&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">77</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;88&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;<span class=\"number\">99</span>&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button id=“btn”&gt;生成&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>刚生成的<code>li</code>有没有点击事件呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> oUl = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,length = aLi.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    aLi[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成li</span></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'1111'</span>;</span><br><span class=\"line\">  oUl.appendChild(li);</span><br><span class=\"line\">  click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样生成的<code>li</code>没有点击事件的.</p>\n<p>采用事件委托方法可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> oUl = oBox.children[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> aLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"#box ul li\"</span>);</span><br><span class=\"line\">oBox.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">    alert(e.target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//生成li</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>);</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'1111'</span>;</span><br><span class=\"line\">  oUl.appendChild(li);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery中的delegate\"><a href=\"#jQuery中的delegate\" class=\"headerlink\" title=\"jQuery中的delegate\"></a>jQuery中的delegate</h2><p><code>jquery</code>中的<code>delegate</code>也可以。<code>delegate()</code> 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</p>\n<p>使用 <code>delegate()</code> 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。//<code>jQuery</code>中<code>live/die</code>也有这样的功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成li</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $box = $(<span class=\"string\">'#box'</span>),</span><br><span class=\"line\">       $btn = $(<span class=\"string\">'#btn'</span>),</span><br><span class=\"line\">       i = <span class=\"number\">1</span>;</span><br><span class=\"line\">$box.delegate(<span class=\"string\">'li'</span>,<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"keyword\">this</span>).slideToggle();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$btn.click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">'&lt;li&gt;i&lt;/li&gt;'</span>).insertAfter(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样生成的<code>li</code>有点击事件的。</p>\n<p>事件冒泡，捕获与委托现实中经常遇到，主要就是能清楚概念，我在刚开始解除时候也是晕，理解它就好了，用的时候也有针对性。</p>\n"},{"title":"定时器传递参数问题","comments":1,"description":"定时器传递参数问题","date":"2016-09-10T11:35:50.000Z","keywords":"定时器传递参数问题","_content":"\n## 定时器传参\n\n`setTimeout(a,timer)`/`setInterval(a,timer)`;当 `a`为函数名的时候不能传参数，如果过`a`为字符串的时候可以传参数。\n\n```js\nfunction a() {\n  alert('b')\n};\nsetTimeout(a,3000);  //'b'.\nvar i = 'string';\nfunction a(b) {\n     alert(b);\n};\nsetTimeout(a(i),3000); //立刻执行，弹出‘string’,不是我们想要的3s之后在执行。\n```\n\n## 如何解决a为函数名的情况下传递参数\n\n解决a为函数名的情况下传递参数呢 。\n\n### 函数名采用字符串的形式\n\n```js\nvar i = 'string';\nfunction a(b) {\n    alert(b)\n}\nsetTimeout('a(i)',3000); //给a(i)加上引号就可以了。\n```\n\n### 匿名函数封装\n\n```js\nvar i = 'string';\nfunction a(b) {\n  alert(b)\n}\nsetTimeout(function () {\n  a(i);\n},3000); //这样也是可以再3s之后弹出’string‘的。\n```\n\n### 创建一个新的函数将a函数作为返回值返回\n\n```js\nvar i = 'string';\nfunction a() {\n  alert(i);\n}；\nfunction b(i) {\n  return function(){a(i);}\n}；\nsetTimeout(b(i),3000); //这样也是可以再3s之后弹出'string'的。\n```\n\n### 我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\n\n```js\nvar i = 'string';\nfunction a(i) {\n alert(i);\n}；\nsetTimeout(a,3000,i);  //这种方法也是可以的\n```\n\n因为`JavaScript`是运行于单线程的环境中的，定时器只是计划在某个时间执行，因为在页面的声明周期中，不同的时间可能有其他代码控制`JavaScript`进程，定时期的执行时间不能保证。\n\n## 定时器工作方式\n\n定时器对队列的工作方式是：在特定的时间过去后将代码插入，把定时器这段代码插入，并不是立刻执行，只能说是会尽快执行，因为定时器代码加入队列后。如果有其他代码需要执行，那么定时器代码执行需要等待，直到，队列内没有其东西，这段代码才会执行。\n\n```js\nvar btn = document.getElementById('btn');\nbtn.onclick = function () {\n  setTimeout(function () {\n      alert(1);\n  },3000);\n  document.getElementById('pic').style.background = 'red';\n};\n```\n\n这里我们设置了一个3s后调用的定时器，点击`btn`之后首先将`onclick`事件添加到队列中，改程序执行后才能设置定时器，再有3s之后，指定的代码才能添加到队列中等待执行。这里指定的事件间隔是表示何时将定时器的代码添加到队列，而不是何时实际执行的代码。\n","source":"_posts/js-8.md","raw":"---\ntitle: 定时器传递参数问题\ncomments: true\ndescription: 定时器传递参数问题\ntags: \"js\"\ndate: 2016-09-10 19:35:50\ncategories: \"js\"\nkeywords: 定时器传递参数问题\n---\n\n## 定时器传参\n\n`setTimeout(a,timer)`/`setInterval(a,timer)`;当 `a`为函数名的时候不能传参数，如果过`a`为字符串的时候可以传参数。\n\n```js\nfunction a() {\n  alert('b')\n};\nsetTimeout(a,3000);  //'b'.\nvar i = 'string';\nfunction a(b) {\n     alert(b);\n};\nsetTimeout(a(i),3000); //立刻执行，弹出‘string’,不是我们想要的3s之后在执行。\n```\n\n## 如何解决a为函数名的情况下传递参数\n\n解决a为函数名的情况下传递参数呢 。\n\n### 函数名采用字符串的形式\n\n```js\nvar i = 'string';\nfunction a(b) {\n    alert(b)\n}\nsetTimeout('a(i)',3000); //给a(i)加上引号就可以了。\n```\n\n### 匿名函数封装\n\n```js\nvar i = 'string';\nfunction a(b) {\n  alert(b)\n}\nsetTimeout(function () {\n  a(i);\n},3000); //这样也是可以再3s之后弹出’string‘的。\n```\n\n### 创建一个新的函数将a函数作为返回值返回\n\n```js\nvar i = 'string';\nfunction a() {\n  alert(i);\n}；\nfunction b(i) {\n  return function(){a(i);}\n}；\nsetTimeout(b(i),3000); //这样也是可以再3s之后弹出'string'的。\n```\n\n### 我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\n\n```js\nvar i = 'string';\nfunction a(i) {\n alert(i);\n}；\nsetTimeout(a,3000,i);  //这种方法也是可以的\n```\n\n因为`JavaScript`是运行于单线程的环境中的，定时器只是计划在某个时间执行，因为在页面的声明周期中，不同的时间可能有其他代码控制`JavaScript`进程，定时期的执行时间不能保证。\n\n## 定时器工作方式\n\n定时器对队列的工作方式是：在特定的时间过去后将代码插入，把定时器这段代码插入，并不是立刻执行，只能说是会尽快执行，因为定时器代码加入队列后。如果有其他代码需要执行，那么定时器代码执行需要等待，直到，队列内没有其东西，这段代码才会执行。\n\n```js\nvar btn = document.getElementById('btn');\nbtn.onclick = function () {\n  setTimeout(function () {\n      alert(1);\n  },3000);\n  document.getElementById('pic').style.background = 'red';\n};\n```\n\n这里我们设置了一个3s后调用的定时器，点击`btn`之后首先将`onclick`事件添加到队列中，改程序执行后才能设置定时器，再有3s之后，指定的代码才能添加到队列中等待执行。这里指定的事件间隔是表示何时将定时器的代码添加到队列，而不是何时实际执行的代码。\n","slug":"js-8","published":1,"updated":"2020-12-02T06:49:34.142Z","layout":"post","photos":[],"link":"","_id":"cki71walr004dtl9kj5q70k6s","content":"<h2 id=\"定时器传参\"><a href=\"#定时器传参\" class=\"headerlink\" title=\"定时器传参\"></a>定时器传参</h2><p><code>setTimeout(a,timer)</code>/<code>setInterval(a,timer)</code>;当 <code>a</code>为函数名的时候不能传参数，如果过<code>a</code>为字符串的时候可以传参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(a,<span class=\"number\">3000</span>);  <span class=\"comment\">//'b'.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">     alert(b);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(a(i),<span class=\"number\">3000</span>); <span class=\"comment\">//立刻执行，弹出‘string’,不是我们想要的3s之后在执行。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何解决a为函数名的情况下传递参数\"><a href=\"#如何解决a为函数名的情况下传递参数\" class=\"headerlink\" title=\"如何解决a为函数名的情况下传递参数\"></a>如何解决a为函数名的情况下传递参数</h2><p>解决a为函数名的情况下传递参数呢 。</p>\n<h3 id=\"函数名采用字符串的形式\"><a href=\"#函数名采用字符串的形式\" class=\"headerlink\" title=\"函数名采用字符串的形式\"></a>函数名采用字符串的形式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    alert(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"string\">'a(i)'</span>,<span class=\"number\">3000</span>); <span class=\"comment\">//给a(i)加上引号就可以了。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"匿名函数封装\"><a href=\"#匿名函数封装\" class=\"headerlink\" title=\"匿名函数封装\"></a>匿名函数封装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  alert(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  a(i);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>); <span class=\"comment\">//这样也是可以再3s之后弹出’string‘的。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个新的函数将a函数作为返回值返回\"><a href=\"#创建一个新的函数将a函数作为返回值返回\" class=\"headerlink\" title=\"创建一个新的函数将a函数作为返回值返回\"></a>创建一个新的函数将a函数作为返回值返回</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(i);</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;a(i);&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">setTimeout(b(i),<span class=\"number\">3000</span>); <span class=\"comment\">//这样也是可以再3s之后弹出'string'的。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\"><a href=\"#我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\" class=\"headerlink\" title=\"我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\"></a>我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\"> alert(i);</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">setTimeout(a,<span class=\"number\">3000</span>,i);  <span class=\"comment\">//这种方法也是可以的</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>JavaScript</code>是运行于单线程的环境中的，定时器只是计划在某个时间执行，因为在页面的声明周期中，不同的时间可能有其他代码控制<code>JavaScript</code>进程，定时期的执行时间不能保证。</p>\n<h2 id=\"定时器工作方式\"><a href=\"#定时器工作方式\" class=\"headerlink\" title=\"定时器工作方式\"></a>定时器工作方式</h2><p>定时器对队列的工作方式是：在特定的时间过去后将代码插入，把定时器这段代码插入，并不是立刻执行，只能说是会尽快执行，因为定时器代码加入队列后。如果有其他代码需要执行，那么定时器代码执行需要等待，直到，队列内没有其东西，这段代码才会执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pic'</span>).style.background = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们设置了一个3s后调用的定时器，点击<code>btn</code>之后首先将<code>onclick</code>事件添加到队列中，改程序执行后才能设置定时器，再有3s之后，指定的代码才能添加到队列中等待执行。这里指定的事件间隔是表示何时将定时器的代码添加到队列，而不是何时实际执行的代码。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"定时器传参\"><a href=\"#定时器传参\" class=\"headerlink\" title=\"定时器传参\"></a>定时器传参</h2><p><code>setTimeout(a,timer)</code>/<code>setInterval(a,timer)</code>;当 <code>a</code>为函数名的时候不能传参数，如果过<code>a</code>为字符串的时候可以传参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(a,<span class=\"number\">3000</span>);  <span class=\"comment\">//'b'.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">     alert(b);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(a(i),<span class=\"number\">3000</span>); <span class=\"comment\">//立刻执行，弹出‘string’,不是我们想要的3s之后在执行。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何解决a为函数名的情况下传递参数\"><a href=\"#如何解决a为函数名的情况下传递参数\" class=\"headerlink\" title=\"如何解决a为函数名的情况下传递参数\"></a>如何解决a为函数名的情况下传递参数</h2><p>解决a为函数名的情况下传递参数呢 。</p>\n<h3 id=\"函数名采用字符串的形式\"><a href=\"#函数名采用字符串的形式\" class=\"headerlink\" title=\"函数名采用字符串的形式\"></a>函数名采用字符串的形式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    alert(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"string\">'a(i)'</span>,<span class=\"number\">3000</span>); <span class=\"comment\">//给a(i)加上引号就可以了。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"匿名函数封装\"><a href=\"#匿名函数封装\" class=\"headerlink\" title=\"匿名函数封装\"></a>匿名函数封装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  alert(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  a(i);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>); <span class=\"comment\">//这样也是可以再3s之后弹出’string‘的。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个新的函数将a函数作为返回值返回\"><a href=\"#创建一个新的函数将a函数作为返回值返回\" class=\"headerlink\" title=\"创建一个新的函数将a函数作为返回值返回\"></a>创建一个新的函数将a函数作为返回值返回</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(i);</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;a(i);&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">setTimeout(b(i),<span class=\"number\">3000</span>); <span class=\"comment\">//这样也是可以再3s之后弹出'string'的。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\"><a href=\"#我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\" class=\"headerlink\" title=\"我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位\"></a>我认为是最方便的一种方法，把要传的参数放到定时器里面的第三位</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"string\">'string'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\"> alert(i);</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\">setTimeout(a,<span class=\"number\">3000</span>,i);  <span class=\"comment\">//这种方法也是可以的</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>JavaScript</code>是运行于单线程的环境中的，定时器只是计划在某个时间执行，因为在页面的声明周期中，不同的时间可能有其他代码控制<code>JavaScript</code>进程，定时期的执行时间不能保证。</p>\n<h2 id=\"定时器工作方式\"><a href=\"#定时器工作方式\" class=\"headerlink\" title=\"定时器工作方式\"></a>定时器工作方式</h2><p>定时器对队列的工作方式是：在特定的时间过去后将代码插入，把定时器这段代码插入，并不是立刻执行，只能说是会尽快执行，因为定时器代码加入队列后。如果有其他代码需要执行，那么定时器代码执行需要等待，直到，队列内没有其东西，这段代码才会执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pic'</span>).style.background = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们设置了一个3s后调用的定时器，点击<code>btn</code>之后首先将<code>onclick</code>事件添加到队列中，改程序执行后才能设置定时器，再有3s之后，指定的代码才能添加到队列中等待执行。这里指定的事件间隔是表示何时将定时器的代码添加到队列，而不是何时实际执行的代码。</p>\n"},{"title":"markdown语法","comments":1,"description":"markdown","date":"2016-12-20T01:29:10.000Z","keywords":"markdown","_content":"\n\n\n<h1 id=\"header\">标题</h1>\n\n```md\n<!-- 一级标题 -->\n# TEST\n<!-- 二级级标题 -->\n## TEST\n<!-- 三级标题 -->\n### TEST\n<!-- 四级标题 -->\n#### TEST\n<!-- 五级标题 -->\n#####  TEST\n<!-- 六级标题 -->\n###### TEST\n####### TEST\n<!-- 最多支持六级标题 -->\n```\n\n## 横线\n\n```md\n<!-- *** -->\n***\n<!-- --- -->\n\n---\n<!-- ___ -->\n___\n```\n\n## 文本\n\n```md\n<!-- 普通文本 -->\n\n这是markdown 测试文本\n\n<!-- 单行文本 已一个tab间距或者四个空格开头 -->\n\n  这个是单行文本\n\n<!-- 加粗字体 -->\n**加粗字体**\n\n<!-- 斜体加粗 -->\n***斜体加粗***\n\n<!-- 倾斜 -->\n*倾斜文字*\n\n<!-- 删除线 -->\n~~删除线~~\n```\n\n## 引用\n\n```md\n<!-- 在文字前面加上  > -->\n>引用文字\n>>引用文字\n>>>引用文字\n>>>>引用文字\n>>>>>引用文字\n>>>>>>引用文字\n>>>>>>>引用文字\n>>>>>>>>引用文字\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>引用文字\n```\n\n## 图片\n\n```md\n<!-- ![图片alt](图片地址 '图片title') -->\n![图标](src  '随意试试')\n```\n\n![图标](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1544495576&di=d0d30b69693d5cadd72667272c6ebaa0&src=http://img1c.xgo-img.com.cn/pics/1503/1502063.jpg '随意试试')\n\n## 超链接\n\n```md\n<!-- [超链接名](超链接地址 \"超链接title\") -->\n[我的github](https://github.com/hbbaly '我的github')\n```\n\n[我的github](https://github.com/hbbaly '我的github')\n\n## 锚点\n\n```md\n// 顶部html  <h1 id=\"header\">markdown 学习笔记</h1>\n\n<!-- [回到顶部](#readme) -->\n[回到顶部](#header)\n```\n\n[回到顶部](#header)\n\n## 无序列表\n\n```md\n<!-- -+* 都可以 -->\n- 无序列表\n+ 无序列表\n* 无序列表\n```\n- 无序列表\n+ 无序列表\n* 无序列表\n\n## 有序列表\n\n```md\n<!-- 数字加点 序号跟内容之间要有空格 -->\n1.列表内容\n\n2.列表内容\n\n3.列表内容\n```\n\n1.列表内容\n\n2.列表内容\n\n3.列表内容\n\n\n## 列表嵌套\n\n```md\n<!-- 列表嵌套上一级和下一级之间敲三个空格即可 -->\n1.列表内容\n  - 这是嵌套列表\n  + 这是嵌套列表\n```\n\n1.列表内容\n  - 这是嵌套列表\n\n  + 这是嵌套列表\n\n## 表格\n\n```md\n<!--\n  表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n\n第二行分割表头和内容。\n- 有一个就行，为了对齐，多加了几个\n文字默认居左\n-两边加：表示文字居中\n-右边加：表示文字居右\n-->\n```\n\n```md\n|姓名|性别|年龄|\n|---|:--:|---:|\n|否过|请问|WDEF|\n|AFSDF |内WDDEFD容|SDSF内容|\n\n```\n\n|姓名|性别|年龄|\n|---|:--:|---:|\n|否过|请问|WDEF|\n|AFSDF |内WDDEFD容|SDSF内容|\n\n## 代码\n\n```md\n<!-- 单行代码 -->\n`<h1>标题</h1>`\n\n<!-- 多行代码 三个反引号-->\n    ```\n      <div>\n        <p>多行代码</p>\n      </div>\n    ```\n```\n\n`<h1>标题</h1>`\n\n```html\n  <div>\n    <p>多行代码</p>\n  </div>\n```\n\n## 流程图\n\n::: danger\n  推荐使用Xmind画流程图\n:::\n\n\n```mermaid\ngraph TD;\n    id(A)-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n    E-->F;\n    F-->A;\n```\n\ngraph 方向描述\n    图表中的其他语句...\n#### 图表方向\n|用词|含义|\n|---|:--:|\n|TB|从上到下|\n|BT|从下到上|\n|RL|从右到左|\n|LR|从左到右|\n\n#### 节点定义\n\n|表述|说明|\n|---|:--:|\n|id[文字]|矩形节点|\n|id(文字)|圆角矩形节点|\n|id((文字))|圆形节点|\n|id>文字]|右向旗帜状节点|\n|id{文字}|菱形节点|\n\n#### 节点间的连线\n|表述|说明|\n|---|:--:|\n|>|添加尾部箭头|\n|-|不添加尾部箭头|\n|--|单线|\n|--text--|单线上加文字|\n|==|粗线|\n|==text==|粗线加文字|\n|-.-|虚线|\n|-.text.-|虚线加文字|\n\n\n``` mermaid\ngraph TB\n  A==>id(D);\n  id((B))--text-->C;\n  C==text==>id{D};\n  E-.->F\n```\n","source":"_posts/md.md","raw":"---\ntitle: markdown语法\ncomments: true\ndescription: markdown\ntags: \"md\"\ndate: 2016-12-20 09:29:10\ncategories: \"md\"\nkeywords: markdown\n---\n\n\n\n<h1 id=\"header\">标题</h1>\n\n```md\n<!-- 一级标题 -->\n# TEST\n<!-- 二级级标题 -->\n## TEST\n<!-- 三级标题 -->\n### TEST\n<!-- 四级标题 -->\n#### TEST\n<!-- 五级标题 -->\n#####  TEST\n<!-- 六级标题 -->\n###### TEST\n####### TEST\n<!-- 最多支持六级标题 -->\n```\n\n## 横线\n\n```md\n<!-- *** -->\n***\n<!-- --- -->\n\n---\n<!-- ___ -->\n___\n```\n\n## 文本\n\n```md\n<!-- 普通文本 -->\n\n这是markdown 测试文本\n\n<!-- 单行文本 已一个tab间距或者四个空格开头 -->\n\n  这个是单行文本\n\n<!-- 加粗字体 -->\n**加粗字体**\n\n<!-- 斜体加粗 -->\n***斜体加粗***\n\n<!-- 倾斜 -->\n*倾斜文字*\n\n<!-- 删除线 -->\n~~删除线~~\n```\n\n## 引用\n\n```md\n<!-- 在文字前面加上  > -->\n>引用文字\n>>引用文字\n>>>引用文字\n>>>>引用文字\n>>>>>引用文字\n>>>>>>引用文字\n>>>>>>>引用文字\n>>>>>>>>引用文字\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>引用文字\n```\n\n## 图片\n\n```md\n<!-- ![图片alt](图片地址 '图片title') -->\n![图标](src  '随意试试')\n```\n\n![图标](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1544495576&di=d0d30b69693d5cadd72667272c6ebaa0&src=http://img1c.xgo-img.com.cn/pics/1503/1502063.jpg '随意试试')\n\n## 超链接\n\n```md\n<!-- [超链接名](超链接地址 \"超链接title\") -->\n[我的github](https://github.com/hbbaly '我的github')\n```\n\n[我的github](https://github.com/hbbaly '我的github')\n\n## 锚点\n\n```md\n// 顶部html  <h1 id=\"header\">markdown 学习笔记</h1>\n\n<!-- [回到顶部](#readme) -->\n[回到顶部](#header)\n```\n\n[回到顶部](#header)\n\n## 无序列表\n\n```md\n<!-- -+* 都可以 -->\n- 无序列表\n+ 无序列表\n* 无序列表\n```\n- 无序列表\n+ 无序列表\n* 无序列表\n\n## 有序列表\n\n```md\n<!-- 数字加点 序号跟内容之间要有空格 -->\n1.列表内容\n\n2.列表内容\n\n3.列表内容\n```\n\n1.列表内容\n\n2.列表内容\n\n3.列表内容\n\n\n## 列表嵌套\n\n```md\n<!-- 列表嵌套上一级和下一级之间敲三个空格即可 -->\n1.列表内容\n  - 这是嵌套列表\n  + 这是嵌套列表\n```\n\n1.列表内容\n  - 这是嵌套列表\n\n  + 这是嵌套列表\n\n## 表格\n\n```md\n<!--\n  表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n\n第二行分割表头和内容。\n- 有一个就行，为了对齐，多加了几个\n文字默认居左\n-两边加：表示文字居中\n-右边加：表示文字居右\n-->\n```\n\n```md\n|姓名|性别|年龄|\n|---|:--:|---:|\n|否过|请问|WDEF|\n|AFSDF |内WDDEFD容|SDSF内容|\n\n```\n\n|姓名|性别|年龄|\n|---|:--:|---:|\n|否过|请问|WDEF|\n|AFSDF |内WDDEFD容|SDSF内容|\n\n## 代码\n\n```md\n<!-- 单行代码 -->\n`<h1>标题</h1>`\n\n<!-- 多行代码 三个反引号-->\n    ```\n      <div>\n        <p>多行代码</p>\n      </div>\n    ```\n```\n\n`<h1>标题</h1>`\n\n```html\n  <div>\n    <p>多行代码</p>\n  </div>\n```\n\n## 流程图\n\n::: danger\n  推荐使用Xmind画流程图\n:::\n\n\n```mermaid\ngraph TD;\n    id(A)-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n    E-->F;\n    F-->A;\n```\n\ngraph 方向描述\n    图表中的其他语句...\n#### 图表方向\n|用词|含义|\n|---|:--:|\n|TB|从上到下|\n|BT|从下到上|\n|RL|从右到左|\n|LR|从左到右|\n\n#### 节点定义\n\n|表述|说明|\n|---|:--:|\n|id[文字]|矩形节点|\n|id(文字)|圆角矩形节点|\n|id((文字))|圆形节点|\n|id>文字]|右向旗帜状节点|\n|id{文字}|菱形节点|\n\n#### 节点间的连线\n|表述|说明|\n|---|:--:|\n|>|添加尾部箭头|\n|-|不添加尾部箭头|\n|--|单线|\n|--text--|单线上加文字|\n|==|粗线|\n|==text==|粗线加文字|\n|-.-|虚线|\n|-.text.-|虚线加文字|\n\n\n``` mermaid\ngraph TB\n  A==>id(D);\n  id((B))--text-->C;\n  C==text==>id{D};\n  E-.->F\n```\n","slug":"md","published":1,"updated":"2020-12-02T06:49:34.143Z","layout":"post","photos":[],"link":"","_id":"cki71wals004htl9k8l2eq4x9","content":"<h1 id=\"header\">标题</h1>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 一级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\"># TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 二级级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">## TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 三级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 四级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">#### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 五级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">#####  TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 六级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">###### TEST</span></span><br><span class=\"line\"><span class=\"section\">####### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 最多支持六级标题 --&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"横线\"><a href=\"#横线\" class=\"headerlink\" title=\"横线\"></a>横线</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- *** --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- --- --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- ___ --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">___</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 普通文本 --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">这是markdown 测试文本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 单行文本 已一个tab间距或者四个空格开头 --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  这个是单行文本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 加粗字体 --&gt;</span></span></span><br><span class=\"line\"><span class=\"strong\">**加粗字体**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 斜体加粗 --&gt;</span></span></span><br><span class=\"line\"><span class=\"strong\">***斜体加粗**</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 倾斜 --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">*倾斜文字*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 删除线 --&gt;</span></span></span><br><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 在文字前面加上  &gt;</span></span> --&gt;</span><br><span class=\"line\">&gt;引用文字</span><br><span class=\"line\">&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- ![图片alt](图片地址 '图片title') --&gt;</span></span></span><br><span class=\"line\">![<span class=\"string\">图标</span>](<span class=\"link\">src  '随意试试'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1544495576&di=d0d30b69693d5cadd72667272c6ebaa0&src=http://img1c.xgo-img.com.cn/pics/1503/1502063.jpg\" alt=\"图标\" title=\"随意试试\"></p>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- [超链接名](超链接地址 \"超链接title\") --&gt;</span></span></span><br><span class=\"line\">[<span class=\"string\">我的github</span>](<span class=\"link\">https://github.com/hbbaly '我的github'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/hbbaly\" title=\"我的github\" target=\"_blank\" rel=\"noopener\">我的github</a></p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 顶部html  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></span>markdown 学习笔记<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- [回到顶部](#readme) --&gt;</span></span></span><br><span class=\"line\">[<span class=\"string\">回到顶部</span>](<span class=\"link\">#header</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"#header\">回到顶部</a></p>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- -+* 都可以 --&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">- </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">+ </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">* </span>无序列表</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 数字加点 序号跟内容之间要有空格 --&gt;</span></span></span><br><span class=\"line\">1.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">2.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">3.列表内容</span><br></pre></td></tr></table></figure>\n\n<p>1.列表内容</p>\n<p>2.列表内容</p>\n<p>3.列表内容</p>\n<h2 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 列表嵌套上一级和下一级之间敲三个空格即可 --&gt;</span></span></span><br><span class=\"line\">1.列表内容</span><br><span class=\"line\"><span class=\"bullet\">  - </span>这是嵌套列表</span><br><span class=\"line\"><span class=\"bullet\">  + </span>这是嵌套列表</span><br></pre></td></tr></table></figure>\n\n<p>1.列表内容</p>\n<ul>\n<li>这是嵌套列表</li>\n</ul>\n<ul>\n<li>这是嵌套列表</li>\n</ul>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!--</span></span></span><br><span class=\"line\"><span class=\"xml\">  表头|表头|表头</span></span><br><span class=\"line\"><span class=\"xml\">---|:--:|---:</span></span><br><span class=\"line\"><span class=\"xml\">内容|内容|内容</span></span><br><span class=\"line\"><span class=\"xml\">内容|内容|内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">第二行分割表头和内容。</span></span><br><span class=\"line\"><span class=\"xml\">- 有一个就行，为了对齐，多加了几个</span></span><br><span class=\"line\"><span class=\"xml\">文字默认居左</span></span><br><span class=\"line\"><span class=\"xml\">-两边加：表示文字居中</span></span><br><span class=\"line\"><span class=\"xml\">-右边加：表示文字居右</span></span><br><span class=\"line\"><span class=\"xml\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|性别|年龄|</span><br><span class=\"line\">|---|:--:|---:|</span><br><span class=\"line\">|否过|请问|WDEF|</span><br><span class=\"line\">|AFSDF |内WDDEFD容|SDSF内容|</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"right\">年龄</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>否过</td>\n<td align=\"center\">请问</td>\n<td align=\"right\">WDEF</td>\n</tr>\n<tr>\n<td>AFSDF</td>\n<td align=\"center\">内WDDEFD容</td>\n<td align=\"right\">SDSF内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 单行代码 --&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">`&lt;h1&gt;标题&lt;/h1&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 多行代码 三个反引号--&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<pre><code>  &lt;div&gt;\n    &lt;p&gt;多行代码&lt;/p&gt;\n  &lt;/div&gt;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">`&lt;h1&gt;标题&lt;/h1&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;多行代码&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p>::: danger<br>  推荐使用Xmind画流程图<br>:::</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    id(A)--&gt;B;</span><br><span class=\"line\">    A--&gt;C;</span><br><span class=\"line\">    B--&gt;D;</span><br><span class=\"line\">    C--&gt;D;</span><br><span class=\"line\">    E--&gt;F;</span><br><span class=\"line\">    F--&gt;A;</span><br></pre></td></tr></table></figure>\n\n<p>graph 方向描述<br>    图表中的其他语句…</p>\n<h4 id=\"图表方向\"><a href=\"#图表方向\" class=\"headerlink\" title=\"图表方向\"></a>图表方向</h4><table>\n<thead>\n<tr>\n<th>用词</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TB</td>\n<td align=\"center\">从上到下</td>\n</tr>\n<tr>\n<td>BT</td>\n<td align=\"center\">从下到上</td>\n</tr>\n<tr>\n<td>RL</td>\n<td align=\"center\">从右到左</td>\n</tr>\n<tr>\n<td>LR</td>\n<td align=\"center\">从左到右</td>\n</tr>\n</tbody></table>\n<h4 id=\"节点定义\"><a href=\"#节点定义\" class=\"headerlink\" title=\"节点定义\"></a>节点定义</h4><table>\n<thead>\n<tr>\n<th>表述</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id[文字]</td>\n<td align=\"center\">矩形节点</td>\n</tr>\n<tr>\n<td>id(文字)</td>\n<td align=\"center\">圆角矩形节点</td>\n</tr>\n<tr>\n<td>id((文字))</td>\n<td align=\"center\">圆形节点</td>\n</tr>\n<tr>\n<td>id&gt;文字]</td>\n<td align=\"center\">右向旗帜状节点</td>\n</tr>\n<tr>\n<td>id{文字}</td>\n<td align=\"center\">菱形节点</td>\n</tr>\n</tbody></table>\n<h4 id=\"节点间的连线\"><a href=\"#节点间的连线\" class=\"headerlink\" title=\"节点间的连线\"></a>节点间的连线</h4><table>\n<thead>\n<tr>\n<th>表述</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td align=\"center\">添加尾部箭头</td>\n</tr>\n<tr>\n<td>-</td>\n<td align=\"center\">不添加尾部箭头</td>\n</tr>\n<tr>\n<td>–</td>\n<td align=\"center\">单线</td>\n</tr>\n<tr>\n<td>–text–</td>\n<td align=\"center\">单线上加文字</td>\n</tr>\n<tr>\n<td>==</td>\n<td align=\"center\">粗线</td>\n</tr>\n<tr>\n<td>==text==</td>\n<td align=\"center\">粗线加文字</td>\n</tr>\n<tr>\n<td>-.-</td>\n<td align=\"center\">虚线</td>\n</tr>\n<tr>\n<td>-.text.-</td>\n<td align=\"center\">虚线加文字</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A==&gt;id(D);</span><br><span class=\"line\">  id((B))--text--&gt;C;</span><br><span class=\"line\">  C==text==&gt;id&#123;D&#125;;</span><br><span class=\"line\">  E-.-&gt;F</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"header\">标题</h1>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 一级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\"># TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 二级级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">## TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 三级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 四级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">#### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 五级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">#####  TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 六级标题 --&gt;</span></span></span><br><span class=\"line\"><span class=\"section\">###### TEST</span></span><br><span class=\"line\"><span class=\"section\">####### TEST</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 最多支持六级标题 --&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"横线\"><a href=\"#横线\" class=\"headerlink\" title=\"横线\"></a>横线</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- *** --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- --- --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- ___ --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">___</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 普通文本 --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">这是markdown 测试文本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 单行文本 已一个tab间距或者四个空格开头 --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  这个是单行文本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 加粗字体 --&gt;</span></span></span><br><span class=\"line\"><span class=\"strong\">**加粗字体**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 斜体加粗 --&gt;</span></span></span><br><span class=\"line\"><span class=\"strong\">***斜体加粗**</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 倾斜 --&gt;</span></span></span><br><span class=\"line\"><span class=\"emphasis\">*倾斜文字*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 删除线 --&gt;</span></span></span><br><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 在文字前面加上  &gt;</span></span> --&gt;</span><br><span class=\"line\">&gt;引用文字</span><br><span class=\"line\">&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用文字</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- ![图片alt](图片地址 '图片title') --&gt;</span></span></span><br><span class=\"line\">![<span class=\"string\">图标</span>](<span class=\"link\">src  '随意试试'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1544495576&di=d0d30b69693d5cadd72667272c6ebaa0&src=http://img1c.xgo-img.com.cn/pics/1503/1502063.jpg\" alt=\"图标\" title=\"随意试试\"></p>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- [超链接名](超链接地址 \"超链接title\") --&gt;</span></span></span><br><span class=\"line\">[<span class=\"string\">我的github</span>](<span class=\"link\">https://github.com/hbbaly '我的github'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/hbbaly\" title=\"我的github\" target=\"_blank\" rel=\"noopener\">我的github</a></p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 顶部html  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></span>markdown 学习笔记<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- [回到顶部](#readme) --&gt;</span></span></span><br><span class=\"line\">[<span class=\"string\">回到顶部</span>](<span class=\"link\">#header</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"#header\">回到顶部</a></p>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- -+* 都可以 --&gt;</span></span></span><br><span class=\"line\"><span class=\"bullet\">- </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">+ </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">* </span>无序列表</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 数字加点 序号跟内容之间要有空格 --&gt;</span></span></span><br><span class=\"line\">1.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">2.列表内容</span><br><span class=\"line\"></span><br><span class=\"line\">3.列表内容</span><br></pre></td></tr></table></figure>\n\n<p>1.列表内容</p>\n<p>2.列表内容</p>\n<p>3.列表内容</p>\n<h2 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 列表嵌套上一级和下一级之间敲三个空格即可 --&gt;</span></span></span><br><span class=\"line\">1.列表内容</span><br><span class=\"line\"><span class=\"bullet\">  - </span>这是嵌套列表</span><br><span class=\"line\"><span class=\"bullet\">  + </span>这是嵌套列表</span><br></pre></td></tr></table></figure>\n\n<p>1.列表内容</p>\n<ul>\n<li>这是嵌套列表</li>\n</ul>\n<ul>\n<li>这是嵌套列表</li>\n</ul>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!--</span></span></span><br><span class=\"line\"><span class=\"xml\">  表头|表头|表头</span></span><br><span class=\"line\"><span class=\"xml\">---|:--:|---:</span></span><br><span class=\"line\"><span class=\"xml\">内容|内容|内容</span></span><br><span class=\"line\"><span class=\"xml\">内容|内容|内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\">第二行分割表头和内容。</span></span><br><span class=\"line\"><span class=\"xml\">- 有一个就行，为了对齐，多加了几个</span></span><br><span class=\"line\"><span class=\"xml\">文字默认居左</span></span><br><span class=\"line\"><span class=\"xml\">-两边加：表示文字居中</span></span><br><span class=\"line\"><span class=\"xml\">-右边加：表示文字居右</span></span><br><span class=\"line\"><span class=\"xml\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|性别|年龄|</span><br><span class=\"line\">|---|:--:|---:|</span><br><span class=\"line\">|否过|请问|WDEF|</span><br><span class=\"line\">|AFSDF |内WDDEFD容|SDSF内容|</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"right\">年龄</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>否过</td>\n<td align=\"center\">请问</td>\n<td align=\"right\">WDEF</td>\n</tr>\n<tr>\n<td>AFSDF</td>\n<td align=\"center\">内WDDEFD容</td>\n<td align=\"right\">SDSF内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 单行代码 --&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">`&lt;h1&gt;标题&lt;/h1&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 多行代码 三个反引号--&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<pre><code>  &lt;div&gt;\n    &lt;p&gt;多行代码&lt;/p&gt;\n  &lt;/div&gt;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">`&lt;h1&gt;标题&lt;/h1&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;多行代码&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p>::: danger<br>  推荐使用Xmind画流程图<br>:::</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    id(A)--&gt;B;</span><br><span class=\"line\">    A--&gt;C;</span><br><span class=\"line\">    B--&gt;D;</span><br><span class=\"line\">    C--&gt;D;</span><br><span class=\"line\">    E--&gt;F;</span><br><span class=\"line\">    F--&gt;A;</span><br></pre></td></tr></table></figure>\n\n<p>graph 方向描述<br>    图表中的其他语句…</p>\n<h4 id=\"图表方向\"><a href=\"#图表方向\" class=\"headerlink\" title=\"图表方向\"></a>图表方向</h4><table>\n<thead>\n<tr>\n<th>用词</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TB</td>\n<td align=\"center\">从上到下</td>\n</tr>\n<tr>\n<td>BT</td>\n<td align=\"center\">从下到上</td>\n</tr>\n<tr>\n<td>RL</td>\n<td align=\"center\">从右到左</td>\n</tr>\n<tr>\n<td>LR</td>\n<td align=\"center\">从左到右</td>\n</tr>\n</tbody></table>\n<h4 id=\"节点定义\"><a href=\"#节点定义\" class=\"headerlink\" title=\"节点定义\"></a>节点定义</h4><table>\n<thead>\n<tr>\n<th>表述</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id[文字]</td>\n<td align=\"center\">矩形节点</td>\n</tr>\n<tr>\n<td>id(文字)</td>\n<td align=\"center\">圆角矩形节点</td>\n</tr>\n<tr>\n<td>id((文字))</td>\n<td align=\"center\">圆形节点</td>\n</tr>\n<tr>\n<td>id&gt;文字]</td>\n<td align=\"center\">右向旗帜状节点</td>\n</tr>\n<tr>\n<td>id{文字}</td>\n<td align=\"center\">菱形节点</td>\n</tr>\n</tbody></table>\n<h4 id=\"节点间的连线\"><a href=\"#节点间的连线\" class=\"headerlink\" title=\"节点间的连线\"></a>节点间的连线</h4><table>\n<thead>\n<tr>\n<th>表述</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td align=\"center\">添加尾部箭头</td>\n</tr>\n<tr>\n<td>-</td>\n<td align=\"center\">不添加尾部箭头</td>\n</tr>\n<tr>\n<td>–</td>\n<td align=\"center\">单线</td>\n</tr>\n<tr>\n<td>–text–</td>\n<td align=\"center\">单线上加文字</td>\n</tr>\n<tr>\n<td>==</td>\n<td align=\"center\">粗线</td>\n</tr>\n<tr>\n<td>==text==</td>\n<td align=\"center\">粗线加文字</td>\n</tr>\n<tr>\n<td>-.-</td>\n<td align=\"center\">虚线</td>\n</tr>\n<tr>\n<td>-.text.-</td>\n<td align=\"center\">虚线加文字</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A==&gt;id(D);</span><br><span class=\"line\">  id((B))--text--&gt;C;</span><br><span class=\"line\">  C==text==&gt;id&#123;D&#125;;</span><br><span class=\"line\">  E-.-&gt;F</span><br></pre></td></tr></table></figure>\n\n"},{"title":"moment基本用法","comments":1,"description":"moment基本用法","date":"2016-12-20T01:29:10.000Z","keywords":"moment基本用法","_content":"\n\n## 安装\n\n```sh\nnpm install moment\n```\n\n## 设定moment区域为中国\n\n```js\nmoment.locale('zh-cn'); \n```\n\n## 格式化时间类型\n\n1.取当天时间，以`YYYY`年`MM`月`DD`日形式显示\n\n```js\nmoment().format(\"YYYY年MM月DD日\");\n```\n\n2.任意时间戳格式化，以`YYYY-MM-DD HH:mm:ss`形式显示\n\n```js\nmoment(1411641720000).format('YYYY-MM-DD HH:mm:ss');\n```\n\n3.获取前一天日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nmoment().day(0).format('YYYY-MM-DD');\n```\n4.获取本周五日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nmoment().weekday(5).format('YYYY-MM-DD');\n```\n\n5.获取上周五日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nvar t13=moment().weekday(-3).format('YYYY-MM-DD');\n```\n\n可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n6.获取当前年份、月份、日期\n\n```js\nmoment().year()\nmoment().month()//此处月份从0开始，当前月要+1\nmoment().date();\n```\n\n注意这个地方，日期不是.day()/days()\n\n7. 获取上个月今天的日期，格式以`YYYY-MM-DD`显示\n\n```js\nmoment().subtract(1, 'months').format('YYYY-MM-DD');\n```\n\n8.获取上个月日期，格式以`YYYY-MM`显示\n\n```js\nmoment().subtract(1, 'months').format('YYYY-MM')\n```\n\n9.获取前一天日期，格式以`YYYY-MM-DD`显示\n\n```js\nvar t20 = moment().subtract(1, 'days').format('YYYY-MM-DD');\n```\n\n10.获取去年今天的日期，格式以`YYYY-MM-DD`显示，即简便的获取去年今天日期的方法\n\n```js\nmoment().subtract(1, 'year').format('YYYY-MM-DD');\n```\n\n11.获取两个小时之后的时间\n\n```js\nmoment().add(2,'hours').format('YYYY-MM-DD HH:mm:ss');\n```\n\n12.获取五天前的日期\n\n```js\nmoment().subtract(5, 'days').format('YYYY-MM-DD');\n```\n\n13.7天后的日期\n\n```js\nmoment().add('days',7).format('YYYY年MM月DD日')\n```\n\n14.时间戳\n\n```js\n// moment().valueOf()\nmoment().format('X')\n```\n\n15.今天是星期几\n\n```js\nmoment().format('d')\n```\n\n[参考资料-moment](http://momentjs.cn/docs/#/use-it/)","source":"_posts/moment.md","raw":"---\ntitle: moment基本用法\ncomments: true\ndescription: moment基本用法\ntags: \"js\"\ndate: 2016-12-20 09:29:10\ncategories: \"js\"\nkeywords: moment基本用法\n---\n\n\n## 安装\n\n```sh\nnpm install moment\n```\n\n## 设定moment区域为中国\n\n```js\nmoment.locale('zh-cn'); \n```\n\n## 格式化时间类型\n\n1.取当天时间，以`YYYY`年`MM`月`DD`日形式显示\n\n```js\nmoment().format(\"YYYY年MM月DD日\");\n```\n\n2.任意时间戳格式化，以`YYYY-MM-DD HH:mm:ss`形式显示\n\n```js\nmoment(1411641720000).format('YYYY-MM-DD HH:mm:ss');\n```\n\n3.获取前一天日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nmoment().day(0).format('YYYY-MM-DD');\n```\n4.获取本周五日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nmoment().weekday(5).format('YYYY-MM-DD');\n```\n\n5.获取上周五日期，格式以`YYYY-MM-DD`形式显示\n\n```js\nvar t13=moment().weekday(-3).format('YYYY-MM-DD');\n```\n\n可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n6.获取当前年份、月份、日期\n\n```js\nmoment().year()\nmoment().month()//此处月份从0开始，当前月要+1\nmoment().date();\n```\n\n注意这个地方，日期不是.day()/days()\n\n7. 获取上个月今天的日期，格式以`YYYY-MM-DD`显示\n\n```js\nmoment().subtract(1, 'months').format('YYYY-MM-DD');\n```\n\n8.获取上个月日期，格式以`YYYY-MM`显示\n\n```js\nmoment().subtract(1, 'months').format('YYYY-MM')\n```\n\n9.获取前一天日期，格式以`YYYY-MM-DD`显示\n\n```js\nvar t20 = moment().subtract(1, 'days').format('YYYY-MM-DD');\n```\n\n10.获取去年今天的日期，格式以`YYYY-MM-DD`显示，即简便的获取去年今天日期的方法\n\n```js\nmoment().subtract(1, 'year').format('YYYY-MM-DD');\n```\n\n11.获取两个小时之后的时间\n\n```js\nmoment().add(2,'hours').format('YYYY-MM-DD HH:mm:ss');\n```\n\n12.获取五天前的日期\n\n```js\nmoment().subtract(5, 'days').format('YYYY-MM-DD');\n```\n\n13.7天后的日期\n\n```js\nmoment().add('days',7).format('YYYY年MM月DD日')\n```\n\n14.时间戳\n\n```js\n// moment().valueOf()\nmoment().format('X')\n```\n\n15.今天是星期几\n\n```js\nmoment().format('d')\n```\n\n[参考资料-moment](http://momentjs.cn/docs/#/use-it/)","slug":"moment","published":1,"updated":"2020-12-02T06:49:34.143Z","layout":"post","photos":[],"link":"","_id":"cki71walt004ktl9krusyedo0","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install moment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设定moment区域为中国\"><a href=\"#设定moment区域为中国\" class=\"headerlink\" title=\"设定moment区域为中国\"></a>设定moment区域为中国</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment.locale(<span class=\"string\">'zh-cn'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化时间类型\"><a href=\"#格式化时间类型\" class=\"headerlink\" title=\"格式化时间类型\"></a>格式化时间类型</h2><p>1.取当天时间，以<code>YYYY</code>年<code>MM</code>月<code>DD</code>日形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">\"YYYY年MM月DD日\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.任意时间戳格式化，以<code>YYYY-MM-DD HH:mm:ss</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment(<span class=\"number\">1411641720000</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3.获取前一天日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().day(<span class=\"number\">0</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>4.获取本周五日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().weekday(<span class=\"number\">5</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5.获取上周五日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t13=moment().weekday(<span class=\"number\">-3</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关</p>\n<p>6.获取当前年份、月份、日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().year()</span><br><span class=\"line\">moment().month()<span class=\"comment\">//此处月份从0开始，当前月要+1</span></span><br><span class=\"line\">moment().date();</span><br></pre></td></tr></table></figure>\n\n<p>注意这个地方，日期不是.day()/days()</p>\n<ol start=\"7\">\n<li>获取上个月今天的日期，格式以<code>YYYY-MM-DD</code>显示</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>8.获取上个月日期，格式以<code>YYYY-MM</code>显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>).format(<span class=\"string\">'YYYY-MM'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>9.获取前一天日期，格式以<code>YYYY-MM-DD</code>显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t20 = moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>10.获取去年今天的日期，格式以<code>YYYY-MM-DD</code>显示，即简便的获取去年今天日期的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'year'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>11.获取两个小时之后的时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().add(<span class=\"number\">2</span>,<span class=\"string\">'hours'</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>12.获取五天前的日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">5</span>, <span class=\"string\">'days'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>13.7天后的日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().add(<span class=\"string\">'days'</span>,<span class=\"number\">7</span>).format(<span class=\"string\">'YYYY年MM月DD日'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>14.时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moment().valueOf()</span></span><br><span class=\"line\">moment().format(<span class=\"string\">'X'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>15.今天是星期几</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">'d'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://momentjs.cn/docs/#/use-it/\" target=\"_blank\" rel=\"noopener\">参考资料-moment</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install moment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设定moment区域为中国\"><a href=\"#设定moment区域为中国\" class=\"headerlink\" title=\"设定moment区域为中国\"></a>设定moment区域为中国</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment.locale(<span class=\"string\">'zh-cn'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"格式化时间类型\"><a href=\"#格式化时间类型\" class=\"headerlink\" title=\"格式化时间类型\"></a>格式化时间类型</h2><p>1.取当天时间，以<code>YYYY</code>年<code>MM</code>月<code>DD</code>日形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">\"YYYY年MM月DD日\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.任意时间戳格式化，以<code>YYYY-MM-DD HH:mm:ss</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment(<span class=\"number\">1411641720000</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3.获取前一天日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().day(<span class=\"number\">0</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>4.获取本周五日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().weekday(<span class=\"number\">5</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>5.获取上周五日期，格式以<code>YYYY-MM-DD</code>形式显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t13=moment().weekday(<span class=\"number\">-3</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关</p>\n<p>6.获取当前年份、月份、日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().year()</span><br><span class=\"line\">moment().month()<span class=\"comment\">//此处月份从0开始，当前月要+1</span></span><br><span class=\"line\">moment().date();</span><br></pre></td></tr></table></figure>\n\n<p>注意这个地方，日期不是.day()/days()</p>\n<ol start=\"7\">\n<li>获取上个月今天的日期，格式以<code>YYYY-MM-DD</code>显示</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>8.获取上个月日期，格式以<code>YYYY-MM</code>显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'months'</span>).format(<span class=\"string\">'YYYY-MM'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>9.获取前一天日期，格式以<code>YYYY-MM-DD</code>显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t20 = moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>10.获取去年今天的日期，格式以<code>YYYY-MM-DD</code>显示，即简便的获取去年今天日期的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'year'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>11.获取两个小时之后的时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().add(<span class=\"number\">2</span>,<span class=\"string\">'hours'</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>12.获取五天前的日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().subtract(<span class=\"number\">5</span>, <span class=\"string\">'days'</span>).format(<span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>13.7天后的日期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().add(<span class=\"string\">'days'</span>,<span class=\"number\">7</span>).format(<span class=\"string\">'YYYY年MM月DD日'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>14.时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moment().valueOf()</span></span><br><span class=\"line\">moment().format(<span class=\"string\">'X'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>15.今天是星期几</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">'d'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://momentjs.cn/docs/#/use-it/\" target=\"_blank\" rel=\"noopener\">参考资料-moment</a></p>\n"},{"title":"react hook函数","comments":1,"description":"react hook函数","date":"2019-06-20T01:29:10.000Z","keywords":"react hook函数","_content":"\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\nHook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。\n\n- 完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。\n- 100% 向后兼容的。 Hook 不包含任何破坏性改动。\n- 现在可用。 Hook 已发布于 v16.8.0。\n\n## useState\n\n`const [state, setState] = useState(initialState)`; state为变量，setState 修改 state值的方法， setState也是异步执行。\n\n```js\nimport React, { useState } from 'react';\n\nfunction Hook1() {\n  // 声明一个新的叫做 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n## useEffect\n\n忘记生命周期，记住副作用\n\n```jsx\nuseEffect(()  =>  {// Async Action}, ?[dependencies]); // 第二参数非必填\n```\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nfunction Hook2() {\n  const [data, setData] = useState();\n  useEffect(() => {\n    console.log(\"hbb1\");\n  }, [data]);\n  useEffect(() => {\n    console.log(\"hbb2\");\n    axios\n      .get(\"https://www.mxnzp.com/api//music/singer/search?keyWord=周杰伦\")\n      .then(res => {\n        setData(res);\n      });\n  });\n  useEffect(() => {\n    console.log(\"hbb3\");\n  });\n  useEffect(() => {\n    let timer = setInterval(() => {\n      console.log(\"interval\");\n    }, 2000);\n    return () => {\n      console.log(\"clear\");\n      clearInterval(timer);\n    };\n  });\n  return (\n    <div>\n      {(() => {\n        console.log(\"render\");\n        return null;\n      })()}\n      <p> {JSON.stringify(data)}</p>\n    </div>\n  );\n}\nexport default Hook2;\n```\n\n- effect在render后按照前后顺序执行。\n- effect在没有任何依赖的情况下，render后每次都按照顺序执行。\n- effect内部执行是异步的。\n- 依赖[]可以实现类似componentDidMount的作用，但最好忘记生命周期， 只记副作用。\n- effect的回调函数返回一个匿名函数，相当于componentUnMount的钩子函数，一般是remove eventLisenter， clear timeId等，主要是组件卸载后防止内存泄漏。\n\n## useContext\n\n跨组件共享数据的钩子函数\n\n```jsx\nconst value = useContext(MyContext);\n// MyContext 为 context 对象（React.createContext 的返回值） \n// useContext 返回MyContext的返回值。\n// 当前的 context 值由上层组件中距离当前组件最近的<MyContext.Provider> 的 value prop 决定。\n\n```\n\n```jsx\nimport React, { useState, useContext, useEffect } from \"react\";\nimport Child from \"./child\";\nconst myContext = React.createContext();\nfunction Child1() {\n  const value = useContext(myContext);\n  console.log(\"Child1-value\", value);\n  return <div>Child1-value: {value}</div>;\n}\nfunction Child2() {\n  console.log(\"没有改变值\");\n  return <p>没有改变值</p>;\n}\nconst Child3 = React.memo(() => {\n  console.log(\"memo val\");\n});\nexport default function Hook3() {\n  const [val, setVal] = useState(\"init\");\n  return (\n    <div>\n      <p>{val}</p>\n      <button onClick={() => setVal(`${val}${new Date()}`)}> change</button>\n      <myContext.Provider value={val}>\n        <Child props={{ myContext }} />\n        <Child1 />\n        <Child2 />\n        <Child3 />\n      </myContext.Provider>\n    </div>\n  );\n}\n```\n\n`Child.js`\n\n```jsx\nimport React, { useContext } from \"react\";\nfunction Child(props) {\n  const context = props.props;\n  console.log(context, \"========\");\n\n  const value = useContext(context.myContext);\n  console.log(\"Child-value\", value);\n  return <div>Child1-value: {value}</div>;\n}\nexport default Child;\n```\n\n**结论：**\n\n\n- useContext 的组件总会在 context 值变化时重新渲染， 所以<MyContext.Provider>包裹的越多，层级越深，性能会造成影响。\n\n\n- <MyContext.Provider> 的 value 发生变化时候， 包裹的组件无论是否订阅content value，所有组件都会从新渲染。\n\n\n- child2 不应该rerender, 如何避免不必要的render？*\n使用`React.memo`优化。\n\n```jsx\nconst Child3 = React.memo(() => {\n  console.log(\"memo val\");\n});\n```\n这样 `Child3`避免了每次render\n\n## useRef\n\n```jsx\nconst refContainer = useRef(initialValue);\n```\n\n```jsx\nimport React, {useRef} from 'react'\nexport default function Hook4() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` 指向已挂载到 DOM 上的文本输入元素\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n- ref 这一种访问 DOM 的主要方式。如果你将 ref 对象以 <div ref={myRef} /> 形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的 .current 属性设置为相应的 DOM 节点。\n\n- useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式。这是因为它创建的是一个普通 Javascript 对象。而 useRef() 和自建一个 {current: ...} 对象的唯一区别是，`useRef 会在每次渲染时返回同一个 ref 对象`。\n\n- 当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。\n\n## useReducer\n\n```jsx\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\nreducer就是一个只能通过action将state从一个过程转换成另一个过程的纯函数;\nuseReducer就是一种通过(state,action) => newState的过程，和redux工作方式一样。数据流： dispatch(action) => reducer更新state => 返回更新后的state\n\n\n```jsx\nimport React, { useReducer } from \"react\";\nexport default function Hook4() {\n  const initVal = { count: 0 };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return { count: state.count + 1 };\n      case \"decrement\":\n        return { count: state.count - 1 };\n      default:\n        throw new Error();\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initVal);\n  return (\n    <div>\n      <p>{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </div>\n  );\n}\n```\n\n## useReducer, useContext来模拟redux\n\nuseContext 和 useReducer模拟redux管理状态\n\n```jsx\nimport React, { useReducer, useContext } from \"react\";\nconst MyContext = React.createContext();\nfunction Child() {\n  const { count, dispatch } = useContext(MyContext);\n  return (\n    <div>\n      <div>'count改变了' {count}</div>\n      <button onClick={() => dispatch({ type: \"increment\" })}> + </button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}> - </button>\n    </div>\n  );\n}\nexport default function Hook5() {\n  const initVal = { count: 0 };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return { count: state.count + 1 };\n      case \"decrement\":\n        return { count: state.count - 1 };\n      default:\n        throw new Error();\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initVal);\n\n  return (\n    <div>\n      <MyContext.Provider value={{ count: state.count, dispatch }}>\n        <Child />\n      </MyContext.Provider>\n    </div>\n  );\n}\n\n```\n\n## useCallback\n\n```jsx\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n\n把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。\n\n```jsx\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Axios from \"axios\";\nfunction Child({ event, data }) {\n  useEffect(() => {\n    console.log(\"hbb\");\n    event();\n  }, [event]);\n  return (\n    <div>\n      <p>child</p>\n      <p>{JSON.stringify(data)}</p>\n      <button onClick={event}>跳用父级函数</button>\n    </div>\n  );\n}\nexport default function Hook6() {\n  const [num, setNum] = useState(0);\n  const [data, setData] = useState({});\n  const handle = useCallback(async () => {\n    console.log(\"==========\");\n    let res = await Axios.get(\n      \"https://www.mxnzp.com/api/lottery/common/latest?code=ssq\"\n    );\n    setData(res);\n  }, [num]);\n  return (\n    <div>\n      <p> you have clicked {num} times</p>\n      <button onClick={() => setNum(num + 1)}>click me</button>\n      <Child event={handle} data={data} />\n    </div>\n  );\n}\n\n```\n\n每当count变化时，传入子组件的函数都是最新的，所以导致child的useEffect执行。\n\n## useMemo\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。\n\n记住，传入 useMemo 的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo。\n\n如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。\n\n你可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证。将来，React 可能会选择“遗忘”以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有 useMemo 的情况下也可以执行的代码 —— 之后再在你的代码中添加 useMemo，以达到优化性能的目的。\n\n**`useCallback` 不会执行第一个参数函数，而是将它返回给你，而 `useMemo` 会执行第一个函数并且将函数执行结果返回给你**。\n[源码参考](https://codesandbox.io/s/crazy-northcutt-b10oq)\n","source":"_posts/react-1.md","raw":"---\ntitle: react hook函数\ncomments: true\ndescription: react hook函数\ntags: \"REACT\"\ndate: 2019-6-20 09:29:10\ncategories: \"react\"\nkeywords: react hook函数\n---\n\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\nHook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。\n\n- 完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。\n- 100% 向后兼容的。 Hook 不包含任何破坏性改动。\n- 现在可用。 Hook 已发布于 v16.8.0。\n\n## useState\n\n`const [state, setState] = useState(initialState)`; state为变量，setState 修改 state值的方法， setState也是异步执行。\n\n```js\nimport React, { useState } from 'react';\n\nfunction Hook1() {\n  // 声明一个新的叫做 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n## useEffect\n\n忘记生命周期，记住副作用\n\n```jsx\nuseEffect(()  =>  {// Async Action}, ?[dependencies]); // 第二参数非必填\n```\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nfunction Hook2() {\n  const [data, setData] = useState();\n  useEffect(() => {\n    console.log(\"hbb1\");\n  }, [data]);\n  useEffect(() => {\n    console.log(\"hbb2\");\n    axios\n      .get(\"https://www.mxnzp.com/api//music/singer/search?keyWord=周杰伦\")\n      .then(res => {\n        setData(res);\n      });\n  });\n  useEffect(() => {\n    console.log(\"hbb3\");\n  });\n  useEffect(() => {\n    let timer = setInterval(() => {\n      console.log(\"interval\");\n    }, 2000);\n    return () => {\n      console.log(\"clear\");\n      clearInterval(timer);\n    };\n  });\n  return (\n    <div>\n      {(() => {\n        console.log(\"render\");\n        return null;\n      })()}\n      <p> {JSON.stringify(data)}</p>\n    </div>\n  );\n}\nexport default Hook2;\n```\n\n- effect在render后按照前后顺序执行。\n- effect在没有任何依赖的情况下，render后每次都按照顺序执行。\n- effect内部执行是异步的。\n- 依赖[]可以实现类似componentDidMount的作用，但最好忘记生命周期， 只记副作用。\n- effect的回调函数返回一个匿名函数，相当于componentUnMount的钩子函数，一般是remove eventLisenter， clear timeId等，主要是组件卸载后防止内存泄漏。\n\n## useContext\n\n跨组件共享数据的钩子函数\n\n```jsx\nconst value = useContext(MyContext);\n// MyContext 为 context 对象（React.createContext 的返回值） \n// useContext 返回MyContext的返回值。\n// 当前的 context 值由上层组件中距离当前组件最近的<MyContext.Provider> 的 value prop 决定。\n\n```\n\n```jsx\nimport React, { useState, useContext, useEffect } from \"react\";\nimport Child from \"./child\";\nconst myContext = React.createContext();\nfunction Child1() {\n  const value = useContext(myContext);\n  console.log(\"Child1-value\", value);\n  return <div>Child1-value: {value}</div>;\n}\nfunction Child2() {\n  console.log(\"没有改变值\");\n  return <p>没有改变值</p>;\n}\nconst Child3 = React.memo(() => {\n  console.log(\"memo val\");\n});\nexport default function Hook3() {\n  const [val, setVal] = useState(\"init\");\n  return (\n    <div>\n      <p>{val}</p>\n      <button onClick={() => setVal(`${val}${new Date()}`)}> change</button>\n      <myContext.Provider value={val}>\n        <Child props={{ myContext }} />\n        <Child1 />\n        <Child2 />\n        <Child3 />\n      </myContext.Provider>\n    </div>\n  );\n}\n```\n\n`Child.js`\n\n```jsx\nimport React, { useContext } from \"react\";\nfunction Child(props) {\n  const context = props.props;\n  console.log(context, \"========\");\n\n  const value = useContext(context.myContext);\n  console.log(\"Child-value\", value);\n  return <div>Child1-value: {value}</div>;\n}\nexport default Child;\n```\n\n**结论：**\n\n\n- useContext 的组件总会在 context 值变化时重新渲染， 所以<MyContext.Provider>包裹的越多，层级越深，性能会造成影响。\n\n\n- <MyContext.Provider> 的 value 发生变化时候， 包裹的组件无论是否订阅content value，所有组件都会从新渲染。\n\n\n- child2 不应该rerender, 如何避免不必要的render？*\n使用`React.memo`优化。\n\n```jsx\nconst Child3 = React.memo(() => {\n  console.log(\"memo val\");\n});\n```\n这样 `Child3`避免了每次render\n\n## useRef\n\n```jsx\nconst refContainer = useRef(initialValue);\n```\n\n```jsx\nimport React, {useRef} from 'react'\nexport default function Hook4() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` 指向已挂载到 DOM 上的文本输入元素\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n- ref 这一种访问 DOM 的主要方式。如果你将 ref 对象以 <div ref={myRef} /> 形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的 .current 属性设置为相应的 DOM 节点。\n\n- useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式。这是因为它创建的是一个普通 Javascript 对象。而 useRef() 和自建一个 {current: ...} 对象的唯一区别是，`useRef 会在每次渲染时返回同一个 ref 对象`。\n\n- 当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。\n\n## useReducer\n\n```jsx\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\nreducer就是一个只能通过action将state从一个过程转换成另一个过程的纯函数;\nuseReducer就是一种通过(state,action) => newState的过程，和redux工作方式一样。数据流： dispatch(action) => reducer更新state => 返回更新后的state\n\n\n```jsx\nimport React, { useReducer } from \"react\";\nexport default function Hook4() {\n  const initVal = { count: 0 };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return { count: state.count + 1 };\n      case \"decrement\":\n        return { count: state.count - 1 };\n      default:\n        throw new Error();\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initVal);\n  return (\n    <div>\n      <p>{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </div>\n  );\n}\n```\n\n## useReducer, useContext来模拟redux\n\nuseContext 和 useReducer模拟redux管理状态\n\n```jsx\nimport React, { useReducer, useContext } from \"react\";\nconst MyContext = React.createContext();\nfunction Child() {\n  const { count, dispatch } = useContext(MyContext);\n  return (\n    <div>\n      <div>'count改变了' {count}</div>\n      <button onClick={() => dispatch({ type: \"increment\" })}> + </button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}> - </button>\n    </div>\n  );\n}\nexport default function Hook5() {\n  const initVal = { count: 0 };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return { count: state.count + 1 };\n      case \"decrement\":\n        return { count: state.count - 1 };\n      default:\n        throw new Error();\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initVal);\n\n  return (\n    <div>\n      <MyContext.Provider value={{ count: state.count, dispatch }}>\n        <Child />\n      </MyContext.Provider>\n    </div>\n  );\n}\n\n```\n\n## useCallback\n\n```jsx\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n\n把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。\n\n```jsx\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Axios from \"axios\";\nfunction Child({ event, data }) {\n  useEffect(() => {\n    console.log(\"hbb\");\n    event();\n  }, [event]);\n  return (\n    <div>\n      <p>child</p>\n      <p>{JSON.stringify(data)}</p>\n      <button onClick={event}>跳用父级函数</button>\n    </div>\n  );\n}\nexport default function Hook6() {\n  const [num, setNum] = useState(0);\n  const [data, setData] = useState({});\n  const handle = useCallback(async () => {\n    console.log(\"==========\");\n    let res = await Axios.get(\n      \"https://www.mxnzp.com/api/lottery/common/latest?code=ssq\"\n    );\n    setData(res);\n  }, [num]);\n  return (\n    <div>\n      <p> you have clicked {num} times</p>\n      <button onClick={() => setNum(num + 1)}>click me</button>\n      <Child event={handle} data={data} />\n    </div>\n  );\n}\n\n```\n\n每当count变化时，传入子组件的函数都是最新的，所以导致child的useEffect执行。\n\n## useMemo\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。\n\n记住，传入 useMemo 的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo。\n\n如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。\n\n你可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证。将来，React 可能会选择“遗忘”以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有 useMemo 的情况下也可以执行的代码 —— 之后再在你的代码中添加 useMemo，以达到优化性能的目的。\n\n**`useCallback` 不会执行第一个参数函数，而是将它返回给你，而 `useMemo` 会执行第一个函数并且将函数执行结果返回给你**。\n[源码参考](https://codesandbox.io/s/crazy-northcutt-b10oq)\n","slug":"react-1","published":1,"updated":"2020-12-02T06:49:34.144Z","layout":"post","photos":[],"link":"","_id":"cki71walu004ptl9k9ry9wemu","content":"<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>Hook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。</p>\n<ul>\n<li>完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。</li>\n<li>100% 向后兼容的。 Hook 不包含任何破坏性改动。</li>\n<li>现在可用。 Hook 已发布于 v16.8.0。</li>\n</ul>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p><code>const [state, setState] = useState(initialState)</code>; state为变量，setState 修改 state值的方法， setState也是异步执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明一个新的叫做 “count” 的 state 变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        Click me</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>忘记生命周期，记住副作用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span>  =&gt;</span>  &#123;<span class=\"comment\">// Async Action&#125;, ?[dependencies]); // 第二参数非必填</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState();</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb1\"</span>);</span><br><span class=\"line\">  &#125;, [data]);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb2\"</span>);</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">\"https://www.mxnzp.com/api//music/singer/search?keyWord=周杰伦\"</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setData(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb3\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"interval\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"clear\"</span>);</span><br><span class=\"line\">      clearInterval(timer);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"render\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;)()&#125;</span><br><span class=\"line\">      &lt;p&gt; &#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Hook2;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>effect在render后按照前后顺序执行。</li>\n<li>effect在没有任何依赖的情况下，render后每次都按照顺序执行。</li>\n<li>effect内部执行是异步的。</li>\n<li>依赖[]可以实现类似componentDidMount的作用，但最好忘记生命周期， 只记副作用。</li>\n<li>effect的回调函数返回一个匿名函数，相当于componentUnMount的钩子函数，一般是remove eventLisenter， clear timeId等，主要是组件卸载后防止内存泄漏。</li>\n</ul>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>跨组件共享数据的钩子函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = useContext(MyContext);</span><br><span class=\"line\"><span class=\"comment\">// MyContext 为 context 对象（React.createContext 的返回值） </span></span><br><span class=\"line\"><span class=\"comment\">// useContext 返回MyContext的返回值。</span></span><br><span class=\"line\"><span class=\"comment\">// 当前的 context 值由上层组件中距离当前组件最近的&lt;MyContext.Provider&gt; 的 value prop 决定。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useContext, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">\"./child\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myContext = React.createContext();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = useContext(myContext);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Child1-value\"</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Child1-value: &#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"没有改变值\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>没有改变值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Child3 = React.memo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"memo val\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val, setVal] = useState(<span class=\"string\">\"init\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;val&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setVal(`$&#123;val&#125;$&#123;new Date()&#125;`)&#125;&gt; change&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;myContext.Provider value=&#123;val&#125;&gt;</span><br><span class=\"line\">        &lt;Child props=&#123;&#123; myContext &#125;&#125; /&gt;</span><br><span class=\"line\">        &lt;Child1 /&gt;</span><br><span class=\"line\">        &lt;Child2 /&gt;</span><br><span class=\"line\">        &lt;Child3 /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/myContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Child.js</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = props.props;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(context, <span class=\"string\">\"========\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = useContext(context.myContext);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Child-value\"</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Child1-value: &#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Child;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结论：</strong></p>\n<ul>\n<li>useContext 的组件总会在 context 值变化时重新渲染， 所以&lt;MyContext.Provider&gt;包裹的越多，层级越深，性能会造成影响。</li>\n</ul>\n<ul>\n<li>&lt;MyContext.Provider&gt; 的 value 发生变化时候， 包裹的组件无论是否订阅content value，所有组件都会从新渲染。</li>\n</ul>\n<ul>\n<li>child2 不应该rerender, 如何避免不必要的render？*<br>使用<code>React.memo</code>优化。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child3 = React.memo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"memo val\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样 <code>Child3</code>避免了每次render</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> refContainer = useRef(initialValue);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputEl = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onButtonClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class=\"line\">    inputEl.current.focus();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;input ref=&#123;inputEl&#125; type=<span class=\"string\">\"text\"</span> /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ref 这一种访问 DOM 的主要方式。如果你将 ref 对象以 <div ref=\"{myRef}\"> 形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的 .current 属性设置为相应的 DOM 节点。</div></p>\n</li>\n<li><p>useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式。这是因为它创建的是一个普通 Javascript 对象。而 useRef() 和自建一个 {current: …} 对象的唯一区别是，<code>useRef 会在每次渲染时返回同一个 ref 对象</code>。</p>\n</li>\n<li><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p>\n</li>\n</ul>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br></pre></td></tr></table></figure>\n\n<p>reducer就是一个只能通过action将state从一个过程转换成另一个过程的纯函数;<br>useReducer就是一种通过(state,action) =&gt; newState的过程，和redux工作方式一样。数据流： dispatch(action) =&gt; reducer更新state =&gt; 返回更新后的state</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initVal = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initVal);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;state.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useReducer-useContext来模拟redux\"><a href=\"#useReducer-useContext来模拟redux\" class=\"headerlink\" title=\"useReducer, useContext来模拟redux\"></a>useReducer, useContext来模拟redux</h2><p>useContext 和 useReducer模拟redux管理状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MyContext = React.createContext();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, dispatch &#125; = useContext(MyContext);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;<span class=\"string\">'count改变了'</span> &#123;count&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt; + &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt; - &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initVal = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initVal);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;MyContext.Provider value=&#123;&#123; <span class=\"attr\">count</span>: state.count, dispatch &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/MyContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedCallback = useCallback(</span><br><span class=\"line\">  () =&gt; &#123;</span><br><span class=\"line\">    doSomething(a, b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [a, b],</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useCallback, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; event, data &#125;</span>) </span>&#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb\"</span>);</span><br><span class=\"line\">    event();</span><br><span class=\"line\">  &#125;, [event]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;child&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123;JSON.stringify(data)&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;event&#125;&gt;跳用父级函数&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [num, setNum] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handle = useCallback(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> Axios.get(</span><br><span class=\"line\">      <span class=\"string\">\"https://www.mxnzp.com/api/lottery/common/latest?code=ssq\"</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    setData(res);</span><br><span class=\"line\">  &#125;, [num]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt; you have clicked &#123;num&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setNum(num + 1)&#125;&gt;click me&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;Child event=&#123;handle&#125; data=&#123;data&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>每当count变化时，传入子组件的函数都是最新的，所以导致child的useEffect执行。</p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedValue = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure>\n\n<p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>\n<p>记住，传入 useMemo 的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo。</p>\n<p>如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。</p>\n<p>你可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证。将来，React 可能会选择“遗忘”以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有 useMemo 的情况下也可以执行的代码 —— 之后再在你的代码中添加 useMemo，以达到优化性能的目的。</p>\n<p><strong><code>useCallback</code> 不会执行第一个参数函数，而是将它返回给你，而 <code>useMemo</code> 会执行第一个函数并且将函数执行结果返回给你</strong>。<br><a href=\"https://codesandbox.io/s/crazy-northcutt-b10oq\" target=\"_blank\" rel=\"noopener\">源码参考</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>Hook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。</p>\n<ul>\n<li>完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。</li>\n<li>100% 向后兼容的。 Hook 不包含任何破坏性改动。</li>\n<li>现在可用。 Hook 已发布于 v16.8.0。</li>\n</ul>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p><code>const [state, setState] = useState(initialState)</code>; state为变量，setState 修改 state值的方法， setState也是异步执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明一个新的叫做 “count” 的 state 变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        Click me</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>忘记生命周期，记住副作用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span>  =&gt;</span>  &#123;<span class=\"comment\">// Async Action&#125;, ?[dependencies]); // 第二参数非必填</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState();</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb1\"</span>);</span><br><span class=\"line\">  &#125;, [data]);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb2\"</span>);</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">\"https://www.mxnzp.com/api//music/singer/search?keyWord=周杰伦\"</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setData(res);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb3\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"interval\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"clear\"</span>);</span><br><span class=\"line\">      clearInterval(timer);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"render\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;)()&#125;</span><br><span class=\"line\">      &lt;p&gt; &#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Hook2;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>effect在render后按照前后顺序执行。</li>\n<li>effect在没有任何依赖的情况下，render后每次都按照顺序执行。</li>\n<li>effect内部执行是异步的。</li>\n<li>依赖[]可以实现类似componentDidMount的作用，但最好忘记生命周期， 只记副作用。</li>\n<li>effect的回调函数返回一个匿名函数，相当于componentUnMount的钩子函数，一般是remove eventLisenter， clear timeId等，主要是组件卸载后防止内存泄漏。</li>\n</ul>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>跨组件共享数据的钩子函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = useContext(MyContext);</span><br><span class=\"line\"><span class=\"comment\">// MyContext 为 context 对象（React.createContext 的返回值） </span></span><br><span class=\"line\"><span class=\"comment\">// useContext 返回MyContext的返回值。</span></span><br><span class=\"line\"><span class=\"comment\">// 当前的 context 值由上层组件中距离当前组件最近的&lt;MyContext.Provider&gt; 的 value prop 决定。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useContext, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">\"./child\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myContext = React.createContext();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = useContext(myContext);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Child1-value\"</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Child1-value: &#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"没有改变值\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>没有改变值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Child3 = React.memo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"memo val\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val, setVal] = useState(<span class=\"string\">\"init\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;val&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setVal(`$&#123;val&#125;$&#123;new Date()&#125;`)&#125;&gt; change&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;myContext.Provider value=&#123;val&#125;&gt;</span><br><span class=\"line\">        &lt;Child props=&#123;&#123; myContext &#125;&#125; /&gt;</span><br><span class=\"line\">        &lt;Child1 /&gt;</span><br><span class=\"line\">        &lt;Child2 /&gt;</span><br><span class=\"line\">        &lt;Child3 /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/myContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Child.js</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = props.props;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(context, <span class=\"string\">\"========\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = useContext(context.myContext);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Child-value\"</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Child1-value: &#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Child;</span><br></pre></td></tr></table></figure>\n\n<p><strong>结论：</strong></p>\n<ul>\n<li>useContext 的组件总会在 context 值变化时重新渲染， 所以&lt;MyContext.Provider&gt;包裹的越多，层级越深，性能会造成影响。</li>\n</ul>\n<ul>\n<li>&lt;MyContext.Provider&gt; 的 value 发生变化时候， 包裹的组件无论是否订阅content value，所有组件都会从新渲染。</li>\n</ul>\n<ul>\n<li>child2 不应该rerender, 如何避免不必要的render？*<br>使用<code>React.memo</code>优化。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child3 = React.memo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"memo val\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样 <code>Child3</code>避免了每次render</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> refContainer = useRef(initialValue);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;useRef&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputEl = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onButtonClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class=\"line\">    inputEl.current.focus();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;input ref=&#123;inputEl&#125; type=<span class=\"string\">\"text\"</span> /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ref 这一种访问 DOM 的主要方式。如果你将 ref 对象以 <div ref=\"{myRef}\"> 形式传入组件，则无论该节点如何改变，React 都会将 ref 对象的 .current 属性设置为相应的 DOM 节点。</div></p>\n</li>\n<li><p>useRef() 比 ref 属性更有用。它可以很方便地保存任何可变值，其类似于在 class 中使用实例字段的方式。这是因为它创建的是一个普通 Javascript 对象。而 useRef() 和自建一个 {current: …} 对象的唯一区别是，<code>useRef 会在每次渲染时返回同一个 ref 对象</code>。</p>\n</li>\n<li><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p>\n</li>\n</ul>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br></pre></td></tr></table></figure>\n\n<p>reducer就是一个只能通过action将state从一个过程转换成另一个过程的纯函数;<br>useReducer就是一种通过(state,action) =&gt; newState的过程，和redux工作方式一样。数据流： dispatch(action) =&gt; reducer更新state =&gt; 返回更新后的state</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initVal = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initVal);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;state.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useReducer-useContext来模拟redux\"><a href=\"#useReducer-useContext来模拟redux\" class=\"headerlink\" title=\"useReducer, useContext来模拟redux\"></a>useReducer, useContext来模拟redux</h2><p>useContext 和 useReducer模拟redux管理状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MyContext = React.createContext();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, dispatch &#125; = useContext(MyContext);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;<span class=\"string\">'count改变了'</span> &#123;count&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt; + &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt; - &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initVal = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initVal);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;MyContext.Provider value=&#123;&#123; <span class=\"attr\">count</span>: state.count, dispatch &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/MyContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedCallback = useCallback(</span><br><span class=\"line\">  () =&gt; &#123;</span><br><span class=\"line\">    doSomething(a, b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [a, b],</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useCallback, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">&#123; event, data &#125;</span>) </span>&#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hbb\"</span>);</span><br><span class=\"line\">    event();</span><br><span class=\"line\">  &#125;, [event]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;child&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123;JSON.stringify(data)&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;event&#125;&gt;跳用父级函数&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hook6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [num, setNum] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handle = useCallback(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> Axios.get(</span><br><span class=\"line\">      <span class=\"string\">\"https://www.mxnzp.com/api/lottery/common/latest?code=ssq\"</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    setData(res);</span><br><span class=\"line\">  &#125;, [num]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt; you have clicked &#123;num&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setNum(num + 1)&#125;&gt;click me&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;Child event=&#123;handle&#125; data=&#123;data&#125; /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>每当count变化时，传入子组件的函数都是最新的，所以导致child的useEffect执行。</p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedValue = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure>\n\n<p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>\n<p>记住，传入 useMemo 的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo。</p>\n<p>如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。</p>\n<p>你可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证。将来，React 可能会选择“遗忘”以前的一些 memoized 值，并在下次渲染时重新计算它们，比如为离屏组件释放内存。先编写在没有 useMemo 的情况下也可以执行的代码 —— 之后再在你的代码中添加 useMemo，以达到优化性能的目的。</p>\n<p><strong><code>useCallback</code> 不会执行第一个参数函数，而是将它返回给你，而 <code>useMemo</code> 会执行第一个函数并且将函数执行结果返回给你</strong>。<br><a href=\"https://codesandbox.io/s/crazy-northcutt-b10oq\" target=\"_blank\" rel=\"noopener\">源码参考</a></p>\n"},{"title":"Vue.js环境的搭建","comments":1,"description":"在windows系统搭建Vue.js开发环境","keywords":"vue, Vue.js","date":"2017-06-29T04:00:00.000Z","_content":"\n\n在windows系统搭建Vue.js开发环境\n\n## 第一步\n\n`node.js`的官网下载`node.js`最新版本。[网址](http://nodejs.cn/)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v1.png 'hbb')\n\n下载自己所需的就可以了。\n\n## 第二步\n\n检测安装是否成功。在命令行内输入：`node -v`，`npm -v`查看安装的版本。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v2.png)\n\n## 第三步\n附加的步骤，因为某些原因会导致`npm`安装时候失败，所以还需要`npm`镜像。可以使用淘宝的镜像：`http://registry.npm.taobao.org`\n\n在命令行内输入：\n\n```sh\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\n```\n\n## 第四步\n\n安装`vue-cli`脚手架构建工具，在命令行内输入：\n\n```sh\nnpm install -g vue-cli\n```\n\n## 第五步\n\n在桌面新建一个文件夹，名字自己看着起。打开，按住`shift+右键`，点击在此处打开命令窗口，输入：\n\n```sh\nvue init webpack testVue\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v4.png)\n\n这次会让你输入，项目名称，描述，作者等，如果想更简单的话，可以Entenr键一直按下去就可以。\n\n会在新建的文件夹里下载一些文件,如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v5.png)\n\n项目的信息，以及我们主要使用的在 `package.json`这个文件内。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v6.png)\n\n## 第六步\n在新建文件夹里面（我自己建的文件夹）打开`testVue`文件夹，按住`shift+右键`，进入命令行，\n\n输入`npm install`。下载完后会在`testVue`这个文件夹里面生成`node_modules`文件年夹。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v7.png)\n\n## 第七步\n可以运行整个项目了在命令行内输入：\n\n```sh\nnpm run dev\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v8.png)\n\n出现错误：是因为80端口被占用，在`testVue`文件夹里面找到`config`文件夹打开，找到`index.js`打开把8080改为8088，重新输入`npm run dev`即可。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v10.png)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v12.png)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v11.png)\n\n之后进行我们的项目，热加载在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。\n\n","source":"_posts/vue-2.md","raw":"---\ntitle: Vue.js环境的搭建\ncomments: true\ndescription: 在windows系统搭建Vue.js开发环境\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-06-29 12:00:00\n---\n\n\n在windows系统搭建Vue.js开发环境\n\n## 第一步\n\n`node.js`的官网下载`node.js`最新版本。[网址](http://nodejs.cn/)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v1.png 'hbb')\n\n下载自己所需的就可以了。\n\n## 第二步\n\n检测安装是否成功。在命令行内输入：`node -v`，`npm -v`查看安装的版本。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v2.png)\n\n## 第三步\n附加的步骤，因为某些原因会导致`npm`安装时候失败，所以还需要`npm`镜像。可以使用淘宝的镜像：`http://registry.npm.taobao.org`\n\n在命令行内输入：\n\n```sh\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\n```\n\n## 第四步\n\n安装`vue-cli`脚手架构建工具，在命令行内输入：\n\n```sh\nnpm install -g vue-cli\n```\n\n## 第五步\n\n在桌面新建一个文件夹，名字自己看着起。打开，按住`shift+右键`，点击在此处打开命令窗口，输入：\n\n```sh\nvue init webpack testVue\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v4.png)\n\n这次会让你输入，项目名称，描述，作者等，如果想更简单的话，可以Entenr键一直按下去就可以。\n\n会在新建的文件夹里下载一些文件,如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v5.png)\n\n项目的信息，以及我们主要使用的在 `package.json`这个文件内。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v6.png)\n\n## 第六步\n在新建文件夹里面（我自己建的文件夹）打开`testVue`文件夹，按住`shift+右键`，进入命令行，\n\n输入`npm install`。下载完后会在`testVue`这个文件夹里面生成`node_modules`文件年夹。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v7.png)\n\n## 第七步\n可以运行整个项目了在命令行内输入：\n\n```sh\nnpm run dev\n```\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v8.png)\n\n出现错误：是因为80端口被占用，在`testVue`文件夹里面找到`config`文件夹打开，找到`index.js`打开把8080改为8088，重新输入`npm run dev`即可。\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v10.png)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v12.png)\n\n![](http://www.hbbaly.com/wp-content/uploads/2017/09/v11.png)\n\n之后进行我们的项目，热加载在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。\n\n","slug":"vue-2","published":1,"updated":"2020-12-02T06:49:34.145Z","layout":"post","photos":[],"link":"","_id":"cki71walv004stl9ksr3ikfwd","content":"<p>在windows系统搭建Vue.js开发环境</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p><code>node.js</code>的官网下载<code>node.js</code>最新版本。<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">网址</a></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v1.png\" alt title=\"hbb\"></p>\n<p>下载自己所需的就可以了。</p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>检测安装是否成功。在命令行内输入：<code>node -v</code>，<code>npm -v</code>查看安装的版本。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v2.png\" alt></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>附加的步骤，因为某些原因会导致<code>npm</code>安装时候失败，所以还需要<code>npm</code>镜像。可以使用淘宝的镜像：<code>http://registry.npm.taobao.org</code></p>\n<p>在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>安装<code>vue-cli</code>脚手架构建工具，在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>在桌面新建一个文件夹，名字自己看着起。打开，按住<code>shift+右键</code>，点击在此处打开命令窗口，输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack testVue</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v4.png\" alt></p>\n<p>这次会让你输入，项目名称，描述，作者等，如果想更简单的话，可以Entenr键一直按下去就可以。</p>\n<p>会在新建的文件夹里下载一些文件,如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v5.png\" alt></p>\n<p>项目的信息，以及我们主要使用的在 <code>package.json</code>这个文件内。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v6.png\" alt></p>\n<h2 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>在新建文件夹里面（我自己建的文件夹）打开<code>testVue</code>文件夹，按住<code>shift+右键</code>，进入命令行，</p>\n<p>输入<code>npm install</code>。下载完后会在<code>testVue</code>这个文件夹里面生成<code>node_modules</code>文件年夹。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v7.png\" alt></p>\n<h2 id=\"第七步\"><a href=\"#第七步\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>可以运行整个项目了在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v8.png\" alt></p>\n<p>出现错误：是因为80端口被占用，在<code>testVue</code>文件夹里面找到<code>config</code>文件夹打开，找到<code>index.js</code>打开把8080改为8088，重新输入<code>npm run dev</code>即可。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v10.png\" alt></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v12.png\" alt></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v11.png\" alt></p>\n<p>之后进行我们的项目，热加载在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在windows系统搭建Vue.js开发环境</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p><code>node.js</code>的官网下载<code>node.js</code>最新版本。<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">网址</a></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v1.png\" alt title=\"hbb\"></p>\n<p>下载自己所需的就可以了。</p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>检测安装是否成功。在命令行内输入：<code>node -v</code>，<code>npm -v</code>查看安装的版本。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v2.png\" alt></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>附加的步骤，因为某些原因会导致<code>npm</code>安装时候失败，所以还需要<code>npm</code>镜像。可以使用淘宝的镜像：<code>http://registry.npm.taobao.org</code></p>\n<p>在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>安装<code>vue-cli</code>脚手架构建工具，在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>在桌面新建一个文件夹，名字自己看着起。打开，按住<code>shift+右键</code>，点击在此处打开命令窗口，输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack testVue</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v4.png\" alt></p>\n<p>这次会让你输入，项目名称，描述，作者等，如果想更简单的话，可以Entenr键一直按下去就可以。</p>\n<p>会在新建的文件夹里下载一些文件,如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v5.png\" alt></p>\n<p>项目的信息，以及我们主要使用的在 <code>package.json</code>这个文件内。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v6.png\" alt></p>\n<h2 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>在新建文件夹里面（我自己建的文件夹）打开<code>testVue</code>文件夹，按住<code>shift+右键</code>，进入命令行，</p>\n<p>输入<code>npm install</code>。下载完后会在<code>testVue</code>这个文件夹里面生成<code>node_modules</code>文件年夹。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v7.png\" alt></p>\n<h2 id=\"第七步\"><a href=\"#第七步\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>可以运行整个项目了在命令行内输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v8.png\" alt></p>\n<p>出现错误：是因为80端口被占用，在<code>testVue</code>文件夹里面找到<code>config</code>文件夹打开，找到<code>index.js</code>打开把8080改为8088，重新输入<code>npm run dev</code>即可。</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v10.png\" alt></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v12.png\" alt></p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2017/09/v11.png\" alt></p>\n<p>之后进行我们的项目，热加载在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。</p>\n"},{"title":"Vue.js基础知识","comments":1,"description":"Vue.js基础知识","keywords":"vue, Vue.js","date":"2017-06-29T08:23:10.000Z","_content":"\n\n## 数据的绑定\n\n```js\nvar data = {\n    name:\"hbb\",\n    age:\"<p>25</p>\"\n};\nvar box = new Vue({\n    el:\"#box\",  //绑定box\n    data:data\n});\n```\n\n`el`相当于在`js`中的`document.getElementById(\"\")`;可以试验以下：\n\n```js\nconsole.log(box.$el===document.getElementById(\"box\")) // 为true\n```\n\n\n代码可以看看到`data`加入了创建的`vue`中，这是我们打印\n\n```js\nconsole.log(box.name===data.anme) //为true\n```\n\n如果想让`data`里面的数据在`box`内显示,`{{name}}`,可以在`box`中显示`name`的值。\n\n## 监听数据的变化\n\n`$watch()`可以传两个参数，\n\n第一个：监听什么。\n\n第二个回调函数：1.变化之后的值，2.变化之前的值。\n\n上面两个为必选，还可以传`{deep:true }`及`{immediate = true}`。\n\n```js\nbox.$watch('name',function (str ,hbb){\n    alert(name);\n    },{\n      immediate: true //立刻执行\n//        deep:true\n});\n```\n\n## v-once\n\n(只绑定一次，在进行修改的时候不会改变)\n\n在浏览器下面：`data.age = \"123\"`,不加`v-once`的时候，`box`内容跟着改变为`“123”`，加上之后，不会改变。\n\n```html\n<div id=\"box\" v-once>{{age}}</div>\n```\n\n## v-html\n\n```js\nvar data = {\n    name:\"hbb\",\n    age:\"<p>25</p>\"\n};\n```\n\n## v-bind\n\n进行元素属性绑定，可以简写成 `：` 。\n\n```html\n<div id=\"box1\">\n    <a v-bind:href=\"a\" :class=\"red\" class=\"yellow\">点击进入</a>\n    <br>\n    <a href=\"\" :class='[red, yellow]' class=\"green\">class类名实例</a>\n    <br>\n    <a href=\"\" :class='{red,yellow}' class=\"green\">第三种方法</a>\n    <br>\n    <img v-bind:src=\"b\" alt=\"\" >\n    <input type=\"text\" v-model=\"a\">\n</div>\n```\n\n```css\n.red{\n    color:red;\n}\n.green{\n    background: green;\n}\n.yellow{\n    border:5px solid yellow;\n}\na,input,img{\n    display: block;\n}\n```\n\n```js\nvar box1 = new Vue({\n    el:\"#box1\",\n    data:{\n        a:\"http://www.hbbaly.com\",\n        b:\"http://www.hbbaly.com/wp-content/themes/blog/timthumb.php?src=http://www.hbbaly.com//wp-content/themes/blog/case/img/rubber.jpg&w=280&h=210&zc=1\",\n        red:\"red\",\n        green:\"green\",\n        yellow:\"yellow\"\n    }\n});\n```\n\n## v-model\n\n双向绑定表单元素：\n\n在`input`框内改变地址为百度链接，点击a标签不会跳转到我的`blog`而是到百度去了。在`input`框内我改变的a标签的`href`，a标签的链接地址也就随之改变。\n\n## class绑定的三种方法\n\n\n代码`v-bind`应用下面的代码。\n\n1. v-bind\n如下可以看到a标签内的字变红了，添加上了`red`类名,与原来a标签自己的`class`类名不冲突，只是在后面添加，但是这一中方法只能添加一个，多个会报错。\n\n2. :class=\"[]\"来绑定类名：\n可以添加多个用逗号隔开，与原来a标签自己的`class`类名不冲突。\n\n3. {}形式绑定,用法与[]类似。\n\n\n## v-if\n如果符合插入标签，不符合就移除标签与`v-show`不同，`v-show`使用`display`：来控制标签的显示与隐藏\n\n\n```html\n<div id=\"box3\">\n    <div v-if=\"str=='1'\">\n        <a href=\"\">登录</a>\n    </div>\n    <div v-else-if=\"str=='2'\">\n        <a href=\"\">密码</a>\n    </div>\n    <div v-else>什么都不是</div>\n</div>\n<div v-show=\"show\" >这里演示show</div>\n\nvar box3 = new Vue({\n    el:\"#box3\",\n    data:{\n        str:\"1\",\n        show:true\n    }\n});\n```\n\n## v-on\n\n用来绑定事件,可以传参数。简写 ：`@+事件名`\n\n```html\n<div id=\"box4\"  v-on:click=\"fn(5)\" >点击</div>\n```\n\n```js\nvar box4 = new Vue({\n    el:\"#box4\",\n    data:{\n        str:\"1\",\n        show:\"true\"\n    },\n    methods:{\n        fn(a){\n            alert(a);\n        }\n    }\n});\n```\n\n## 过滤:filters\n\n```html\n<div id=\"box5\">\n        {{inp|fn(\"元\")}}\n    <input type=\"text\" v-model=\"inp\">\n</div>\n```\n\nfn可以传参数，第一个默认为inp，第二个是自定义如：```{{inp|fn(\"元\")}}```。如果想要实现自动添加后缀为元的功能，fn内必须`return`。\n\n## computed\n\n实时计算，数据发生变化的时候执行\n\n```html\n<div id=\"box6\">\n    <p>总金额：{{fn}}</p>\n    <input type=\"text\" v-model=\"inp\">\n    <input type=\"number\" v-model=\"inp1\">\n</div>\n```\n\n```js\nvar box6= new Vue({\n    el:\"#box6\",\n    data:{\n        inp:\"\",\n        inp1:\"\"\n    },\n    methods:{},\n    computed:{\n        fn(){\n          return this.inp*this.inp1;\n        }\n    }\n});\n```\n\n## v-for:循环\n\n```html\n<div id=\"box7\">\n    <ul>\n        <li v-for=\"i in json\">{{ i }}</li>\n    </ul>\n</div>\n```\n\n```js\nvar box7= new Vue({\n    el:\"#box7\",\n    data:{\n        json:[1,2,3,4]  //使用json与arr都行\n    },\n    methods:{\n        fn(){\n            var arr = [];\n            for(var i =0;i<10;i++){\n                arr.push(i)\n            }\n            return arr;\n        }\n    }\n})\n```","source":"_posts/vue-3.md","raw":"---\ntitle: Vue.js基础知识\ncomments: true\ndescription: Vue.js基础知识\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-06-29 16:23:10\n---\n\n\n## 数据的绑定\n\n```js\nvar data = {\n    name:\"hbb\",\n    age:\"<p>25</p>\"\n};\nvar box = new Vue({\n    el:\"#box\",  //绑定box\n    data:data\n});\n```\n\n`el`相当于在`js`中的`document.getElementById(\"\")`;可以试验以下：\n\n```js\nconsole.log(box.$el===document.getElementById(\"box\")) // 为true\n```\n\n\n代码可以看看到`data`加入了创建的`vue`中，这是我们打印\n\n```js\nconsole.log(box.name===data.anme) //为true\n```\n\n如果想让`data`里面的数据在`box`内显示,`{{name}}`,可以在`box`中显示`name`的值。\n\n## 监听数据的变化\n\n`$watch()`可以传两个参数，\n\n第一个：监听什么。\n\n第二个回调函数：1.变化之后的值，2.变化之前的值。\n\n上面两个为必选，还可以传`{deep:true }`及`{immediate = true}`。\n\n```js\nbox.$watch('name',function (str ,hbb){\n    alert(name);\n    },{\n      immediate: true //立刻执行\n//        deep:true\n});\n```\n\n## v-once\n\n(只绑定一次，在进行修改的时候不会改变)\n\n在浏览器下面：`data.age = \"123\"`,不加`v-once`的时候，`box`内容跟着改变为`“123”`，加上之后，不会改变。\n\n```html\n<div id=\"box\" v-once>{{age}}</div>\n```\n\n## v-html\n\n```js\nvar data = {\n    name:\"hbb\",\n    age:\"<p>25</p>\"\n};\n```\n\n## v-bind\n\n进行元素属性绑定，可以简写成 `：` 。\n\n```html\n<div id=\"box1\">\n    <a v-bind:href=\"a\" :class=\"red\" class=\"yellow\">点击进入</a>\n    <br>\n    <a href=\"\" :class='[red, yellow]' class=\"green\">class类名实例</a>\n    <br>\n    <a href=\"\" :class='{red,yellow}' class=\"green\">第三种方法</a>\n    <br>\n    <img v-bind:src=\"b\" alt=\"\" >\n    <input type=\"text\" v-model=\"a\">\n</div>\n```\n\n```css\n.red{\n    color:red;\n}\n.green{\n    background: green;\n}\n.yellow{\n    border:5px solid yellow;\n}\na,input,img{\n    display: block;\n}\n```\n\n```js\nvar box1 = new Vue({\n    el:\"#box1\",\n    data:{\n        a:\"http://www.hbbaly.com\",\n        b:\"http://www.hbbaly.com/wp-content/themes/blog/timthumb.php?src=http://www.hbbaly.com//wp-content/themes/blog/case/img/rubber.jpg&w=280&h=210&zc=1\",\n        red:\"red\",\n        green:\"green\",\n        yellow:\"yellow\"\n    }\n});\n```\n\n## v-model\n\n双向绑定表单元素：\n\n在`input`框内改变地址为百度链接，点击a标签不会跳转到我的`blog`而是到百度去了。在`input`框内我改变的a标签的`href`，a标签的链接地址也就随之改变。\n\n## class绑定的三种方法\n\n\n代码`v-bind`应用下面的代码。\n\n1. v-bind\n如下可以看到a标签内的字变红了，添加上了`red`类名,与原来a标签自己的`class`类名不冲突，只是在后面添加，但是这一中方法只能添加一个，多个会报错。\n\n2. :class=\"[]\"来绑定类名：\n可以添加多个用逗号隔开，与原来a标签自己的`class`类名不冲突。\n\n3. {}形式绑定,用法与[]类似。\n\n\n## v-if\n如果符合插入标签，不符合就移除标签与`v-show`不同，`v-show`使用`display`：来控制标签的显示与隐藏\n\n\n```html\n<div id=\"box3\">\n    <div v-if=\"str=='1'\">\n        <a href=\"\">登录</a>\n    </div>\n    <div v-else-if=\"str=='2'\">\n        <a href=\"\">密码</a>\n    </div>\n    <div v-else>什么都不是</div>\n</div>\n<div v-show=\"show\" >这里演示show</div>\n\nvar box3 = new Vue({\n    el:\"#box3\",\n    data:{\n        str:\"1\",\n        show:true\n    }\n});\n```\n\n## v-on\n\n用来绑定事件,可以传参数。简写 ：`@+事件名`\n\n```html\n<div id=\"box4\"  v-on:click=\"fn(5)\" >点击</div>\n```\n\n```js\nvar box4 = new Vue({\n    el:\"#box4\",\n    data:{\n        str:\"1\",\n        show:\"true\"\n    },\n    methods:{\n        fn(a){\n            alert(a);\n        }\n    }\n});\n```\n\n## 过滤:filters\n\n```html\n<div id=\"box5\">\n        {{inp|fn(\"元\")}}\n    <input type=\"text\" v-model=\"inp\">\n</div>\n```\n\nfn可以传参数，第一个默认为inp，第二个是自定义如：```{{inp|fn(\"元\")}}```。如果想要实现自动添加后缀为元的功能，fn内必须`return`。\n\n## computed\n\n实时计算，数据发生变化的时候执行\n\n```html\n<div id=\"box6\">\n    <p>总金额：{{fn}}</p>\n    <input type=\"text\" v-model=\"inp\">\n    <input type=\"number\" v-model=\"inp1\">\n</div>\n```\n\n```js\nvar box6= new Vue({\n    el:\"#box6\",\n    data:{\n        inp:\"\",\n        inp1:\"\"\n    },\n    methods:{},\n    computed:{\n        fn(){\n          return this.inp*this.inp1;\n        }\n    }\n});\n```\n\n## v-for:循环\n\n```html\n<div id=\"box7\">\n    <ul>\n        <li v-for=\"i in json\">{{ i }}</li>\n    </ul>\n</div>\n```\n\n```js\nvar box7= new Vue({\n    el:\"#box7\",\n    data:{\n        json:[1,2,3,4]  //使用json与arr都行\n    },\n    methods:{\n        fn(){\n            var arr = [];\n            for(var i =0;i<10;i++){\n                arr.push(i)\n            }\n            return arr;\n        }\n    }\n})\n```","slug":"vue-3","published":1,"updated":"2020-12-02T06:49:34.146Z","layout":"post","photos":[],"link":"","_id":"cki71walw004vtl9kjveekg1u","content":"<h2 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"hbb\"</span>,</span><br><span class=\"line\">    age:<span class=\"string\">\"&lt;p&gt;25&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box\"</span>,  <span class=\"comment\">//绑定box</span></span><br><span class=\"line\">    data:data</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>el</code>相当于在<code>js</code>中的<code>document.getElementById(&quot;&quot;)</code>;可以试验以下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(box.$el===<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"box\"</span>)) <span class=\"comment\">// 为true</span></span><br></pre></td></tr></table></figure>\n\n<p>代码可以看看到<code>data</code>加入了创建的<code>vue</code>中，这是我们打印</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(box.name===data.anme) <span class=\"comment\">//为true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想让<code>data</code>里面的数据在<code>box</code>内显示,<code></code>,可以在<code>box</code>中显示<code>name</code>的值。</p>\n<h2 id=\"监听数据的变化\"><a href=\"#监听数据的变化\" class=\"headerlink\" title=\"监听数据的变化\"></a>监听数据的变化</h2><p><code>$watch()</code>可以传两个参数，</p>\n<p>第一个：监听什么。</p>\n<p>第二个回调函数：1.变化之后的值，2.变化之前的值。</p>\n<p>上面两个为必选，还可以传<code>{deep:true }</code>及<code>{immediate = true}</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.$watch(<span class=\"string\">'name'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str ,hbb</span>)</span>&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span> <span class=\"comment\">//立刻执行</span></span><br><span class=\"line\"><span class=\"comment\">//        deep:true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h2><p>(只绑定一次，在进行修改的时候不会改变)</p>\n<p>在浏览器下面：<code>data.age = &quot;123&quot;</code>,不加<code>v-once</code>的时候，<code>box</code>内容跟着改变为<code>“123”</code>，加上之后，不会改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"hbb\"</span>,</span><br><span class=\"line\">    age:<span class=\"string\">\"&lt;p&gt;25&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><p>进行元素属性绑定，可以简写成 <code>：</code> 。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"yellow\"</span>&gt;</span>点击进入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">'[red, yellow]'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"green\"</span>&gt;</span>class类名实例<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">'&#123;red,yellow&#125;'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"green\"</span>&gt;</span>第三种方法<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.red</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.green</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.yellow</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">5px</span> solid yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box1\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"string\">\"http://www.hbbaly.com\"</span>,</span><br><span class=\"line\">        b:<span class=\"string\">\"http://www.hbbaly.com/wp-content/themes/blog/timthumb.php?src=http://www.hbbaly.com//wp-content/themes/blog/case/img/rubber.jpg&amp;w=280&amp;h=210&amp;zc=1\"</span>,</span><br><span class=\"line\">        red:<span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">        green:<span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">        yellow:<span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>双向绑定表单元素：</p>\n<p>在<code>input</code>框内改变地址为百度链接，点击a标签不会跳转到我的<code>blog</code>而是到百度去了。在<code>input</code>框内我改变的a标签的<code>href</code>，a标签的链接地址也就随之改变。</p>\n<h2 id=\"class绑定的三种方法\"><a href=\"#class绑定的三种方法\" class=\"headerlink\" title=\"class绑定的三种方法\"></a>class绑定的三种方法</h2><p>代码<code>v-bind</code>应用下面的代码。</p>\n<ol>\n<li><p>v-bind<br>如下可以看到a标签内的字变红了，添加上了<code>red</code>类名,与原来a标签自己的<code>class</code>类名不冲突，只是在后面添加，但是这一中方法只能添加一个，多个会报错。</p>\n</li>\n<li><p>:class=”[]”来绑定类名：<br>可以添加多个用逗号隔开，与原来a标签自己的<code>class</code>类名不冲突。</p>\n</li>\n<li><p>{}形式绑定,用法与[]类似。</p>\n</li>\n</ol>\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>如果符合插入标签，不符合就移除标签与<code>v-show</code>不同，<code>v-show</code>使用<code>display</code>：来控制标签的显示与隐藏</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"str=='1'\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"str=='2'\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>什么都不是<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"show\"</span> &gt;</span>这里演示show<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var box3 = new Vue(&#123;</span><br><span class=\"line\">    el:\"#box3\",</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        str:\"1\",</span><br><span class=\"line\">        show:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p>用来绑定事件,可以传参数。简写 ：<code>@+事件名</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box4\"</span>  <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"fn(5)\"</span> &gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box4 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        str:<span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        show:<span class=\"string\">\"true\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        fn(a)&#123;</span><br><span class=\"line\">            alert(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"过滤-filters\"><a href=\"#过滤-filters\" class=\"headerlink\" title=\"过滤:filters\"></a>过滤:filters</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box5\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;inp|fn(\"元\")&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inp\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>fn可以传参数，第一个默认为inp，第二个是自定义如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## computed</span><br><span class=\"line\"></span><br><span class=\"line\">实时计算，数据发生变化的时候执行</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">&lt;div id=&quot;box6&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;总金额：&#123;&#123;fn&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;inp&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;number&quot; v-model=&quot;inp1&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box6= <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box6\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        inp:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        inp1:<span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;&#125;,</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        fn()&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inp*<span class=\"keyword\">this</span>.inp1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-for-循环\"><a href=\"#v-for-循环\" class=\"headerlink\" title=\"v-for:循环\"></a>v-for:循环</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box7\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in json\"</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box7= <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box7\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        json:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]  <span class=\"comment\">//使用json与arr都行</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        fn()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">                arr.push(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"数据的绑定\"><a href=\"#数据的绑定\" class=\"headerlink\" title=\"数据的绑定\"></a>数据的绑定</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"hbb\"</span>,</span><br><span class=\"line\">    age:<span class=\"string\">\"&lt;p&gt;25&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box\"</span>,  <span class=\"comment\">//绑定box</span></span><br><span class=\"line\">    data:data</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>el</code>相当于在<code>js</code>中的<code>document.getElementById(&quot;&quot;)</code>;可以试验以下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(box.$el===<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"box\"</span>)) <span class=\"comment\">// 为true</span></span><br></pre></td></tr></table></figure>\n\n<p>代码可以看看到<code>data</code>加入了创建的<code>vue</code>中，这是我们打印</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(box.name===data.anme) <span class=\"comment\">//为true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想让<code>data</code>里面的数据在<code>box</code>内显示,<code></code>,可以在<code>box</code>中显示<code>name</code>的值。</p>\n<h2 id=\"监听数据的变化\"><a href=\"#监听数据的变化\" class=\"headerlink\" title=\"监听数据的变化\"></a>监听数据的变化</h2><p><code>$watch()</code>可以传两个参数，</p>\n<p>第一个：监听什么。</p>\n<p>第二个回调函数：1.变化之后的值，2.变化之前的值。</p>\n<p>上面两个为必选，还可以传<code>{deep:true }</code>及<code>{immediate = true}</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.$watch(<span class=\"string\">'name'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str ,hbb</span>)</span>&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span> <span class=\"comment\">//立刻执行</span></span><br><span class=\"line\"><span class=\"comment\">//        deep:true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h2><p>(只绑定一次，在进行修改的时候不会改变)</p>\n<p>在浏览器下面：<code>data.age = &quot;123&quot;</code>,不加<code>v-once</code>的时候，<code>box</code>内容跟着改变为<code>“123”</code>，加上之后，不会改变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"hbb\"</span>,</span><br><span class=\"line\">    age:<span class=\"string\">\"&lt;p&gt;25&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><p>进行元素属性绑定，可以简写成 <code>：</code> 。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"yellow\"</span>&gt;</span>点击进入<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">'[red, yellow]'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"green\"</span>&gt;</span>class类名实例<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">'&#123;red,yellow&#125;'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"green\"</span>&gt;</span>第三种方法<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.red</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.green</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.yellow</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">5px</span> solid yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box1\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"string\">\"http://www.hbbaly.com\"</span>,</span><br><span class=\"line\">        b:<span class=\"string\">\"http://www.hbbaly.com/wp-content/themes/blog/timthumb.php?src=http://www.hbbaly.com//wp-content/themes/blog/case/img/rubber.jpg&amp;w=280&amp;h=210&amp;zc=1\"</span>,</span><br><span class=\"line\">        red:<span class=\"string\">\"red\"</span>,</span><br><span class=\"line\">        green:<span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">        yellow:<span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>双向绑定表单元素：</p>\n<p>在<code>input</code>框内改变地址为百度链接，点击a标签不会跳转到我的<code>blog</code>而是到百度去了。在<code>input</code>框内我改变的a标签的<code>href</code>，a标签的链接地址也就随之改变。</p>\n<h2 id=\"class绑定的三种方法\"><a href=\"#class绑定的三种方法\" class=\"headerlink\" title=\"class绑定的三种方法\"></a>class绑定的三种方法</h2><p>代码<code>v-bind</code>应用下面的代码。</p>\n<ol>\n<li><p>v-bind<br>如下可以看到a标签内的字变红了，添加上了<code>red</code>类名,与原来a标签自己的<code>class</code>类名不冲突，只是在后面添加，但是这一中方法只能添加一个，多个会报错。</p>\n</li>\n<li><p>:class=”[]”来绑定类名：<br>可以添加多个用逗号隔开，与原来a标签自己的<code>class</code>类名不冲突。</p>\n</li>\n<li><p>{}形式绑定,用法与[]类似。</p>\n</li>\n</ol>\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>如果符合插入标签，不符合就移除标签与<code>v-show</code>不同，<code>v-show</code>使用<code>display</code>：来控制标签的显示与隐藏</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"str=='1'\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"str=='2'\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>什么都不是<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"show\"</span> &gt;</span>这里演示show<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var box3 = new Vue(&#123;</span><br><span class=\"line\">    el:\"#box3\",</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        str:\"1\",</span><br><span class=\"line\">        show:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p>用来绑定事件,可以传参数。简写 ：<code>@+事件名</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box4\"</span>  <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"fn(5)\"</span> &gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box4 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        str:<span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        show:<span class=\"string\">\"true\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        fn(a)&#123;</span><br><span class=\"line\">            alert(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"过滤-filters\"><a href=\"#过滤-filters\" class=\"headerlink\" title=\"过滤:filters\"></a>过滤:filters</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box5\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;inp|fn(\"元\")&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inp\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>fn可以传参数，第一个默认为inp，第二个是自定义如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## computed</span><br><span class=\"line\"></span><br><span class=\"line\">实时计算，数据发生变化的时候执行</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">&lt;div id=&quot;box6&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;总金额：&#123;&#123;fn&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;inp&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;number&quot; v-model=&quot;inp1&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box6= <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box6\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        inp:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        inp1:<span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;&#125;,</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        fn()&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inp*<span class=\"keyword\">this</span>.inp1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-for-循环\"><a href=\"#v-for-循环\" class=\"headerlink\" title=\"v-for:循环\"></a>v-for:循环</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box7\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in json\"</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box7= <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box7\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        json:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]  <span class=\"comment\">//使用json与arr都行</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        fn()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">                arr.push(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"Vue项目代码规范","comments":1,"description":"实际项目中Vue代码规范","keywords":"vue, Vue.js","date":"2018-03-28T16:00:00.000Z","_content":"\n# `Vue项目代码规范`\n\n## 文件命名\n-\t **目录名**: 小驼峰\n-\t **js文件名**: 全小写(可用.,-)\n-\t **组件名**: 大驼峰(页面也算组件)\n-\t **路由**: 全小写\n-\t **公共组件**: XXX-XXX\n## 文件夹命名规则\n\n- **由名词组成**\n- **单词只能有一个**\n- **命名采用小写**\n\n## 文件名称规则\n\n- **vue文件代表着页面的名字**\n- **放在页面文件夹之下**\n- **文件名尽量是名词**\n- **以大写开头的驼峰命名，开头的单词是模块的名字，例: OrderDetail,OrderList**\n- **常用结尾词有（Detail、Edit、List、Info、Report）**\n- **以View结尾的代表是页面或页面子组件 （CarListView,CarInfoView）**\n  \n## Vue页面结构\n\n```html\n  <template>\n    <div>\n\n      <!--必须在div中编写页面-->\n\n    </div>\n  </template>\n  <script>\n    export default {\n      components : {\n      },\n      data () {\n        return {\n        }\n      },\n\t    mounted() {\n      },\n      methods: {\n      },\n    }\n  </script>\n  <!--声明语言，并且组件内必须添加scoped-->\n  <style lang=\"less\" scoped>\n  </style>\n```\n  ## **方法声明顺序**\n  `components`\n\n  - name    首字母大写，大驼峰命名规则\n  - props\n  - components\n  - data\n  - filter\n  - computed\n  - watch\n  - created\n  - activited\n  - mounted\n  - beforeRouterEnter\n  - beforeRouteUpdate\n  - beforeRouterLeave\n  - methods\n\n  ## **页面**\n\n  ```html\n    <div class=\"page page-XXX\">\n\t    <header class=\"header\">\n\t    </header>\n\t    <div class=\"container\">\n\t    </div>\n\t    <footer class=\"footer\"></footer>\n    </div>\n\n  ```\n  每个页面最外层都会有一个`page、page-XXX`类名\n  每个页面结构类似\n\n\n  |部分|代码|\n  |---|:--:|\n  |头部|`<header class=\"header\"></header>`|\n  |身体 |`<div class=\"container\"></div>`|\n  |底部 |`<footer class=\"footer\"></footer>`|\n\n  ## **组件**\n  ```html\n    <div class=\"module-name\">\n\t    <div class=\"__hd\">\n\t    </div>\n\t    <div class=\"__bd\">\n\t    </div>\n\t    <div class=\"__ft\">\n\t    </div>\n    </div>\n  ```\n\n  每个组件结构类似\n\n\n  |部分|代码|\n  |---|:--:|\n  |头部|`<div class=\"__hd\"></div>`|\n  |身体 |`<div class=\"__bd\"></div>`|\n  |底部 |`<div class=\"__ft\"></div>`|\n\n ## **组件分类**\n  - 系统级组件\n  \n    这类组件俱备不同项目之间通用，通常包括一些基础级通用形组件。\n  - 页面级组件\n\n    通常只在一个项目中实现通用，不具备项目级的移植性。\n  \n  - 普通功能级组件\n    某个页面功能模块，不具备复用性，但是通过他可以实现业务功能的分离，降低耦合，以降低维护和分治目的。\n\n## **创建组件注意事项**\n\n  - 组件保证功能单一，不要一个组件兼顾多个功能(避免后期调整时候冗杂，增加代码耦合度)\n  - 通用组件传值，尽可能单个传递,多传几个。\n  - 每个组件尽可能预留一个slot，为后期拓展预留。\n\n## `vue`组件命名\n\n- 系统级、页面级通用组件放置于 `src` 下 `components` 目录。\n\n- 局部功能组件，存放于页面 `vue` 页面同级目录下的 `components` 目录下\n\n`view`文件夹下是由以页面为单位的文件夹或模块文件夹组成，放在 `src` 目录下，与`components` 和 `assets` 同级。\n\n**组件命名采用 大驼峰**\n\n## 方法命名规则\n\n**采用动宾短语格式命名，例如：**\n```md\ngood：\n jumpPage、openCarInfoDialog\n\nbad：\n go、nextPage、show、open、login\n```\n\n**数据操作方法以get、post开头，以 data 结尾**\n\n```md\ngood：\n getListData、postFormData\n\nbad：\n takeData、confirmData、getList、postForm\n```\n\n**事件方法以 on 开头，inital,refresh,render除外**\n\n```\n例如，onChange,onUserInput\n```\n\n**尽量使用常用单词开头 （set、get、open、close、jump）命名规则使用驼峰命名**\n\n\n**不在 `created` 和 `mouted` 之类的方法写逻辑，取 `ajax` 数据，**\n\n## data-props\n\n**`data props` 规则**\n\n使用 `data` 里的变量时请先在 `data` 里初始化\n\n`props` **指定类型**\n\n不命名多余数据，\n\n`ajax` 请求数据，统一声明 `isLoading`,`isError` 变量记录状态\n\n","source":"_posts/vue-1.md","raw":"---\ntitle: Vue项目代码规范\ncomments: true\ndescription: 实际项目中Vue代码规范\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2018-03-29 00:00:00\n---\n\n# `Vue项目代码规范`\n\n## 文件命名\n-\t **目录名**: 小驼峰\n-\t **js文件名**: 全小写(可用.,-)\n-\t **组件名**: 大驼峰(页面也算组件)\n-\t **路由**: 全小写\n-\t **公共组件**: XXX-XXX\n## 文件夹命名规则\n\n- **由名词组成**\n- **单词只能有一个**\n- **命名采用小写**\n\n## 文件名称规则\n\n- **vue文件代表着页面的名字**\n- **放在页面文件夹之下**\n- **文件名尽量是名词**\n- **以大写开头的驼峰命名，开头的单词是模块的名字，例: OrderDetail,OrderList**\n- **常用结尾词有（Detail、Edit、List、Info、Report）**\n- **以View结尾的代表是页面或页面子组件 （CarListView,CarInfoView）**\n  \n## Vue页面结构\n\n```html\n  <template>\n    <div>\n\n      <!--必须在div中编写页面-->\n\n    </div>\n  </template>\n  <script>\n    export default {\n      components : {\n      },\n      data () {\n        return {\n        }\n      },\n\t    mounted() {\n      },\n      methods: {\n      },\n    }\n  </script>\n  <!--声明语言，并且组件内必须添加scoped-->\n  <style lang=\"less\" scoped>\n  </style>\n```\n  ## **方法声明顺序**\n  `components`\n\n  - name    首字母大写，大驼峰命名规则\n  - props\n  - components\n  - data\n  - filter\n  - computed\n  - watch\n  - created\n  - activited\n  - mounted\n  - beforeRouterEnter\n  - beforeRouteUpdate\n  - beforeRouterLeave\n  - methods\n\n  ## **页面**\n\n  ```html\n    <div class=\"page page-XXX\">\n\t    <header class=\"header\">\n\t    </header>\n\t    <div class=\"container\">\n\t    </div>\n\t    <footer class=\"footer\"></footer>\n    </div>\n\n  ```\n  每个页面最外层都会有一个`page、page-XXX`类名\n  每个页面结构类似\n\n\n  |部分|代码|\n  |---|:--:|\n  |头部|`<header class=\"header\"></header>`|\n  |身体 |`<div class=\"container\"></div>`|\n  |底部 |`<footer class=\"footer\"></footer>`|\n\n  ## **组件**\n  ```html\n    <div class=\"module-name\">\n\t    <div class=\"__hd\">\n\t    </div>\n\t    <div class=\"__bd\">\n\t    </div>\n\t    <div class=\"__ft\">\n\t    </div>\n    </div>\n  ```\n\n  每个组件结构类似\n\n\n  |部分|代码|\n  |---|:--:|\n  |头部|`<div class=\"__hd\"></div>`|\n  |身体 |`<div class=\"__bd\"></div>`|\n  |底部 |`<div class=\"__ft\"></div>`|\n\n ## **组件分类**\n  - 系统级组件\n  \n    这类组件俱备不同项目之间通用，通常包括一些基础级通用形组件。\n  - 页面级组件\n\n    通常只在一个项目中实现通用，不具备项目级的移植性。\n  \n  - 普通功能级组件\n    某个页面功能模块，不具备复用性，但是通过他可以实现业务功能的分离，降低耦合，以降低维护和分治目的。\n\n## **创建组件注意事项**\n\n  - 组件保证功能单一，不要一个组件兼顾多个功能(避免后期调整时候冗杂，增加代码耦合度)\n  - 通用组件传值，尽可能单个传递,多传几个。\n  - 每个组件尽可能预留一个slot，为后期拓展预留。\n\n## `vue`组件命名\n\n- 系统级、页面级通用组件放置于 `src` 下 `components` 目录。\n\n- 局部功能组件，存放于页面 `vue` 页面同级目录下的 `components` 目录下\n\n`view`文件夹下是由以页面为单位的文件夹或模块文件夹组成，放在 `src` 目录下，与`components` 和 `assets` 同级。\n\n**组件命名采用 大驼峰**\n\n## 方法命名规则\n\n**采用动宾短语格式命名，例如：**\n```md\ngood：\n jumpPage、openCarInfoDialog\n\nbad：\n go、nextPage、show、open、login\n```\n\n**数据操作方法以get、post开头，以 data 结尾**\n\n```md\ngood：\n getListData、postFormData\n\nbad：\n takeData、confirmData、getList、postForm\n```\n\n**事件方法以 on 开头，inital,refresh,render除外**\n\n```\n例如，onChange,onUserInput\n```\n\n**尽量使用常用单词开头 （set、get、open、close、jump）命名规则使用驼峰命名**\n\n\n**不在 `created` 和 `mouted` 之类的方法写逻辑，取 `ajax` 数据，**\n\n## data-props\n\n**`data props` 规则**\n\n使用 `data` 里的变量时请先在 `data` 里初始化\n\n`props` **指定类型**\n\n不命名多余数据，\n\n`ajax` 请求数据，统一声明 `isLoading`,`isError` 变量记录状态\n\n","slug":"vue-1","published":1,"updated":"2020-12-02T06:49:34.145Z","layout":"post","photos":[],"link":"","_id":"cki71waly0050tl9k7kmbtz80","content":"<h1 id=\"Vue项目代码规范\"><a href=\"#Vue项目代码规范\" class=\"headerlink\" title=\"Vue项目代码规范\"></a><code>Vue项目代码规范</code></h1><h2 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h2><ul>\n<li><p><strong>目录名</strong>: 小驼峰</p>\n</li>\n<li><p><strong>js文件名</strong>: 全小写(可用.,-)</p>\n</li>\n<li><p><strong>组件名</strong>: 大驼峰(页面也算组件)</p>\n</li>\n<li><p><strong>路由</strong>: 全小写</p>\n</li>\n<li><p><strong>公共组件</strong>: XXX-XXX</p>\n<h2 id=\"文件夹命名规则\"><a href=\"#文件夹命名规则\" class=\"headerlink\" title=\"文件夹命名规则\"></a>文件夹命名规则</h2></li>\n<li><p><strong>由名词组成</strong></p>\n</li>\n<li><p><strong>单词只能有一个</strong></p>\n</li>\n<li><p><strong>命名采用小写</strong></p>\n</li>\n</ul>\n<h2 id=\"文件名称规则\"><a href=\"#文件名称规则\" class=\"headerlink\" title=\"文件名称规则\"></a>文件名称规则</h2><ul>\n<li><strong>vue文件代表着页面的名字</strong></li>\n<li><strong>放在页面文件夹之下</strong></li>\n<li><strong>文件名尽量是名词</strong></li>\n<li><strong>以大写开头的驼峰命名，开头的单词是模块的名字，例: OrderDetail,OrderList</strong></li>\n<li><strong>常用结尾词有（Detail、Edit、List、Info、Report）</strong></li>\n<li><strong>以View结尾的代表是页面或页面子组件 （CarListView,CarInfoView）</strong></li>\n</ul>\n<h2 id=\"Vue页面结构\"><a href=\"#Vue页面结构\" class=\"headerlink\" title=\"Vue页面结构\"></a>Vue页面结构</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--必须在div中编写页面--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components : &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   mounted() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--声明语言，并且组件内必须添加scoped--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"less\"</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法声明顺序\"><a href=\"#方法声明顺序\" class=\"headerlink\" title=\"方法声明顺序\"></a><strong>方法声明顺序</strong></h2><p>  <code>components</code></p>\n<ul>\n<li><p>name    首字母大写，大驼峰命名规则</p>\n</li>\n<li><p>props</p>\n</li>\n<li><p>components</p>\n</li>\n<li><p>data</p>\n</li>\n<li><p>filter</p>\n</li>\n<li><p>computed</p>\n</li>\n<li><p>watch</p>\n</li>\n<li><p>created</p>\n</li>\n<li><p>activited</p>\n</li>\n<li><p>mounted</p>\n</li>\n<li><p>beforeRouterEnter</p>\n</li>\n<li><p>beforeRouteUpdate</p>\n</li>\n<li><p>beforeRouterLeave</p>\n</li>\n<li><p>methods</p>\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a><strong>页面</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page page-XXX\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>每个页面最外层都会有一个<code>page、page-XXX</code>类名<br>每个页面结构类似</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>头部</td>\n<td align=\"center\"><code>&lt;header class=&quot;header&quot;&gt;&lt;/header&gt;</code></td>\n</tr>\n<tr>\n<td>身体</td>\n<td align=\"center\"><code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>底部</td>\n<td align=\"center\"><code>&lt;footer class=&quot;footer&quot;&gt;&lt;/footer&gt;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a><strong>组件</strong></h2>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"module-name\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__hd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__bd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__ft\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>  每个组件结构类似</p>\n<table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>头部</td>\n<td align=\"center\"><code>&lt;div class=&quot;__hd&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>身体</td>\n<td align=\"center\"><code>&lt;div class=&quot;__bd&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>底部</td>\n<td align=\"center\"><code>&lt;div class=&quot;__ft&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"组件分类\"><a href=\"#组件分类\" class=\"headerlink\" title=\"组件分类\"></a><strong>组件分类</strong></h2><ul>\n<li><p>系统级组件</p>\n<p>这类组件俱备不同项目之间通用，通常包括一些基础级通用形组件。</p>\n</li>\n<li><p>页面级组件</p>\n<p>通常只在一个项目中实现通用，不具备项目级的移植性。</p>\n</li>\n<li><p>普通功能级组件<br>某个页面功能模块，不具备复用性，但是通过他可以实现业务功能的分离，降低耦合，以降低维护和分治目的。</p>\n</li>\n</ul>\n<h2 id=\"创建组件注意事项\"><a href=\"#创建组件注意事项\" class=\"headerlink\" title=\"创建组件注意事项\"></a><strong>创建组件注意事项</strong></h2><ul>\n<li>组件保证功能单一，不要一个组件兼顾多个功能(避免后期调整时候冗杂，增加代码耦合度)</li>\n<li>通用组件传值，尽可能单个传递,多传几个。</li>\n<li>每个组件尽可能预留一个slot，为后期拓展预留。</li>\n</ul>\n<h2 id=\"vue组件命名\"><a href=\"#vue组件命名\" class=\"headerlink\" title=\"vue组件命名\"></a><code>vue</code>组件命名</h2><ul>\n<li><p>系统级、页面级通用组件放置于 <code>src</code> 下 <code>components</code> 目录。</p>\n</li>\n<li><p>局部功能组件，存放于页面 <code>vue</code> 页面同级目录下的 <code>components</code> 目录下</p>\n</li>\n</ul>\n<p><code>view</code>文件夹下是由以页面为单位的文件夹或模块文件夹组成，放在 <code>src</code> 目录下，与<code>components</code> 和 <code>assets</code> 同级。</p>\n<p><strong>组件命名采用 大驼峰</strong></p>\n<h2 id=\"方法命名规则\"><a href=\"#方法命名规则\" class=\"headerlink\" title=\"方法命名规则\"></a>方法命名规则</h2><p><strong>采用动宾短语格式命名，例如：</strong></p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good：</span><br><span class=\"line\"> jumpPage、openCarInfoDialog</span><br><span class=\"line\"></span><br><span class=\"line\">bad：</span><br><span class=\"line\"> go、nextPage、show、open、login</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据操作方法以get、post开头，以 data 结尾</strong></p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good：</span><br><span class=\"line\"> getListData、postFormData</span><br><span class=\"line\"></span><br><span class=\"line\">bad：</span><br><span class=\"line\"> takeData、confirmData、getList、postForm</span><br></pre></td></tr></table></figure>\n\n<p><strong>事件方法以 on 开头，inital,refresh,render除外</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如，onChange,onUserInput</span><br></pre></td></tr></table></figure>\n\n<p><strong>尽量使用常用单词开头 （set、get、open、close、jump）命名规则使用驼峰命名</strong></p>\n<p><strong>不在 <code>created</code> 和 <code>mouted</code> 之类的方法写逻辑，取 <code>ajax</code> 数据，</strong></p>\n<h2 id=\"data-props\"><a href=\"#data-props\" class=\"headerlink\" title=\"data-props\"></a>data-props</h2><p><strong><code>data props</code> 规则</strong></p>\n<p>使用 <code>data</code> 里的变量时请先在 <code>data</code> 里初始化</p>\n<p><code>props</code> <strong>指定类型</strong></p>\n<p>不命名多余数据，</p>\n<p><code>ajax</code> 请求数据，统一声明 <code>isLoading</code>,<code>isError</code> 变量记录状态</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h1 id=\"Vue项目代码规范\"><a href=\"#Vue项目代码规范\" class=\"headerlink\" title=\"Vue项目代码规范\"></a><code>Vue项目代码规范</code></h1><h2 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h2><ul>\n<li><p><strong>目录名</strong>: 小驼峰</p>\n</li>\n<li><p><strong>js文件名</strong>: 全小写(可用.,-)</p>\n</li>\n<li><p><strong>组件名</strong>: 大驼峰(页面也算组件)</p>\n</li>\n<li><p><strong>路由</strong>: 全小写</p>\n</li>\n<li><p><strong>公共组件</strong>: XXX-XXX</p>\n<h2 id=\"文件夹命名规则\"><a href=\"#文件夹命名规则\" class=\"headerlink\" title=\"文件夹命名规则\"></a>文件夹命名规则</h2></li>\n<li><p><strong>由名词组成</strong></p>\n</li>\n<li><p><strong>单词只能有一个</strong></p>\n</li>\n<li><p><strong>命名采用小写</strong></p>\n</li>\n</ul>\n<h2 id=\"文件名称规则\"><a href=\"#文件名称规则\" class=\"headerlink\" title=\"文件名称规则\"></a>文件名称规则</h2><ul>\n<li><strong>vue文件代表着页面的名字</strong></li>\n<li><strong>放在页面文件夹之下</strong></li>\n<li><strong>文件名尽量是名词</strong></li>\n<li><strong>以大写开头的驼峰命名，开头的单词是模块的名字，例: OrderDetail,OrderList</strong></li>\n<li><strong>常用结尾词有（Detail、Edit、List、Info、Report）</strong></li>\n<li><strong>以View结尾的代表是页面或页面子组件 （CarListView,CarInfoView）</strong></li>\n</ul>\n<h2 id=\"Vue页面结构\"><a href=\"#Vue页面结构\" class=\"headerlink\" title=\"Vue页面结构\"></a>Vue页面结构</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--必须在div中编写页面--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components : &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   mounted() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--声明语言，并且组件内必须添加scoped--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"less\"</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法声明顺序\"><a href=\"#方法声明顺序\" class=\"headerlink\" title=\"方法声明顺序\"></a><strong>方法声明顺序</strong></h2><p>  <code>components</code></p>\n<ul>\n<li><p>name    首字母大写，大驼峰命名规则</p>\n</li>\n<li><p>props</p>\n</li>\n<li><p>components</p>\n</li>\n<li><p>data</p>\n</li>\n<li><p>filter</p>\n</li>\n<li><p>computed</p>\n</li>\n<li><p>watch</p>\n</li>\n<li><p>created</p>\n</li>\n<li><p>activited</p>\n</li>\n<li><p>mounted</p>\n</li>\n<li><p>beforeRouterEnter</p>\n</li>\n<li><p>beforeRouteUpdate</p>\n</li>\n<li><p>beforeRouterLeave</p>\n</li>\n<li><p>methods</p>\n<h2 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a><strong>页面</strong></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page page-XXX\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>每个页面最外层都会有一个<code>page、page-XXX</code>类名<br>每个页面结构类似</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>头部</td>\n<td align=\"center\"><code>&lt;header class=&quot;header&quot;&gt;&lt;/header&gt;</code></td>\n</tr>\n<tr>\n<td>身体</td>\n<td align=\"center\"><code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>底部</td>\n<td align=\"center\"><code>&lt;footer class=&quot;footer&quot;&gt;&lt;/footer&gt;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a><strong>组件</strong></h2>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"module-name\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__hd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__bd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"__ft\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>  每个组件结构类似</p>\n<table>\n<thead>\n<tr>\n<th>部分</th>\n<th align=\"center\">代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>头部</td>\n<td align=\"center\"><code>&lt;div class=&quot;__hd&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>身体</td>\n<td align=\"center\"><code>&lt;div class=&quot;__bd&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>底部</td>\n<td align=\"center\"><code>&lt;div class=&quot;__ft&quot;&gt;&lt;/div&gt;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"组件分类\"><a href=\"#组件分类\" class=\"headerlink\" title=\"组件分类\"></a><strong>组件分类</strong></h2><ul>\n<li><p>系统级组件</p>\n<p>这类组件俱备不同项目之间通用，通常包括一些基础级通用形组件。</p>\n</li>\n<li><p>页面级组件</p>\n<p>通常只在一个项目中实现通用，不具备项目级的移植性。</p>\n</li>\n<li><p>普通功能级组件<br>某个页面功能模块，不具备复用性，但是通过他可以实现业务功能的分离，降低耦合，以降低维护和分治目的。</p>\n</li>\n</ul>\n<h2 id=\"创建组件注意事项\"><a href=\"#创建组件注意事项\" class=\"headerlink\" title=\"创建组件注意事项\"></a><strong>创建组件注意事项</strong></h2><ul>\n<li>组件保证功能单一，不要一个组件兼顾多个功能(避免后期调整时候冗杂，增加代码耦合度)</li>\n<li>通用组件传值，尽可能单个传递,多传几个。</li>\n<li>每个组件尽可能预留一个slot，为后期拓展预留。</li>\n</ul>\n<h2 id=\"vue组件命名\"><a href=\"#vue组件命名\" class=\"headerlink\" title=\"vue组件命名\"></a><code>vue</code>组件命名</h2><ul>\n<li><p>系统级、页面级通用组件放置于 <code>src</code> 下 <code>components</code> 目录。</p>\n</li>\n<li><p>局部功能组件，存放于页面 <code>vue</code> 页面同级目录下的 <code>components</code> 目录下</p>\n</li>\n</ul>\n<p><code>view</code>文件夹下是由以页面为单位的文件夹或模块文件夹组成，放在 <code>src</code> 目录下，与<code>components</code> 和 <code>assets</code> 同级。</p>\n<p><strong>组件命名采用 大驼峰</strong></p>\n<h2 id=\"方法命名规则\"><a href=\"#方法命名规则\" class=\"headerlink\" title=\"方法命名规则\"></a>方法命名规则</h2><p><strong>采用动宾短语格式命名，例如：</strong></p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good：</span><br><span class=\"line\"> jumpPage、openCarInfoDialog</span><br><span class=\"line\"></span><br><span class=\"line\">bad：</span><br><span class=\"line\"> go、nextPage、show、open、login</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据操作方法以get、post开头，以 data 结尾</strong></p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good：</span><br><span class=\"line\"> getListData、postFormData</span><br><span class=\"line\"></span><br><span class=\"line\">bad：</span><br><span class=\"line\"> takeData、confirmData、getList、postForm</span><br></pre></td></tr></table></figure>\n\n<p><strong>事件方法以 on 开头，inital,refresh,render除外</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如，onChange,onUserInput</span><br></pre></td></tr></table></figure>\n\n<p><strong>尽量使用常用单词开头 （set、get、open、close、jump）命名规则使用驼峰命名</strong></p>\n<p><strong>不在 <code>created</code> 和 <code>mouted</code> 之类的方法写逻辑，取 <code>ajax</code> 数据，</strong></p>\n<h2 id=\"data-props\"><a href=\"#data-props\" class=\"headerlink\" title=\"data-props\"></a>data-props</h2><p><strong><code>data props</code> 规则</strong></p>\n<p>使用 <code>data</code> 里的变量时请先在 <code>data</code> 里初始化</p>\n<p><code>props</code> <strong>指定类型</strong></p>\n<p>不命名多余数据，</p>\n<p><code>ajax</code> 请求数据，统一声明 <code>isLoading</code>,<code>isError</code> 变量记录状态</p>\n"},{"title":"Vue.js进阶","comments":1,"description":"Vue.js基础知识","keywords":"vue, Vue.js","date":"2017-07-20T04:23:10.000Z","_content":"\n## v-for把一个数组对应为一组元素\n\nv-for指令需要使用`item in items`。`items`是源数据组，`item`是数组元素迭代的别名。 `item in items`中的`in`可以换成`of`。\n\n```html\n<ul id=\"box1\">\n    <li v-for=\"item in items\">{{item}}</li>\n</ul>\n```\n\n```js\nvar box1 = new Vue({\n    el:\"#box1\",\n    data:{\n        items:[\n            {电脑:\"10000\"},\n            {手机:\"5000\"},\n            {自行车:\"20000\"}\n        ]\n    }\n});\n```\n\n渲染结果\n\n{ \"电脑\": \"10000\" }\n{ \"手机\": \"5000\" }\n{ \"自行车\": \"20000\" }\n\nv-for还支持第二个参数作为当前项的索引。\n\n```html\nul id=\"box2\">\n    <li v-for=\"(item,index) of items\">{{item}}----{{index}}</li>\n</ul>\n```\n\n```js\nvar box2 = new Vue({\n    el:\"#box2\",\n    data:{\n        items:[\n            {电脑:\"10000\"},\n            {手机:\"5000\"},\n            {自行车:\"2000\"}\n        ]\n    }\n});\n```\n\n{ \"电脑\": \"10000\" }----0\n{ \"手机\": \"5000\" }----1\n{ \"自行车\": \"2000\" }----2\n \n\n## 一个对象的v-for\n\n```html\n<ul id=\"box3\">\n    <li v-for=\"item in items\">{{item}}</li>\n</ul>\n```\n\n```js\nvar box3 = new Vue({\n    el:\"#box3\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n10000\n5000\n2000\n \n第二个参数为参数的键名。\n\n```html\n<ul id=\"box4\">\n    <li v-for=\"(item,key) in items\">{{key}}---{{item}}</li>\n</ul>\n```\n\n```js\nvar box4 = new Vue({\n    el:\"#box4\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n电脑---10000\n手机---5000\n自行车---2000\n \n\n第三个参数为索引值：\n\n```html\n<ul id=\"box5\">\n    <li v-for=\"(item,key,index) in items\" :key=\"item.id\">{{index}}---{{key}}---{{item}}</li>\n</ul>\n```\n\n```js\nvar box5 = new Vue({\n    el:\"#box5\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n0---电脑---10000\n1---手机---5000\n2---自行车---2000\n \n\n## 数组更新检测\n\nVue包含一组观察数组变异的方法，所以他们也将会触发视图更新。\n\n```\npush()\npop()\nshift()\nunshift()\nsplice()\nsort()\nreverse()\n```\n\n\n### 替换数组\n\n变异方法 (mutation method)，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法， 例如：`filter()`, `concat()` 和 `slice()` 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。\n\n### 注意事项\n\nVue不能检测以下变动的数组。\n\n1.利用索引值设置一个项的时候，例如：\n\n`box1.items[indexOfItem] = newValue `\n\n解决的办法：\n\n`Vue.set(box1.items, indexOfItem, newValue)`\n\n或者是`box1.items.splice(indexOfItem,\n\nnewValue)`；这两种方法都可以。\n\n2.修改数组的长度`box1.items.length = newLength`\n\n`box1.items.splice(newLength)`;即可解决。\n\n## 对象更改检测注意事项\n\nVue不能检测对象的属性的添加与删减。\n\n```js\nvar box = new Vue({\n    data:{\n        a:1 //是响应式\n    }\n})\n\nbox1.b = 2; //不是响应式\n```\n\n对于已经创建实例Vue不能动态的添加根级别的响应式属性。但是可以通过 `Vue.set(obj,key,value)`方法向对象添加响应式属性。\n\n```js\nvar vm = new Vue({\n    data:{\n        userProfile:{\n            name:\"hbb\"\n        }\n    }\n})\n```\n\n可以向里面添加age属性镶嵌到userProfile对象:\n\n`Vue.set(vm.userProfile,'age',27)`;\n\n\n`vm.$set` 实例方法，它只是全局 `Vue.set` 的别名；\n\n`this.$set(vm.userProfile,'age',27)`;\n\n```html\n<ul id=\"vm\">\n    <li v-for=\"item in userProfile\" :key=\"item.id\">{{item}}</li>\n</ul>\n```\n\n```js\nvar vm = new Vue({\n    el:\"#vm\",\n    data:{\n        userProfile:{\n            name:\"hbb\"\n        }\n    }\n});\nVue.set(vm.userProfile,'age','27');\n```\n\nhbb\n27\n\n如果想要对已有的对象赋予多个属性，比如使用`Object.assign()`或者`_.extend()`。\n\n```js\nthis.userProfile = Object.assign({},this.userProfile ,{ leg:\"long\", eye:\"big\" })；\n```\n\n## 显示过滤或排序的效果\n\n有时候我们想要显示一个数组的过滤或者排序的副本 而不改变原数据，可以使用methods方法。\n\n```html\n<ul id=\"box7\">\n    <li v-for=\"n in even(num)\" :key=\"n.id\">{{n}}</li>\n</ul>\n```\n\n```js\nvar box7 = new Vue({\n    el:\"#box7\",\n    data:{\n        num:[1,2,3,4,5,6,7,8,9]\n    },\n    methods:{\n        even:(num)=>{\n            return num.filter(function (num) {\n                  return num%2===0;\n            })\n        }\n    }\n});\n```\n\n2\n4\n6\n8\n \n\n## 一段取值范围的v-for\n\n```html\n<ul id=\"box8\">\n    <li v-for=\"n in 10\" :key=\"n.id\">{{n}}</li>\n</ul>\n```\n\nvar box8 = new Vue({\n    el:\"#box8\",\n    data:{\n    },\n});\n```\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n \n\n## 一个组件的v-for\n\n```html\n<div id=\"todo-list\">\n    <input type=\"text\" placeholder=\"Add a todo\" v-model=\"newTodoText\" v-on:keyup.enter=\"addNewTodo\">\n    <ul>\n        <li is=\"todo-item\" v-for=\"(todo,index) in todos\" v-bind:key=\"todo.id\" v-bind:title=\"todo.title\" v-on:remove=\"todos.splice(index,1)\"></li>\n    </ul>\n</div>\n```\n\n```js\nVue.component(\"todo-item\",{\n        template:'<li>{{title}}<button v-on:click=\"$emit(\\'remove\\')\">X</button></li>',\n        props:[\"title\"]\n    });\nnew Vue({\n    el:\"#todo-list\",\n    data:{\n        newTodoText:'',\n        todos:[\n            {\n                id:1,\n                title:\"Do the dishes\"\n            },\n            {\n                id:2,\n                title:\"Take out the trash\"\n            },\n            {\n                id:3,\n                title:\"Mow the lawn\"\n            }\n        ],\n        nextTodoId:4\n    },\n    methods:{\n        addNewTodo(){\n            this.todos.push({\n                id:this.nextTodoId++,\n                title:this.newTodoText\n            });\n            this.newTodoText = \"\"\n        }\n    }\n})\n```\n\n备忘录\n\nAdd a todo\n\n[点击查看](http://www.hbbaly.com/wp-content/themes/blog/case/memo.html)\n\n","source":"_posts/vue-4.md","raw":"---\ntitle: Vue.js进阶\ncomments: true\ndescription: Vue.js基础知识\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-07-20 12:23:10\n---\n\n## v-for把一个数组对应为一组元素\n\nv-for指令需要使用`item in items`。`items`是源数据组，`item`是数组元素迭代的别名。 `item in items`中的`in`可以换成`of`。\n\n```html\n<ul id=\"box1\">\n    <li v-for=\"item in items\">{{item}}</li>\n</ul>\n```\n\n```js\nvar box1 = new Vue({\n    el:\"#box1\",\n    data:{\n        items:[\n            {电脑:\"10000\"},\n            {手机:\"5000\"},\n            {自行车:\"20000\"}\n        ]\n    }\n});\n```\n\n渲染结果\n\n{ \"电脑\": \"10000\" }\n{ \"手机\": \"5000\" }\n{ \"自行车\": \"20000\" }\n\nv-for还支持第二个参数作为当前项的索引。\n\n```html\nul id=\"box2\">\n    <li v-for=\"(item,index) of items\">{{item}}----{{index}}</li>\n</ul>\n```\n\n```js\nvar box2 = new Vue({\n    el:\"#box2\",\n    data:{\n        items:[\n            {电脑:\"10000\"},\n            {手机:\"5000\"},\n            {自行车:\"2000\"}\n        ]\n    }\n});\n```\n\n{ \"电脑\": \"10000\" }----0\n{ \"手机\": \"5000\" }----1\n{ \"自行车\": \"2000\" }----2\n \n\n## 一个对象的v-for\n\n```html\n<ul id=\"box3\">\n    <li v-for=\"item in items\">{{item}}</li>\n</ul>\n```\n\n```js\nvar box3 = new Vue({\n    el:\"#box3\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n10000\n5000\n2000\n \n第二个参数为参数的键名。\n\n```html\n<ul id=\"box4\">\n    <li v-for=\"(item,key) in items\">{{key}}---{{item}}</li>\n</ul>\n```\n\n```js\nvar box4 = new Vue({\n    el:\"#box4\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n电脑---10000\n手机---5000\n自行车---2000\n \n\n第三个参数为索引值：\n\n```html\n<ul id=\"box5\">\n    <li v-for=\"(item,key,index) in items\" :key=\"item.id\">{{index}}---{{key}}---{{item}}</li>\n</ul>\n```\n\n```js\nvar box5 = new Vue({\n    el:\"#box5\",\n    data:{\n        items:{\n            电脑:\"10000\",\n            手机:\"5000\",\n            自行车:\"2000\"\n        }\n    }\n});\n```\n\n0---电脑---10000\n1---手机---5000\n2---自行车---2000\n \n\n## 数组更新检测\n\nVue包含一组观察数组变异的方法，所以他们也将会触发视图更新。\n\n```\npush()\npop()\nshift()\nunshift()\nsplice()\nsort()\nreverse()\n```\n\n\n### 替换数组\n\n变异方法 (mutation method)，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法， 例如：`filter()`, `concat()` 和 `slice()` 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。\n\n### 注意事项\n\nVue不能检测以下变动的数组。\n\n1.利用索引值设置一个项的时候，例如：\n\n`box1.items[indexOfItem] = newValue `\n\n解决的办法：\n\n`Vue.set(box1.items, indexOfItem, newValue)`\n\n或者是`box1.items.splice(indexOfItem,\n\nnewValue)`；这两种方法都可以。\n\n2.修改数组的长度`box1.items.length = newLength`\n\n`box1.items.splice(newLength)`;即可解决。\n\n## 对象更改检测注意事项\n\nVue不能检测对象的属性的添加与删减。\n\n```js\nvar box = new Vue({\n    data:{\n        a:1 //是响应式\n    }\n})\n\nbox1.b = 2; //不是响应式\n```\n\n对于已经创建实例Vue不能动态的添加根级别的响应式属性。但是可以通过 `Vue.set(obj,key,value)`方法向对象添加响应式属性。\n\n```js\nvar vm = new Vue({\n    data:{\n        userProfile:{\n            name:\"hbb\"\n        }\n    }\n})\n```\n\n可以向里面添加age属性镶嵌到userProfile对象:\n\n`Vue.set(vm.userProfile,'age',27)`;\n\n\n`vm.$set` 实例方法，它只是全局 `Vue.set` 的别名；\n\n`this.$set(vm.userProfile,'age',27)`;\n\n```html\n<ul id=\"vm\">\n    <li v-for=\"item in userProfile\" :key=\"item.id\">{{item}}</li>\n</ul>\n```\n\n```js\nvar vm = new Vue({\n    el:\"#vm\",\n    data:{\n        userProfile:{\n            name:\"hbb\"\n        }\n    }\n});\nVue.set(vm.userProfile,'age','27');\n```\n\nhbb\n27\n\n如果想要对已有的对象赋予多个属性，比如使用`Object.assign()`或者`_.extend()`。\n\n```js\nthis.userProfile = Object.assign({},this.userProfile ,{ leg:\"long\", eye:\"big\" })；\n```\n\n## 显示过滤或排序的效果\n\n有时候我们想要显示一个数组的过滤或者排序的副本 而不改变原数据，可以使用methods方法。\n\n```html\n<ul id=\"box7\">\n    <li v-for=\"n in even(num)\" :key=\"n.id\">{{n}}</li>\n</ul>\n```\n\n```js\nvar box7 = new Vue({\n    el:\"#box7\",\n    data:{\n        num:[1,2,3,4,5,6,7,8,9]\n    },\n    methods:{\n        even:(num)=>{\n            return num.filter(function (num) {\n                  return num%2===0;\n            })\n        }\n    }\n});\n```\n\n2\n4\n6\n8\n \n\n## 一段取值范围的v-for\n\n```html\n<ul id=\"box8\">\n    <li v-for=\"n in 10\" :key=\"n.id\">{{n}}</li>\n</ul>\n```\n\nvar box8 = new Vue({\n    el:\"#box8\",\n    data:{\n    },\n});\n```\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n \n\n## 一个组件的v-for\n\n```html\n<div id=\"todo-list\">\n    <input type=\"text\" placeholder=\"Add a todo\" v-model=\"newTodoText\" v-on:keyup.enter=\"addNewTodo\">\n    <ul>\n        <li is=\"todo-item\" v-for=\"(todo,index) in todos\" v-bind:key=\"todo.id\" v-bind:title=\"todo.title\" v-on:remove=\"todos.splice(index,1)\"></li>\n    </ul>\n</div>\n```\n\n```js\nVue.component(\"todo-item\",{\n        template:'<li>{{title}}<button v-on:click=\"$emit(\\'remove\\')\">X</button></li>',\n        props:[\"title\"]\n    });\nnew Vue({\n    el:\"#todo-list\",\n    data:{\n        newTodoText:'',\n        todos:[\n            {\n                id:1,\n                title:\"Do the dishes\"\n            },\n            {\n                id:2,\n                title:\"Take out the trash\"\n            },\n            {\n                id:3,\n                title:\"Mow the lawn\"\n            }\n        ],\n        nextTodoId:4\n    },\n    methods:{\n        addNewTodo(){\n            this.todos.push({\n                id:this.nextTodoId++,\n                title:this.newTodoText\n            });\n            this.newTodoText = \"\"\n        }\n    }\n})\n```\n\n备忘录\n\nAdd a todo\n\n[点击查看](http://www.hbbaly.com/wp-content/themes/blog/case/memo.html)\n\n","slug":"vue-4","published":1,"updated":"2020-12-02T06:49:34.147Z","layout":"post","photos":[],"link":"","_id":"cki71waly0053tl9kks5ki3fd","content":"<h2 id=\"v-for把一个数组对应为一组元素\"><a href=\"#v-for把一个数组对应为一组元素\" class=\"headerlink\" title=\"v-for把一个数组对应为一组元素\"></a>v-for把一个数组对应为一组元素</h2><p>v-for指令需要使用<code>item in items</code>。<code>items</code>是源数据组，<code>item</code>是数组元素迭代的别名。 <code>item in items</code>中的<code>in</code>可以换成<code>of</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box1\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:[</span><br><span class=\"line\">            &#123;电脑:<span class=\"string\">\"10000\"</span>&#125;,</span><br><span class=\"line\">            &#123;手机:<span class=\"string\">\"5000\"</span>&#125;,</span><br><span class=\"line\">            &#123;自行车:<span class=\"string\">\"20000\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<p>{ “电脑”: “10000” }<br>{ “手机”: “5000” }<br>{ “自行车”: “20000” }</p>\n<p>v-for还支持第二个参数作为当前项的索引。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul id=\"box2\"&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) of items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box2\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:[</span><br><span class=\"line\">            &#123;电脑:<span class=\"string\">\"10000\"</span>&#125;,</span><br><span class=\"line\">            &#123;手机:<span class=\"string\">\"5000\"</span>&#125;,</span><br><span class=\"line\">            &#123;自行车:<span class=\"string\">\"2000\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>{ “电脑”: “10000” }—-0<br>{ “手机”: “5000” }—-1<br>{ “自行车”: “2000” }—-2</p>\n<h2 id=\"一个对象的v-for\"><a href=\"#一个对象的v-for\" class=\"headerlink\" title=\"一个对象的v-for\"></a>一个对象的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box3 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box3\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>10000<br>5000<br>2000</p>\n<p>第二个参数为参数的键名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box4\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,key) in items\"</span>&gt;</span>&#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box4 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>电脑—10000<br>手机—5000<br>自行车—2000</p>\n<p>第三个参数为索引值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box5\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,key,index) in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box5 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box5\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>0—电脑—10000<br>1—手机—5000<br>2—自行车—2000</p>\n<h2 id=\"数组更新检测\"><a href=\"#数组更新检测\" class=\"headerlink\" title=\"数组更新检测\"></a>数组更新检测</h2><p>Vue包含一组观察数组变异的方法，所以他们也将会触发视图更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push()</span><br><span class=\"line\">pop()</span><br><span class=\"line\">shift()</span><br><span class=\"line\">unshift()</span><br><span class=\"line\">splice()</span><br><span class=\"line\">sort()</span><br><span class=\"line\">reverse()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换数组\"><a href=\"#替换数组\" class=\"headerlink\" title=\"替换数组\"></a>替换数组</h3><p>变异方法 (mutation method)，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法， 例如：<code>filter()</code>, <code>concat()</code> 和 <code>slice()</code> 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>Vue不能检测以下变动的数组。</p>\n<p>1.利用索引值设置一个项的时候，例如：</p>\n<p><code>box1.items[indexOfItem] = newValue</code></p>\n<p>解决的办法：</p>\n<p><code>Vue.set(box1.items, indexOfItem, newValue)</code></p>\n<p>或者是`box1.items.splice(indexOfItem,</p>\n<p>newValue)`；这两种方法都可以。</p>\n<p>2.修改数组的长度<code>box1.items.length = newLength</code></p>\n<p><code>box1.items.splice(newLength)</code>;即可解决。</p>\n<h2 id=\"对象更改检测注意事项\"><a href=\"#对象更改检测注意事项\" class=\"headerlink\" title=\"对象更改检测注意事项\"></a>对象更改检测注意事项</h2><p>Vue不能检测对象的属性的添加与删减。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"number\">1</span> <span class=\"comment\">//是响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">box1.b = <span class=\"number\">2</span>; <span class=\"comment\">//不是响应式</span></span><br></pre></td></tr></table></figure>\n\n<p>对于已经创建实例Vue不能动态的添加根级别的响应式属性。但是可以通过 <code>Vue.set(obj,key,value)</code>方法向对象添加响应式属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userProfile:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">\"hbb\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以向里面添加age属性镶嵌到userProfile对象:</p>\n<p><code>Vue.set(vm.userProfile,&#39;age&#39;,27)</code>;</p>\n<p><code>vm.$set</code> 实例方法，它只是全局 <code>Vue.set</code> 的别名；</p>\n<p><code>this.$set(vm.userProfile,&#39;age&#39;,27)</code>;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in userProfile\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#vm\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userProfile:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">\"hbb\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.set(vm.userProfile,<span class=\"string\">'age'</span>,<span class=\"string\">'27'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>hbb<br>27</p>\n<p>如果想要对已有的对象赋予多个属性，比如使用<code>Object.assign()</code>或者<code>_.extend()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.userProfile = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,<span class=\"keyword\">this</span>.userProfile ,&#123; <span class=\"attr\">leg</span>:<span class=\"string\">\"long\"</span>, <span class=\"attr\">eye</span>:<span class=\"string\">\"big\"</span> &#125;)；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示过滤或排序的效果\"><a href=\"#显示过滤或排序的效果\" class=\"headerlink\" title=\"显示过滤或排序的效果\"></a>显示过滤或排序的效果</h2><p>有时候我们想要显示一个数组的过滤或者排序的副本 而不改变原数据，可以使用methods方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box7\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(num)\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"n.id\"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box7 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box7\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        num:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        even:<span class=\"function\">(<span class=\"params\">num</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span>===<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2<br>4<br>6<br>8</p>\n<h2 id=\"一段取值范围的v-for\"><a href=\"#一段取值范围的v-for\" class=\"headerlink\" title=\"一段取值范围的v-for\"></a>一段取值范围的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"n.id\"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>var box8 = new Vue({<br>    el:”#box8”,<br>    data:{<br>    },<br>});</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h2 id=\"一个组件的v-for\"><a href=\"#一个组件的v-for\" class=\"headerlink\" title=\"一个组件的v-for\"></a>一个组件的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Add a todo\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"addNewTodo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo,index) in todos\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo.title\"</span> <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index,1)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">\"todo-item\"</span>,&#123;</span><br><span class=\"line\">        template:<span class=\"string\">'&lt;li&gt;&#123;&#123;title&#125;&#125;&lt;button v-on:click=\"$emit(\\'remove\\')\"&gt;X&lt;/button&gt;&lt;/li&gt;'</span>,</span><br><span class=\"line\">        props:[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#todo-list\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        newTodoText:<span class=\"string\">''</span>,</span><br><span class=\"line\">        todos:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">1</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Do the dishes\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">2</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Take out the trash\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">3</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Mow the lawn\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        nextTodoId:<span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        addNewTodo()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.todos.push(&#123;</span><br><span class=\"line\">                id:<span class=\"keyword\">this</span>.nextTodoId++,</span><br><span class=\"line\">                title:<span class=\"keyword\">this</span>.newTodoText</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>备忘录</p>\n<p>Add a todo</p>\n<p><a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/memo.html\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"v-for把一个数组对应为一组元素\"><a href=\"#v-for把一个数组对应为一组元素\" class=\"headerlink\" title=\"v-for把一个数组对应为一组元素\"></a>v-for把一个数组对应为一组元素</h2><p>v-for指令需要使用<code>item in items</code>。<code>items</code>是源数据组，<code>item</code>是数组元素迭代的别名。 <code>item in items</code>中的<code>in</code>可以换成<code>of</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box1\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:[</span><br><span class=\"line\">            &#123;电脑:<span class=\"string\">\"10000\"</span>&#125;,</span><br><span class=\"line\">            &#123;手机:<span class=\"string\">\"5000\"</span>&#125;,</span><br><span class=\"line\">            &#123;自行车:<span class=\"string\">\"20000\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果</p>\n<p>{ “电脑”: “10000” }<br>{ “手机”: “5000” }<br>{ “自行车”: “20000” }</p>\n<p>v-for还支持第二个参数作为当前项的索引。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul id=\"box2\"&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) of items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box2\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:[</span><br><span class=\"line\">            &#123;电脑:<span class=\"string\">\"10000\"</span>&#125;,</span><br><span class=\"line\">            &#123;手机:<span class=\"string\">\"5000\"</span>&#125;,</span><br><span class=\"line\">            &#123;自行车:<span class=\"string\">\"2000\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>{ “电脑”: “10000” }—-0<br>{ “手机”: “5000” }—-1<br>{ “自行车”: “2000” }—-2</p>\n<h2 id=\"一个对象的v-for\"><a href=\"#一个对象的v-for\" class=\"headerlink\" title=\"一个对象的v-for\"></a>一个对象的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box3 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box3\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>10000<br>5000<br>2000</p>\n<p>第二个参数为参数的键名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box4\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,key) in items\"</span>&gt;</span>&#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box4 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>电脑—10000<br>手机—5000<br>自行车—2000</p>\n<p>第三个参数为索引值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box5\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,key,index) in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box5 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box5\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        items:&#123;</span><br><span class=\"line\">            电脑:<span class=\"string\">\"10000\"</span>,</span><br><span class=\"line\">            手机:<span class=\"string\">\"5000\"</span>,</span><br><span class=\"line\">            自行车:<span class=\"string\">\"2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>0—电脑—10000<br>1—手机—5000<br>2—自行车—2000</p>\n<h2 id=\"数组更新检测\"><a href=\"#数组更新检测\" class=\"headerlink\" title=\"数组更新检测\"></a>数组更新检测</h2><p>Vue包含一组观察数组变异的方法，所以他们也将会触发视图更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push()</span><br><span class=\"line\">pop()</span><br><span class=\"line\">shift()</span><br><span class=\"line\">unshift()</span><br><span class=\"line\">splice()</span><br><span class=\"line\">sort()</span><br><span class=\"line\">reverse()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换数组\"><a href=\"#替换数组\" class=\"headerlink\" title=\"替换数组\"></a>替换数组</h3><p>变异方法 (mutation method)，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法， 例如：<code>filter()</code>, <code>concat()</code> 和 <code>slice()</code> 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>Vue不能检测以下变动的数组。</p>\n<p>1.利用索引值设置一个项的时候，例如：</p>\n<p><code>box1.items[indexOfItem] = newValue</code></p>\n<p>解决的办法：</p>\n<p><code>Vue.set(box1.items, indexOfItem, newValue)</code></p>\n<p>或者是`box1.items.splice(indexOfItem,</p>\n<p>newValue)`；这两种方法都可以。</p>\n<p>2.修改数组的长度<code>box1.items.length = newLength</code></p>\n<p><code>box1.items.splice(newLength)</code>;即可解决。</p>\n<h2 id=\"对象更改检测注意事项\"><a href=\"#对象更改检测注意事项\" class=\"headerlink\" title=\"对象更改检测注意事项\"></a>对象更改检测注意事项</h2><p>Vue不能检测对象的属性的添加与删减。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"number\">1</span> <span class=\"comment\">//是响应式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">box1.b = <span class=\"number\">2</span>; <span class=\"comment\">//不是响应式</span></span><br></pre></td></tr></table></figure>\n\n<p>对于已经创建实例Vue不能动态的添加根级别的响应式属性。但是可以通过 <code>Vue.set(obj,key,value)</code>方法向对象添加响应式属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userProfile:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">\"hbb\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以向里面添加age属性镶嵌到userProfile对象:</p>\n<p><code>Vue.set(vm.userProfile,&#39;age&#39;,27)</code>;</p>\n<p><code>vm.$set</code> 实例方法，它只是全局 <code>Vue.set</code> 的别名；</p>\n<p><code>this.$set(vm.userProfile,&#39;age&#39;,27)</code>;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in userProfile\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#vm\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        userProfile:&#123;</span><br><span class=\"line\">            name:<span class=\"string\">\"hbb\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.set(vm.userProfile,<span class=\"string\">'age'</span>,<span class=\"string\">'27'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>hbb<br>27</p>\n<p>如果想要对已有的对象赋予多个属性，比如使用<code>Object.assign()</code>或者<code>_.extend()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.userProfile = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,<span class=\"keyword\">this</span>.userProfile ,&#123; <span class=\"attr\">leg</span>:<span class=\"string\">\"long\"</span>, <span class=\"attr\">eye</span>:<span class=\"string\">\"big\"</span> &#125;)；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示过滤或排序的效果\"><a href=\"#显示过滤或排序的效果\" class=\"headerlink\" title=\"显示过滤或排序的效果\"></a>显示过滤或排序的效果</h2><p>有时候我们想要显示一个数组的过滤或者排序的副本 而不改变原数据，可以使用methods方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box7\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(num)\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"n.id\"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box7 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#box7\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        num:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        even:<span class=\"function\">(<span class=\"params\">num</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span>===<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2<br>4<br>6<br>8</p>\n<h2 id=\"一段取值范围的v-for\"><a href=\"#一段取值范围的v-for\" class=\"headerlink\" title=\"一段取值范围的v-for\"></a>一段取值范围的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"n.id\"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>var box8 = new Vue({<br>    el:”#box8”,<br>    data:{<br>    },<br>});</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>\n<h2 id=\"一个组件的v-for\"><a href=\"#一个组件的v-for\" class=\"headerlink\" title=\"一个组件的v-for\"></a>一个组件的v-for</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Add a todo\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"addNewTodo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo,index) in todos\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo.title\"</span> <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index,1)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">\"todo-item\"</span>,&#123;</span><br><span class=\"line\">        template:<span class=\"string\">'&lt;li&gt;&#123;&#123;title&#125;&#125;&lt;button v-on:click=\"$emit(\\'remove\\')\"&gt;X&lt;/button&gt;&lt;/li&gt;'</span>,</span><br><span class=\"line\">        props:[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">\"#todo-list\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        newTodoText:<span class=\"string\">''</span>,</span><br><span class=\"line\">        todos:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">1</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Do the dishes\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">2</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Take out the trash\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id:<span class=\"number\">3</span>,</span><br><span class=\"line\">                title:<span class=\"string\">\"Mow the lawn\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        nextTodoId:<span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        addNewTodo()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.todos.push(&#123;</span><br><span class=\"line\">                id:<span class=\"keyword\">this</span>.nextTodoId++,</span><br><span class=\"line\">                title:<span class=\"keyword\">this</span>.newTodoText</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>备忘录</p>\n<p>Add a todo</p>\n<p><a href=\"http://www.hbbaly.com/wp-content/themes/blog/case/memo.html\" target=\"_blank\" rel=\"noopener\">点击查看</a></p>\n"},{"title":"父组件与子组件的通信","comments":1,"description":"Vue.js基础知识","keywords":"vue, Vue.js","date":"2017-07-25T01:58:40.000Z","_content":"\n## 父组件向子组件传递参数\n\n### 配置路由\n\n首先在`components`文件夹内创建一个`child.vue`文件,并且修改`router`文件夹内的`index.js`文件：\n\n首先引入`child.vue`组件，之后配置路由\n\n```js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\nimport Child1 from '@/components/child'    //引入child.vue\nVue.use(Router)\nexport default new Router({\nroutes: [\n    {\n        path: '/',\n        name: 'HelloWorld',\n        component: HelloWorld,\n    },\n    {                    //配置路由\n       path:'/child',\n       name:'child',\n       component:Child1\n    }\n]\n})\n```\n\n### 编辑child.vue\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n```\n\n```js\n<script>\nexport default {\n  name: 'child',\n  props:['msg'],    //父组件向子组件传递\n  data () {\n    return {\n    }\n  },\n}\n</script>\n```\n### 编辑父组件\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <Child :msg='msg'></Child>\n  </div>\n</template>\n```\n\n```js\n<script>\nimport Child from './child'\nexport default {\n  name: 'HelloWorld',\n  components:{\n    Child\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App',\n    }\n  }\n}\n</script>\n```\n\n## 子组件向父组件通信\n\n通过`$emit`传递父组件数据，一般都是以事件来作为介质。\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h2>{{b}}</h2>\n    <button @click=\"sendMsgToParent\">发送消息</button>     //点击事件\n  </div>\n</template>\n```\n\n```js\n<script>\nexport default {\n  name: 'child',\n  props:['msg'],\n  data () {\n    return {\n      b: 'i am is child'\n    }\n  },\n  methods:{\n    sendMsgToParent(){\n      this.$emit('listenToChildrenEvents','this msg from child')   //通过emit 来触发一个自定义事件，并传递一个参数’'this msg from child'\n    }\n  }\n}\n</script>\n```\n\n在父组件中监听该自定义事件并添加一个响应该事件的处理方法\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    {{a}}\n    <h2>Essential Links</h2>\n    <h2>Ecosystem</h2>\n    <Child :msg='msg' @listenToChildrenEvents='showMsgFromChild'></Child>   //监听listenToChildrenEvents ，\n  </div>\n</template>\n```\n\n```js\n<script>\nimport Child from './child'\nexport default {\n  name: 'HelloWorld',\n  components:{\n    Child\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App',\n      a:\"aaaaaaaaa\"\n    }\n  },\n  methods:{\n    showMsgFromChild(val){\n      this.a = val\n    }\n  }\n}\n</script>\n```\n这个时候点击发送消息，`aaaaaaaaa`   变为 `this msg from child`。\n\n父组件向子组件传递数据使用props，子组件向父组件传递一般使用emit触发事件来进行传递。\n\n\n## 使用vuex\n\n使用不论父传子还是子传父都可以使用\n\n## event bus 来传递\n\n  不推荐使用\n\n\n\n\n\n\n\n","source":"_posts/vue-5.md","raw":"---\ntitle: 父组件与子组件的通信\ncomments: true\ndescription: Vue.js基础知识\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-07-25 09:58:40\n---\n\n## 父组件向子组件传递参数\n\n### 配置路由\n\n首先在`components`文件夹内创建一个`child.vue`文件,并且修改`router`文件夹内的`index.js`文件：\n\n首先引入`child.vue`组件，之后配置路由\n\n```js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\nimport Child1 from '@/components/child'    //引入child.vue\nVue.use(Router)\nexport default new Router({\nroutes: [\n    {\n        path: '/',\n        name: 'HelloWorld',\n        component: HelloWorld,\n    },\n    {                    //配置路由\n       path:'/child',\n       name:'child',\n       component:Child1\n    }\n]\n})\n```\n\n### 编辑child.vue\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n```\n\n```js\n<script>\nexport default {\n  name: 'child',\n  props:['msg'],    //父组件向子组件传递\n  data () {\n    return {\n    }\n  },\n}\n</script>\n```\n### 编辑父组件\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <Child :msg='msg'></Child>\n  </div>\n</template>\n```\n\n```js\n<script>\nimport Child from './child'\nexport default {\n  name: 'HelloWorld',\n  components:{\n    Child\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App',\n    }\n  }\n}\n</script>\n```\n\n## 子组件向父组件通信\n\n通过`$emit`传递父组件数据，一般都是以事件来作为介质。\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h2>{{b}}</h2>\n    <button @click=\"sendMsgToParent\">发送消息</button>     //点击事件\n  </div>\n</template>\n```\n\n```js\n<script>\nexport default {\n  name: 'child',\n  props:['msg'],\n  data () {\n    return {\n      b: 'i am is child'\n    }\n  },\n  methods:{\n    sendMsgToParent(){\n      this.$emit('listenToChildrenEvents','this msg from child')   //通过emit 来触发一个自定义事件，并传递一个参数’'this msg from child'\n    }\n  }\n}\n</script>\n```\n\n在父组件中监听该自定义事件并添加一个响应该事件的处理方法\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    {{a}}\n    <h2>Essential Links</h2>\n    <h2>Ecosystem</h2>\n    <Child :msg='msg' @listenToChildrenEvents='showMsgFromChild'></Child>   //监听listenToChildrenEvents ，\n  </div>\n</template>\n```\n\n```js\n<script>\nimport Child from './child'\nexport default {\n  name: 'HelloWorld',\n  components:{\n    Child\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App',\n      a:\"aaaaaaaaa\"\n    }\n  },\n  methods:{\n    showMsgFromChild(val){\n      this.a = val\n    }\n  }\n}\n</script>\n```\n这个时候点击发送消息，`aaaaaaaaa`   变为 `this msg from child`。\n\n父组件向子组件传递数据使用props，子组件向父组件传递一般使用emit触发事件来进行传递。\n\n\n## 使用vuex\n\n使用不论父传子还是子传父都可以使用\n\n## event bus 来传递\n\n  不推荐使用\n\n\n\n\n\n\n\n","slug":"vue-5","published":1,"updated":"2020-12-02T06:49:34.147Z","layout":"post","photos":[],"link":"","_id":"cki71wam10058tl9knp1guh9d","content":"<h2 id=\"父组件向子组件传递参数\"><a href=\"#父组件向子组件传递参数\" class=\"headerlink\" title=\"父组件向子组件传递参数\"></a>父组件向子组件传递参数</h2><h3 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h3><p>首先在<code>components</code>文件夹内创建一个<code>child.vue</code>文件,并且修改<code>router</code>文件夹内的<code>index.js</code>文件：</p>\n<p>首先引入<code>child.vue</code>组件，之后配置路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Child1 <span class=\"keyword\">from</span> <span class=\"string\">'@/components/child'</span>    <span class=\"comment\">//引入child.vue</span></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">        component: HelloWorld,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;                    <span class=\"comment\">//配置路由</span></span><br><span class=\"line\">       path:<span class=\"string\">'/child'</span>,</span><br><span class=\"line\">       name:<span class=\"string\">'child'</span>,</span><br><span class=\"line\">       component:Child1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑child-vue\"><a href=\"#编辑child-vue\" class=\"headerlink\" title=\"编辑child.vue\"></a>编辑child.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">  props:[<span class=\"string\">'msg'</span>],    <span class=\"comment\">//父组件向子组件传递</span></span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑父组件\"><a href=\"#编辑父组件\" class=\"headerlink\" title=\"编辑父组件\"></a>编辑父组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">:msg</span>=<span class=\"string\">'msg'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    Child</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg: <span class=\"string\">'Welcome to Your Vue.js App'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h2><p>通过<code>$emit</code>传递父组件数据，一般都是以事件来作为介质。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;b&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"sendMsgToParent\"</span>&gt;</span>发送消息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>     //点击事件</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">  props:[<span class=\"string\">'msg'</span>],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      b: <span class=\"string\">'i am is child'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    sendMsgToParent()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'listenToChildrenEvents'</span>,<span class=\"string\">'this msg from child'</span>)   <span class=\"comment\">//通过emit 来触发一个自定义事件，并传递一个参数’'this msg from child'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在父组件中监听该自定义事件并添加一个响应该事件的处理方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Essential Links<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Ecosystem<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">:msg</span>=<span class=\"string\">'msg'</span> @<span class=\"attr\">listenToChildrenEvents</span>=<span class=\"string\">'showMsgFromChild'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span>   //监听listenToChildrenEvents ，</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    Child</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg: <span class=\"string\">'Welcome to Your Vue.js App'</span>,</span><br><span class=\"line\">      a:<span class=\"string\">\"aaaaaaaaa\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    showMsgFromChild(val)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候点击发送消息，<code>aaaaaaaaa</code>   变为 <code>this msg from child</code>。</p>\n<p>父组件向子组件传递数据使用props，子组件向父组件传递一般使用emit触发事件来进行传递。</p>\n<h2 id=\"使用vuex\"><a href=\"#使用vuex\" class=\"headerlink\" title=\"使用vuex\"></a>使用vuex</h2><p>使用不论父传子还是子传父都可以使用</p>\n<h2 id=\"event-bus-来传递\"><a href=\"#event-bus-来传递\" class=\"headerlink\" title=\"event bus 来传递\"></a>event bus 来传递</h2><p>  不推荐使用</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"父组件向子组件传递参数\"><a href=\"#父组件向子组件传递参数\" class=\"headerlink\" title=\"父组件向子组件传递参数\"></a>父组件向子组件传递参数</h2><h3 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h3><p>首先在<code>components</code>文件夹内创建一个<code>child.vue</code>文件,并且修改<code>router</code>文件夹内的<code>index.js</code>文件：</p>\n<p>首先引入<code>child.vue</code>组件，之后配置路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Child1 <span class=\"keyword\">from</span> <span class=\"string\">'@/components/child'</span>    <span class=\"comment\">//引入child.vue</span></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">        component: HelloWorld,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;                    <span class=\"comment\">//配置路由</span></span><br><span class=\"line\">       path:<span class=\"string\">'/child'</span>,</span><br><span class=\"line\">       name:<span class=\"string\">'child'</span>,</span><br><span class=\"line\">       component:Child1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑child-vue\"><a href=\"#编辑child-vue\" class=\"headerlink\" title=\"编辑child.vue\"></a>编辑child.vue</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">  props:[<span class=\"string\">'msg'</span>],    <span class=\"comment\">//父组件向子组件传递</span></span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑父组件\"><a href=\"#编辑父组件\" class=\"headerlink\" title=\"编辑父组件\"></a>编辑父组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">:msg</span>=<span class=\"string\">'msg'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    Child</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg: <span class=\"string\">'Welcome to Your Vue.js App'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件向父组件通信\"><a href=\"#子组件向父组件通信\" class=\"headerlink\" title=\"子组件向父组件通信\"></a>子组件向父组件通信</h2><p>通过<code>$emit</code>传递父组件数据，一般都是以事件来作为介质。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;b&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"sendMsgToParent\"</span>&gt;</span>发送消息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>     //点击事件</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'child'</span>,</span><br><span class=\"line\">  props:[<span class=\"string\">'msg'</span>],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      b: <span class=\"string\">'i am is child'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    sendMsgToParent()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'listenToChildrenEvents'</span>,<span class=\"string\">'this msg from child'</span>)   <span class=\"comment\">//通过emit 来触发一个自定义事件，并传递一个参数’'this msg from child'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在父组件中监听该自定义事件并添加一个响应该事件的处理方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Essential Links<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Ecosystem<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">:msg</span>=<span class=\"string\">'msg'</span> @<span class=\"attr\">listenToChildrenEvents</span>=<span class=\"string\">'showMsgFromChild'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Child</span>&gt;</span>   //监听listenToChildrenEvents ，</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'HelloWorld'</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    Child</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg: <span class=\"string\">'Welcome to Your Vue.js App'</span>,</span><br><span class=\"line\">      a:<span class=\"string\">\"aaaaaaaaa\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    showMsgFromChild(val)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候点击发送消息，<code>aaaaaaaaa</code>   变为 <code>this msg from child</code>。</p>\n<p>父组件向子组件传递数据使用props，子组件向父组件传递一般使用emit触发事件来进行传递。</p>\n<h2 id=\"使用vuex\"><a href=\"#使用vuex\" class=\"headerlink\" title=\"使用vuex\"></a>使用vuex</h2><p>使用不论父传子还是子传父都可以使用</p>\n<h2 id=\"event-bus-来传递\"><a href=\"#event-bus-来传递\" class=\"headerlink\" title=\"event bus 来传递\"></a>event bus 来传递</h2><p>  不推荐使用</p>\n"},{"title":"vue中跨域代理","comments":1,"description":"vue中跨域代理","keywords":"vue, Vue.js","date":"2017-07-29T03:58:40.000Z","_content":"\nvue中有的时候会遇到跨域问题，我们可以打开`config/index.js`\n\nvue中跨域代理\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/config-1.png)\n\n\n在`index.js`中`proxyTable{}`添加你要代理的域名即可：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/TVJ4DHLC8SO9K2NN91X80U.png)\n\nvue中跨域代理\n\n\n之后重新`npm run dev`跨域配置就生效了\n\n在组件中怎么使用\n\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/IV_OL70G0F_SCGMFI.png)","source":"_posts/vue-6.md","raw":"---\ntitle: vue中跨域代理\ncomments: true\ndescription: vue中跨域代理\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-07-29 11:58:40\n---\n\nvue中有的时候会遇到跨域问题，我们可以打开`config/index.js`\n\nvue中跨域代理\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/config-1.png)\n\n\n在`index.js`中`proxyTable{}`添加你要代理的域名即可：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/TVJ4DHLC8SO9K2NN91X80U.png)\n\nvue中跨域代理\n\n\n之后重新`npm run dev`跨域配置就生效了\n\n在组件中怎么使用\n\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/04/IV_OL70G0F_SCGMFI.png)","slug":"vue-6","published":1,"updated":"2020-12-02T06:49:34.148Z","layout":"post","photos":[],"link":"","_id":"cki71wam2005btl9k1i2nilcm","content":"<p>vue中有的时候会遇到跨域问题，我们可以打开<code>config/index.js</code></p>\n<p>vue中跨域代理</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/config-1.png\" alt></p>\n<p>在<code>index.js</code>中<code>proxyTable{}</code>添加你要代理的域名即可：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/TVJ4DHLC8SO9K2NN91X80U.png\" alt></p>\n<p>vue中跨域代理</p>\n<p>之后重新<code>npm run dev</code>跨域配置就生效了</p>\n<p>在组件中怎么使用</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/IV_OL70G0F_SCGMFI.png\" alt></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>vue中有的时候会遇到跨域问题，我们可以打开<code>config/index.js</code></p>\n<p>vue中跨域代理</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/config-1.png\" alt></p>\n<p>在<code>index.js</code>中<code>proxyTable{}</code>添加你要代理的域名即可：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/TVJ4DHLC8SO9K2NN91X80U.png\" alt></p>\n<p>vue中跨域代理</p>\n<p>之后重新<code>npm run dev</code>跨域配置就生效了</p>\n<p>在组件中怎么使用</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/04/IV_OL70G0F_SCGMFI.png\" alt></p>\n"},{"title":"vue中路由守卫","comments":1,"description":"vue中跨域代理","keywords":"vue, Vue.js","date":"2017-07-29T03:58:40.000Z","_content":"\n正如其名，`vue-router` 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。\n\n记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 `$route` 对象来应对这些变化，或使用 `beforeRouteUpdate` 的组件内守卫。\n\n## 全局前置守卫\n\n你可以使用 `router.beforeEach` 注册一个全局前置守卫：\n\n```js\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 `resolve` 完之前一直处于 等待中。\n\n每个守卫方法接收三个参数：\n\n- to: Route: 即将要进入的目标 路由对象\n\n- from: Route: 当前导航正要离开的路由\n\n- next: `Function` 一定要调用该方法来 `resolve` 这个钩子。执行效果依赖 `next` 方法的调用参数。\n\n`next()`: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 `confirmed` (确认的)。\n\n`next(false)`: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。\n\n`next('/')` 或者 `next({ path: '/' })`: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 `replace: true、name: 'home'` 之类的选项以及任何用在 `router-link` 的 `to prop` 或 `router.push` 中的选项。\n\n`next(error): (2.4.0+)` 如果传入 next 的参数是一个 `Error` 实例，则导航会被终止且该错误会被传递给 `router.onError()` 注册过的回调。\n\n确保要调用 `next` 方法，否则钩子就不会被 `resolved`。\n\n## 全局解析守卫\n\n2.5.0 新增\n\n在 2.5.0+ 你可以用 `router.beforeResolve` 注册一个全局守卫。这和 `router.beforeEach` 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。\n\n## 全局后置钩子\n\n你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 `next `函数也不会改变导航本身：\n\n```js\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n## 路由独享的守卫\n\n你可以在路由配置上直接定义 `beforeEnter` 守卫：\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n这些守卫与全局前置守卫的方法参数是一样的。\n\n## 组件内的守卫\n\n最后，你可以在路由组件内直接定义以下路由导航守卫：\n\n```js\nbeforeRouteEnter\nbeforeRouteUpdate (2.2 新增)\nbeforeRouteLeave\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用\n    // 可以访问组件实例 `this`\n  }\n}\n```\n\n`beforeRouteEnter` 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。\n\n不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n```js\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n```\n\n注意 `beforeRouteEnter` 是支持给 `next` 传递回调的唯一守卫。对于 `beforeRouteUpdate` 和 `beforeRouteLeave` 来说，`this` 已经可用了，所以不支持传递回调，因为没有必要了。\n\n```js\nbeforeRouteUpdate (to, from, next) {\n  // just use `this`\n  this.name = to.params.name\n  next()\n}\n```\n\n这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 `next(false)` 来取消。\n\n```js\nbeforeRouteLeave (to, from , next) {\n  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')\n  if (answer) {\n    next()\n  } else {\n    next(false)\n  }\n}\n```\n\n## 完整的导航解析流程\n\n- 导航被触发。\n- 在失活的组件里调用离开守卫。\n- 调用全局的 beforeEach 守卫。\n- 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n- 在路由配置里调用 beforeEnter。\n- 解析异步路由组件。\n- 在被激活的组件里调用 beforeRouteEnter。\n- 调用全局的 beforeResolve 守卫 (2.5+)。\n- 导航被确认。\n- 调用全局的 afterEach 钩子。\n- 触发 DOM 更新。\n- 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。","source":"_posts/vue-7.md","raw":"---\ntitle: vue中路由守卫\ncomments: true\ndescription: vue中跨域代理\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-07-29 11:58:40\n---\n\n正如其名，`vue-router` 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。\n\n记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 `$route` 对象来应对这些变化，或使用 `beforeRouteUpdate` 的组件内守卫。\n\n## 全局前置守卫\n\n你可以使用 `router.beforeEach` 注册一个全局前置守卫：\n\n```js\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 `resolve` 完之前一直处于 等待中。\n\n每个守卫方法接收三个参数：\n\n- to: Route: 即将要进入的目标 路由对象\n\n- from: Route: 当前导航正要离开的路由\n\n- next: `Function` 一定要调用该方法来 `resolve` 这个钩子。执行效果依赖 `next` 方法的调用参数。\n\n`next()`: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 `confirmed` (确认的)。\n\n`next(false)`: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。\n\n`next('/')` 或者 `next({ path: '/' })`: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 `replace: true、name: 'home'` 之类的选项以及任何用在 `router-link` 的 `to prop` 或 `router.push` 中的选项。\n\n`next(error): (2.4.0+)` 如果传入 next 的参数是一个 `Error` 实例，则导航会被终止且该错误会被传递给 `router.onError()` 注册过的回调。\n\n确保要调用 `next` 方法，否则钩子就不会被 `resolved`。\n\n## 全局解析守卫\n\n2.5.0 新增\n\n在 2.5.0+ 你可以用 `router.beforeResolve` 注册一个全局守卫。这和 `router.beforeEach` 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。\n\n## 全局后置钩子\n\n你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 `next `函数也不会改变导航本身：\n\n```js\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n## 路由独享的守卫\n\n你可以在路由配置上直接定义 `beforeEnter` 守卫：\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n这些守卫与全局前置守卫的方法参数是一样的。\n\n## 组件内的守卫\n\n最后，你可以在路由组件内直接定义以下路由导航守卫：\n\n```js\nbeforeRouteEnter\nbeforeRouteUpdate (2.2 新增)\nbeforeRouteLeave\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用\n    // 可以访问组件实例 `this`\n  }\n}\n```\n\n`beforeRouteEnter` 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。\n\n不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。\n\n```js\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n```\n\n注意 `beforeRouteEnter` 是支持给 `next` 传递回调的唯一守卫。对于 `beforeRouteUpdate` 和 `beforeRouteLeave` 来说，`this` 已经可用了，所以不支持传递回调，因为没有必要了。\n\n```js\nbeforeRouteUpdate (to, from, next) {\n  // just use `this`\n  this.name = to.params.name\n  next()\n}\n```\n\n这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 `next(false)` 来取消。\n\n```js\nbeforeRouteLeave (to, from , next) {\n  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')\n  if (answer) {\n    next()\n  } else {\n    next(false)\n  }\n}\n```\n\n## 完整的导航解析流程\n\n- 导航被触发。\n- 在失活的组件里调用离开守卫。\n- 调用全局的 beforeEach 守卫。\n- 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n- 在路由配置里调用 beforeEnter。\n- 解析异步路由组件。\n- 在被激活的组件里调用 beforeRouteEnter。\n- 调用全局的 beforeResolve 守卫 (2.5+)。\n- 导航被确认。\n- 调用全局的 afterEach 钩子。\n- 触发 DOM 更新。\n- 用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。","slug":"vue-7","published":1,"updated":"2020-12-02T06:49:34.149Z","layout":"post","photos":[],"link":"","_id":"cki71wam3005gtl9kfgp3ioht","content":"<p>正如其名，<code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p>\n<p>记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 <code>$route</code> 对象来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p>\n<h2 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h2><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中。</p>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li><p>to: Route: 即将要进入的目标 路由对象</p>\n</li>\n<li><p>from: Route: 当前导航正要离开的路由</p>\n</li>\n<li><p>next: <code>Function</code> 一定要调用该方法来 <code>resolve</code> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。</p>\n</li>\n</ul>\n<p><code>next()</code>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</p>\n<p><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</p>\n<p><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to prop</code> 或 <code>router.push</code> 中的选项。</p>\n<p><code>next(error): (2.4.0+)</code> 如果传入 next 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</p>\n<p>确保要调用 <code>next</code> 方法，否则钩子就不会被 <code>resolved</code>。</p>\n<h2 id=\"全局解析守卫\"><a href=\"#全局解析守卫\" class=\"headerlink\" title=\"全局解析守卫\"></a>全局解析守卫</h2><p>2.5.0 新增</p>\n<p>在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p>\n<h2 id=\"全局后置钩子\"><a href=\"#全局后置钩子\" class=\"headerlink\" title=\"全局后置钩子\"></a>全局后置钩子</h2><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code>函数也不会改变导航本身：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由独享的守卫\"><a href=\"#路由独享的守卫\" class=\"headerlink\" title=\"路由独享的守卫\"></a>路由独享的守卫</h2><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/foo'</span>,</span><br><span class=\"line\">      component: Foo,</span><br><span class=\"line\">      beforeEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这些守卫与全局前置守卫的方法参数是一样的。</p>\n<h2 id=\"组件内的守卫\"><a href=\"#组件内的守卫\" class=\"headerlink\" title=\"组件内的守卫\"></a>组件内的守卫</h2><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter</span><br><span class=\"line\">beforeRouteUpdate (<span class=\"number\">2.2</span> 新增)</span><br><span class=\"line\">beforeRouteLeave</span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`...`</span>,</span><br><span class=\"line\">  beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 不！能！获取组件实例 `this`</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 导航离开该组件的对应路由时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>beforeRouteEnter</code> 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p>\n<p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">  next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 `vm` 访问组件实例</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// just use `this`</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = to.params.name</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span> , next) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> answer = <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'Do you really want to leave? you have unsaved changes!'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (answer) &#123;</span><br><span class=\"line\">    next()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h2><ul>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li>\n<li>在路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 beforeRouteEnter。</li>\n<li>调用全局的 beforeResolve 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 afterEach 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>正如其名，<code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p>\n<p>记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 <code>$route</code> 对象来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p>\n<h2 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h2><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中。</p>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li><p>to: Route: 即将要进入的目标 路由对象</p>\n</li>\n<li><p>from: Route: 当前导航正要离开的路由</p>\n</li>\n<li><p>next: <code>Function</code> 一定要调用该方法来 <code>resolve</code> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。</p>\n</li>\n</ul>\n<p><code>next()</code>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</p>\n<p><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</p>\n<p><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to prop</code> 或 <code>router.push</code> 中的选项。</p>\n<p><code>next(error): (2.4.0+)</code> 如果传入 next 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</p>\n<p>确保要调用 <code>next</code> 方法，否则钩子就不会被 <code>resolved</code>。</p>\n<h2 id=\"全局解析守卫\"><a href=\"#全局解析守卫\" class=\"headerlink\" title=\"全局解析守卫\"></a>全局解析守卫</h2><p>2.5.0 新增</p>\n<p>在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p>\n<h2 id=\"全局后置钩子\"><a href=\"#全局后置钩子\" class=\"headerlink\" title=\"全局后置钩子\"></a>全局后置钩子</h2><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code>函数也不会改变导航本身：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由独享的守卫\"><a href=\"#路由独享的守卫\" class=\"headerlink\" title=\"路由独享的守卫\"></a>路由独享的守卫</h2><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/foo'</span>,</span><br><span class=\"line\">      component: Foo,</span><br><span class=\"line\">      beforeEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这些守卫与全局前置守卫的方法参数是一样的。</p>\n<h2 id=\"组件内的守卫\"><a href=\"#组件内的守卫\" class=\"headerlink\" title=\"组件内的守卫\"></a>组件内的守卫</h2><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter</span><br><span class=\"line\">beforeRouteUpdate (<span class=\"number\">2.2</span> 新增)</span><br><span class=\"line\">beforeRouteLeave</span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`...`</span>,</span><br><span class=\"line\">  beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 不！能！获取组件实例 `this`</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 导航离开该组件的对应路由时调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>beforeRouteEnter</code> 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p>\n<p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">  next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 `vm` 访问组件实例</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以不支持传递回调，因为没有必要了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteUpdate (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// just use `this`</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = to.params.name</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span> , next) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> answer = <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'Do you really want to leave? you have unsaved changes!'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (answer) &#123;</span><br><span class=\"line\">    next()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的导航解析流程\"><a href=\"#完整的导航解析流程\" class=\"headerlink\" title=\"完整的导航解析流程\"></a>完整的导航解析流程</h2><ul>\n<li>导航被触发。</li>\n<li>在失活的组件里调用离开守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li>\n<li>在路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 beforeRouteEnter。</li>\n<li>调用全局的 beforeResolve 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 afterEach 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li>\n</ul>\n"},{"title":"axios封装","comments":1,"description":"axios封装携带token并且检测token是否过期","keywords":"vue, Vue.js","date":"2017-08-13T06:38:40.000Z","_content":"\n\n这里的需求是在特定的请求的时候需要携带`token`， 并且检测`token`是否过期，过期刷新，或者直接请求\n\n封装了一些`axios`常用的状态\n\n直接上代码\n\n首先需要熟悉`axios`用法 [axiosAPI](https://github.com/axios/axios)\n\n```js\n'use strict'\n// 引入依赖\nimport axios from 'axios'\nimport qs from 'qs'\nimport config from '../config'\nimport Token from './token'\nimport store from './store'\nimport base from './base'\n// 默认一些配置\naxios.defaults.withCredentials = true\n\n// axios请求前拦截器\naxios.interceptors.request.use(config => {\n  // loading\n  return config\n}, error => {\n  return Promise.reject(error)\n})\n\n// axios相应拦截器\naxios.interceptors.response.use(response => {\n  return response\n}, error => {\n  return Promise.resolve(error.response)\n})\n\n// 检查服务器返回的状态码的状态\nfunction checkStatus (response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    if (response.data.code === 200) {\n      return response\n      // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    return response\n  }\n  // 异常状态下，把错误信息返回去\n  return {\n    'status': -404,\n    'msg': '网络异常'\n  }\n}\n\nfunction checkCode (res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {}\n  if (res.data && (!res.data.success)) {}\n  return res\n}\n\n// 携带cookie\nconst parseCookie = cookies => {\n  let cookie = ''\n  Object.keys(cookies).forEach(item => {\n    cookie += item + '=' + cookies[item] + '; '\n  })\n  return cookie\n}\n\n// post操作\nfunction postByToken (url, data, token, cookies = {}) {\n  let cookie = parseCookie(cookies)\n  let headers = {\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    'authorization': token\n  }\n  if (cookie && !base.isClient()) headers['cookie'] = cookie\n  return axios({\n    method: 'post',\n    baseURL: url.indexOf('authentication/mobile') >= 0 || url.indexOf('oauth/token') >= 0 || url.indexOf('authentication/third') >= 0 ? config.API_SSO : config.API_SERVER,\n    url,\n    data: qs.stringify(data),\n    timeout: 20000,\n    headers\n  })\n    .then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    )\n}\n\n// token过期的操作\nfunction redirectByToken (url, token, pathname) {\n  if (base.isClient()) {\n    // let href = window.location.href\n    if (token === undefined || token === 'timeout' || token === 'notoken') {\n      if (pathname === 'User') {\n        Token.clearToken()\n      } else {\n        Token.clearToken()\n        // window.location.href = `${base.Href()}/account/login?redirect=${href}`\n      }\n    }\n  }\n}\n// 抛出\nexport default {\n  post (url, data, isToken = false, pathname = '', cookies = {}) {\n    return Token.getToken(isToken)\n      .then((token) => {\n        redirectByToken(url, token, pathname)\n        if (pathname === 'User' && !store.getWithKey('localStorage', 'tokenMsg')) {\n\n        } else {\n          return postByToken(url, data, token, cookies)\n        }\n      })\n  },\n  get (url, params) {\n    return axios({\n      'method': 'get',\n      'baseURL': config.API_SERVER,\n      url,\n      params, // get 请求时带的参数\n      'timeout': 10000,\n      'headers': {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    }).then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    ).catch((err) => {\n      if (err) {\n\n      }\n    })\n  }\n}\n```\n\n这里的需求是在特定的请求的时候需要携带`token`， 并且检测`token`是否过期，过期刷新，或者直接请求\n","source":"_posts/vue-8.md","raw":"---\ntitle: axios封装\ncomments: true\ndescription: axios封装携带token并且检测token是否过期\ntags: \"Vue\"\ncategories: \"Vue\"\nkeywords: vue, Vue.js \ndate: 2017-08-13 14:38:40\n---\n\n\n这里的需求是在特定的请求的时候需要携带`token`， 并且检测`token`是否过期，过期刷新，或者直接请求\n\n封装了一些`axios`常用的状态\n\n直接上代码\n\n首先需要熟悉`axios`用法 [axiosAPI](https://github.com/axios/axios)\n\n```js\n'use strict'\n// 引入依赖\nimport axios from 'axios'\nimport qs from 'qs'\nimport config from '../config'\nimport Token from './token'\nimport store from './store'\nimport base from './base'\n// 默认一些配置\naxios.defaults.withCredentials = true\n\n// axios请求前拦截器\naxios.interceptors.request.use(config => {\n  // loading\n  return config\n}, error => {\n  return Promise.reject(error)\n})\n\n// axios相应拦截器\naxios.interceptors.response.use(response => {\n  return response\n}, error => {\n  return Promise.resolve(error.response)\n})\n\n// 检查服务器返回的状态码的状态\nfunction checkStatus (response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    if (response.data.code === 200) {\n      return response\n      // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    return response\n  }\n  // 异常状态下，把错误信息返回去\n  return {\n    'status': -404,\n    'msg': '网络异常'\n  }\n}\n\nfunction checkCode (res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {}\n  if (res.data && (!res.data.success)) {}\n  return res\n}\n\n// 携带cookie\nconst parseCookie = cookies => {\n  let cookie = ''\n  Object.keys(cookies).forEach(item => {\n    cookie += item + '=' + cookies[item] + '; '\n  })\n  return cookie\n}\n\n// post操作\nfunction postByToken (url, data, token, cookies = {}) {\n  let cookie = parseCookie(cookies)\n  let headers = {\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    'authorization': token\n  }\n  if (cookie && !base.isClient()) headers['cookie'] = cookie\n  return axios({\n    method: 'post',\n    baseURL: url.indexOf('authentication/mobile') >= 0 || url.indexOf('oauth/token') >= 0 || url.indexOf('authentication/third') >= 0 ? config.API_SSO : config.API_SERVER,\n    url,\n    data: qs.stringify(data),\n    timeout: 20000,\n    headers\n  })\n    .then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    )\n}\n\n// token过期的操作\nfunction redirectByToken (url, token, pathname) {\n  if (base.isClient()) {\n    // let href = window.location.href\n    if (token === undefined || token === 'timeout' || token === 'notoken') {\n      if (pathname === 'User') {\n        Token.clearToken()\n      } else {\n        Token.clearToken()\n        // window.location.href = `${base.Href()}/account/login?redirect=${href}`\n      }\n    }\n  }\n}\n// 抛出\nexport default {\n  post (url, data, isToken = false, pathname = '', cookies = {}) {\n    return Token.getToken(isToken)\n      .then((token) => {\n        redirectByToken(url, token, pathname)\n        if (pathname === 'User' && !store.getWithKey('localStorage', 'tokenMsg')) {\n\n        } else {\n          return postByToken(url, data, token, cookies)\n        }\n      })\n  },\n  get (url, params) {\n    return axios({\n      'method': 'get',\n      'baseURL': config.API_SERVER,\n      url,\n      params, // get 请求时带的参数\n      'timeout': 10000,\n      'headers': {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    }).then(\n      (response) => {\n        return checkStatus(response)\n      }\n    ).then(\n      (res) => {\n        return checkCode(res)\n      }\n    ).catch((err) => {\n      if (err) {\n\n      }\n    })\n  }\n}\n```\n\n这里的需求是在特定的请求的时候需要携带`token`， 并且检测`token`是否过期，过期刷新，或者直接请求\n","slug":"vue-8","published":1,"updated":"2020-12-02T06:49:34.149Z","layout":"post","photos":[],"link":"","_id":"cki71wam5005jtl9k9sl9aj7s","content":"<p>这里的需求是在特定的请求的时候需要携带<code>token</code>， 并且检测<code>token</code>是否过期，过期刷新，或者直接请求</p>\n<p>封装了一些<code>axios</code>常用的状态</p>\n<p>直接上代码</p>\n<p>首先需要熟悉<code>axios</code>用法 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axiosAPI</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'../config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Token <span class=\"keyword\">from</span> <span class=\"string\">'./token'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> base <span class=\"keyword\">from</span> <span class=\"string\">'./base'</span></span><br><span class=\"line\"><span class=\"comment\">// 默认一些配置</span></span><br><span class=\"line\">axios.defaults.withCredentials = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios请求前拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// loading</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios相应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查服务器返回的状态码的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loading</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果http状态码正常，则直接返回数据</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (response &amp;&amp; (response.status === <span class=\"number\">200</span> || response.status === <span class=\"number\">304</span> || response.status === <span class=\"number\">400</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.data.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      <span class=\"comment\">// 如果不需要除了data之外的数据，可以直接 return response.data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 异常状态下，把错误信息返回去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'status'</span>: <span class=\"number\">-404</span>,</span><br><span class=\"line\">    <span class=\"string\">'msg'</span>: <span class=\"string\">'网络异常'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCode</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status === <span class=\"number\">-404</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.data &amp;&amp; (!res.data.success)) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 携带cookie</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parseCookie = <span class=\"function\"><span class=\"params\">cookies</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cookie = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(cookies).forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    cookie += item + <span class=\"string\">'='</span> + cookies[item] + <span class=\"string\">'; '</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookie</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postByToken</span> (<span class=\"params\">url, data, token, cookies = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cookie = parseCookie(cookies)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'authorization'</span>: token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cookie &amp;&amp; !base.isClient()) headers[<span class=\"string\">'cookie'</span>] = cookie</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">    method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">    baseURL: url.indexOf(<span class=\"string\">'authentication/mobile'</span>) &gt;= <span class=\"number\">0</span> || url.indexOf(<span class=\"string\">'oauth/token'</span>) &gt;= <span class=\"number\">0</span> || url.indexOf(<span class=\"string\">'authentication/third'</span>) &gt;= <span class=\"number\">0</span> ? config.API_SSO : config.API_SERVER,</span><br><span class=\"line\">    url,</span><br><span class=\"line\">    data: qs.stringify(data),</span><br><span class=\"line\">    timeout: <span class=\"number\">20000</span>,</span><br><span class=\"line\">    headers</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    .then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkStatus(response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">      (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkCode(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// token过期的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redirectByToken</span> (<span class=\"params\">url, token, pathname</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base.isClient()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// let href = window.location.href</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token === <span class=\"literal\">undefined</span> || token === <span class=\"string\">'timeout'</span> || token === <span class=\"string\">'notoken'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'User'</span>) &#123;</span><br><span class=\"line\">        Token.clearToken()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Token.clearToken()</span><br><span class=\"line\">        <span class=\"comment\">// window.location.href = `$&#123;base.Href()&#125;/account/login?redirect=$&#123;href&#125;`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抛出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  post (url, data, isToken = <span class=\"literal\">false</span>, pathname = <span class=\"string\">''</span>, cookies = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Token.getToken(isToken)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        redirectByToken(url, token, pathname)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'User'</span> &amp;&amp; !store.getWithKey(<span class=\"string\">'localStorage'</span>, <span class=\"string\">'tokenMsg'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> postByToken(url, data, token, cookies)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> (url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      <span class=\"string\">'method'</span>: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      <span class=\"string\">'baseURL'</span>: config.API_SERVER,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      params, <span class=\"comment\">// get 请求时带的参数</span></span><br><span class=\"line\">      <span class=\"string\">'timeout'</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">      <span class=\"string\">'headers'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkStatus(response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">      (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkCode(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的需求是在特定的请求的时候需要携带<code>token</code>， 并且检测<code>token</code>是否过期，过期刷新，或者直接请求</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>这里的需求是在特定的请求的时候需要携带<code>token</code>， 并且检测<code>token</code>是否过期，过期刷新，或者直接请求</p>\n<p>封装了一些<code>axios</code>常用的状态</p>\n<p>直接上代码</p>\n<p>首先需要熟悉<code>axios</code>用法 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axiosAPI</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'../config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Token <span class=\"keyword\">from</span> <span class=\"string\">'./token'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> base <span class=\"keyword\">from</span> <span class=\"string\">'./base'</span></span><br><span class=\"line\"><span class=\"comment\">// 默认一些配置</span></span><br><span class=\"line\">axios.defaults.withCredentials = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios请求前拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// loading</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios相应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error.response)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查服务器返回的状态码的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// loading</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果http状态码正常，则直接返回数据</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (response &amp;&amp; (response.status === <span class=\"number\">200</span> || response.status === <span class=\"number\">304</span> || response.status === <span class=\"number\">400</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.data.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      <span class=\"comment\">// 如果不需要除了data之外的数据，可以直接 return response.data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 异常状态下，把错误信息返回去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'status'</span>: <span class=\"number\">-404</span>,</span><br><span class=\"line\">    <span class=\"string\">'msg'</span>: <span class=\"string\">'网络异常'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkCode</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status === <span class=\"number\">-404</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.data &amp;&amp; (!res.data.success)) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 携带cookie</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parseCookie = <span class=\"function\"><span class=\"params\">cookies</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cookie = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(cookies).forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    cookie += item + <span class=\"string\">'='</span> + cookies[item] + <span class=\"string\">'; '</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookie</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postByToken</span> (<span class=\"params\">url, data, token, cookies = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cookie = parseCookie(cookies)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'authorization'</span>: token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cookie &amp;&amp; !base.isClient()) headers[<span class=\"string\">'cookie'</span>] = cookie</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">    method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">    baseURL: url.indexOf(<span class=\"string\">'authentication/mobile'</span>) &gt;= <span class=\"number\">0</span> || url.indexOf(<span class=\"string\">'oauth/token'</span>) &gt;= <span class=\"number\">0</span> || url.indexOf(<span class=\"string\">'authentication/third'</span>) &gt;= <span class=\"number\">0</span> ? config.API_SSO : config.API_SERVER,</span><br><span class=\"line\">    url,</span><br><span class=\"line\">    data: qs.stringify(data),</span><br><span class=\"line\">    timeout: <span class=\"number\">20000</span>,</span><br><span class=\"line\">    headers</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    .then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkStatus(response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">      (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkCode(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// token过期的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redirectByToken</span> (<span class=\"params\">url, token, pathname</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base.isClient()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// let href = window.location.href</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token === <span class=\"literal\">undefined</span> || token === <span class=\"string\">'timeout'</span> || token === <span class=\"string\">'notoken'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'User'</span>) &#123;</span><br><span class=\"line\">        Token.clearToken()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Token.clearToken()</span><br><span class=\"line\">        <span class=\"comment\">// window.location.href = `$&#123;base.Href()&#125;/account/login?redirect=$&#123;href&#125;`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抛出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  post (url, data, isToken = <span class=\"literal\">false</span>, pathname = <span class=\"string\">''</span>, cookies = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Token.getToken(isToken)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        redirectByToken(url, token, pathname)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'User'</span> &amp;&amp; !store.getWithKey(<span class=\"string\">'localStorage'</span>, <span class=\"string\">'tokenMsg'</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> postByToken(url, data, token, cookies)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> (url, params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(&#123;</span><br><span class=\"line\">      <span class=\"string\">'method'</span>: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      <span class=\"string\">'baseURL'</span>: config.API_SERVER,</span><br><span class=\"line\">      url,</span><br><span class=\"line\">      params, <span class=\"comment\">// get 请求时带的参数</span></span><br><span class=\"line\">      <span class=\"string\">'timeout'</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">      <span class=\"string\">'headers'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkStatus(response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">      (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> checkCode(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的需求是在特定的请求的时候需要携带<code>token</code>， 并且检测<code>token</code>是否过期，过期刷新，或者直接请求</p>\n"},{"title":"webpack3使用","comments":1,"description":"webpack3使用","keywords":"webpack, webpack3","date":"2017-08-01T03:58:40.000Z","_content":"\n\n以`windows`系统为例。\n\n使用`webpack`必须安装`node`，可以通过 `node -v`来查看`node`安装情况和版本。\n\n1. 在桌面新建一个文件夹，\n  \n  例如：webpack文件夹---->点击进入此文件夹。\n\n2. 全局安装webpack\n\n```sh\nnpm install -g webpack@3.6.0\n```\n\n如果你安装失败，\n（1）首先检查你的网络，（也可以使用cnpm来安装）。\n\n（2）检查node版本，版本过低也不行。\n\n使用命令行新建一个文件夹：demo1-->npm init （如果你不考虑发布到npm上，可以一直按着回车键直到初始化完成。）-->进行局部安装webpack\n\n```sh\nnpm init //初始化项目.\nnpm install --save-dev webpack@3.6.0    //安装局部webpack\n```\n\n3. hello webpack练习。\n\n在`demo1`的文件夹内新建两个文件夹，`src`与`dist`。\n\n\n`src`文件夹：用来存放我们编写的`javascript`代码，可以简单的理解为用`JavaScript`编写的模块。\n\n`dist`文件夹：用来存放供浏览器读取的文件，这个是`webpack`打包成的文件。\n\n在`dist`下新建`index.html`文件,并写入如下代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"bundle.js\"></script>v\n</body>\n</html>\n```\n\n`bundle.js`文件，这是用`webpack`执行打包命令后生产的文件。\n\n在src内新建一个main.js文件。\n\n```js\ndocument.write(\"<h1>hello webpack</h1>\")\n```\n\n写好之后，在命令行输入：\n\n```sh\nwebpacck src/main.js dist/bundle.js\n```\n\n执行结果如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/2.png)\n\n可以看到在dist文件夹内生成了bundle.js文件。使用浏览器打开index.html显示如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/1.png)","source":"_posts/wb3-1.md","raw":"---\ntitle: webpack3使用\ncomments: true\ndescription: webpack3使用\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 \ndate: 2017-08-1 11:58:40\n---\n\n\n以`windows`系统为例。\n\n使用`webpack`必须安装`node`，可以通过 `node -v`来查看`node`安装情况和版本。\n\n1. 在桌面新建一个文件夹，\n  \n  例如：webpack文件夹---->点击进入此文件夹。\n\n2. 全局安装webpack\n\n```sh\nnpm install -g webpack@3.6.0\n```\n\n如果你安装失败，\n（1）首先检查你的网络，（也可以使用cnpm来安装）。\n\n（2）检查node版本，版本过低也不行。\n\n使用命令行新建一个文件夹：demo1-->npm init （如果你不考虑发布到npm上，可以一直按着回车键直到初始化完成。）-->进行局部安装webpack\n\n```sh\nnpm init //初始化项目.\nnpm install --save-dev webpack@3.6.0    //安装局部webpack\n```\n\n3. hello webpack练习。\n\n在`demo1`的文件夹内新建两个文件夹，`src`与`dist`。\n\n\n`src`文件夹：用来存放我们编写的`javascript`代码，可以简单的理解为用`JavaScript`编写的模块。\n\n`dist`文件夹：用来存放供浏览器读取的文件，这个是`webpack`打包成的文件。\n\n在`dist`下新建`index.html`文件,并写入如下代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"bundle.js\"></script>v\n</body>\n</html>\n```\n\n`bundle.js`文件，这是用`webpack`执行打包命令后生产的文件。\n\n在src内新建一个main.js文件。\n\n```js\ndocument.write(\"<h1>hello webpack</h1>\")\n```\n\n写好之后，在命令行输入：\n\n```sh\nwebpacck src/main.js dist/bundle.js\n```\n\n执行结果如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/2.png)\n\n可以看到在dist文件夹内生成了bundle.js文件。使用浏览器打开index.html显示如下：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/1.png)","slug":"wb3-1","published":1,"updated":"2020-12-02T06:49:34.150Z","layout":"post","photos":[],"link":"","_id":"cki71wam6005otl9ke0tfxfek","content":"<p>以<code>windows</code>系统为例。</p>\n<p>使用<code>webpack</code>必须安装<code>node</code>，可以通过 <code>node -v</code>来查看<code>node</code>安装情况和版本。</p>\n<ol>\n<li><p>在桌面新建一个文件夹，</p>\n<p>例如：webpack文件夹—-&gt;点击进入此文件夹。</p>\n</li>\n<li><p>全局安装webpack</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack@3.6.0</span><br></pre></td></tr></table></figure>\n\n<p>如果你安装失败，<br>（1）首先检查你的网络，（也可以使用cnpm来安装）。</p>\n<p>（2）检查node版本，版本过低也不行。</p>\n<p>使用命令行新建一个文件夹：demo1–&gt;npm init （如果你不考虑发布到npm上，可以一直按着回车键直到初始化完成。）–&gt;进行局部安装webpack</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init //初始化项目.</span><br><span class=\"line\">npm install --save-dev webpack@3.6.0    //安装局部webpack</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>hello webpack练习。</li>\n</ol>\n<p>在<code>demo1</code>的文件夹内新建两个文件夹，<code>src</code>与<code>dist</code>。</p>\n<p><code>src</code>文件夹：用来存放我们编写的<code>javascript</code>代码，可以简单的理解为用<code>JavaScript</code>编写的模块。</p>\n<p><code>dist</code>文件夹：用来存放供浏览器读取的文件，这个是<code>webpack</code>打包成的文件。</p>\n<p>在<code>dist</code>下新建<code>index.html</code>文件,并写入如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>v</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bundle.js</code>文件，这是用<code>webpack</code>执行打包命令后生产的文件。</p>\n<p>在src内新建一个main.js文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;hello webpack&lt;/h1&gt;\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>写好之后，在命令行输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpacck src/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/2.png\" alt></p>\n<p>可以看到在dist文件夹内生成了bundle.js文件。使用浏览器打开index.html显示如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/1.png\" alt></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>以<code>windows</code>系统为例。</p>\n<p>使用<code>webpack</code>必须安装<code>node</code>，可以通过 <code>node -v</code>来查看<code>node</code>安装情况和版本。</p>\n<ol>\n<li><p>在桌面新建一个文件夹，</p>\n<p>例如：webpack文件夹—-&gt;点击进入此文件夹。</p>\n</li>\n<li><p>全局安装webpack</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack@3.6.0</span><br></pre></td></tr></table></figure>\n\n<p>如果你安装失败，<br>（1）首先检查你的网络，（也可以使用cnpm来安装）。</p>\n<p>（2）检查node版本，版本过低也不行。</p>\n<p>使用命令行新建一个文件夹：demo1–&gt;npm init （如果你不考虑发布到npm上，可以一直按着回车键直到初始化完成。）–&gt;进行局部安装webpack</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init //初始化项目.</span><br><span class=\"line\">npm install --save-dev webpack@3.6.0    //安装局部webpack</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>hello webpack练习。</li>\n</ol>\n<p>在<code>demo1</code>的文件夹内新建两个文件夹，<code>src</code>与<code>dist</code>。</p>\n<p><code>src</code>文件夹：用来存放我们编写的<code>javascript</code>代码，可以简单的理解为用<code>JavaScript</code>编写的模块。</p>\n<p><code>dist</code>文件夹：用来存放供浏览器读取的文件，这个是<code>webpack</code>打包成的文件。</p>\n<p>在<code>dist</code>下新建<code>index.html</code>文件,并写入如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>v</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bundle.js</code>文件，这是用<code>webpack</code>执行打包命令后生产的文件。</p>\n<p>在src内新建一个main.js文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;hello webpack&lt;/h1&gt;\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>写好之后，在命令行输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpacck src/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/2.png\" alt></p>\n<p>可以看到在dist文件夹内生成了bundle.js文件。使用浏览器打开index.html显示如下：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/1.png\" alt></p>\n"},{"title":"webpack3配置文件","comments":1,"description":"webpack3配置文件","keywords":"webpack, webpack3 ,webpack3配置文件","date":"2017-08-01T06:28:10.000Z","_content":"\n上篇文章使用`webpack src/main.js dist/bundle.js`打包，在工作之中并不是这么使用。\n\n`webpack`有一个默认的配置文件\n\n`webpack.config.js``，这个文件需要手动的创建，位于项目根目录中。\n\nwebpack`配置文件会暴露一个一个对象：\n\n```js\nmodule.exports = {\n//配置项\n}\n```\n\n常用配置项将要说明：\n\n```js\nmodule.exports = {\n    entry:\"\",  // 打包的入口文件，一个字符串或者一个对象。\n    output:{  // 配置打包的结果，一个对象\n        path:\"\",   //定义输出文件路径  ，一个字符串。\n        filename:\"\"    // 定义输出文件名，一个字符串。\n    },\n    module:{  //配置打包的结果，一个对象。\n         // babel-loader(用来做js代码转化)\n         // style-loader & css-loader(用来转化css代码)\n        // less-loader 转化less文件\n        // raw-loader 把文件当做普通的文本文件读取\n       // json-loader webpack 2以后就不需要配置了（内置了）\n      // file-loader 用来处理文件，可以用url-loader代替，但是如果你资源文件是即时文件，那么就使用fileload 指定一类对象作为文件，并且返回一个public 的url，这样可以利用浏览器的线程来加载文件，减小bundle.js的大小。\n     // url-loader 用来处理eot|woff|woff2|ttf|svg|png|jpg这些文件，可以防止加载资源文件导致页面加载缓慢url-loader 使用limit来指定一个size，当文件的大小小于这个size的时候，对象将会转化为Dataurl，直接嵌入在js中.\n       rules:[  //定义一系列的加载器，一个数组\n            {\n                test:  //正则表达式，用于匹配到的文件。\n                loader/loaders:  //字符串或者数组，处理匹配到的文件。\n                include:  //字符串或者数组，指包含的文件夹\n    　　　　　　 exclude： //字符串或者数组，指排除的文件夹\n            }\n        ],\n    }  ,\n    plugins:[  //定义插件，一个数组\n    ],\n    devServer:{}  //配置webpack开发服务功能。\n}\n```\n\n## entry\n\n（1）当entry为字符串时候，表示需要打包的路径，并且只有一个文件需要打包。\n\n（2）当为对象时候\n\n    - 为数组：表示当需要将多个模块打包成一个模块。['main.js','index.js']\n\n    - 为json时候：需要分别打包成多个模块时：\n\n```js\n  entry:{\n    bundle1:\"main1.js\",\n    bundle2:\"main2.js\"\n  }\n```\n\n## output\n\noutput.filename: 指定输出文件名，一个字符串。\n\n当输出多个文件，output.filename不能为一个确定的字符串。为了让每个文件有一个唯一的名字，需要用到变量[name]，对应entry的键名。\n\noutput.path:指定输出文件的路径，相对路径，一个字符串。\n\n## module.rules \n\nmodule.rules是一个数组，定义一系列加载器，这个数组中的每一项都是一个对象。\n\n```js\n[\n　　{\n　　　　test:正则，用于匹配要处理的文件\n　　　　loader/loaders: 字符串或者数组， 如果只需要用到一个模块加载器 ,则使用loader：string，\n　　　　如果要使用多个模块加载器，则使用loaders：array\n　　　　include:字符串或者数组，指包含的文件夹\n　　　　exclude：字符串或者数组，指排除的文件夹\n　　}\n]\n```\n\n## plugins\n\nplugins是一个数组，要使用某个插件，我们需要通过npm安装它，然后在webpack配置中的plugins关键字部分添加该插件的一个实例。\n\nHtmlWebpackPlugin插件使用\n\nHtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule: {\n    plugins: [\nnew HtmlWebpackPlugin({\n            filename: 'index.html',\n            template: 'src/app/index.html',\n            inject: true,\n            chunks: ['vendor', 'index'], //会自动将js文件插入html中\n            chunksSortMode: 'dependency',\n            minify: {\n                removeComments: true,\n                collapseWhitespace: true,\n                removeRedundantAttributes: true,\n                useShortDoctype: true,\n                removeEmptyAttributes: true,\n                removeStyleLinkTypeAttributes: true,\n                keepClosingSlash: true,\n                minifyJS: true,\n                minifyCSS: true,\n                minifyURLs: true,\n            },\n        }),\n    ]\n}\n```\n\nfilename： 输出文件的文件名称\n\ntemplate：本地模板文件的位置，支持加载器(如handlebars、ejs、undersore、html等)。\n\ninject：向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不经相同。                   1、true或者body：所有JavaScript资源插入到body元素的底部\n\n2、head: 所有JavaScript资源插入到head元素中\n3、false： 所有静态资源css和JavaScript都不会注入到模板文件中\n\nchunks：允许插入到模板中的一些chunk，不配置此项默认会将entry中所有的thunk注入到模板中。在配置多个页面时，每个页面注入的chunk应该是不相同的，需要通过该配置为不同页面注入不同的chunk； excludeChunks： 这个与chunks配置项正好相反，用来配置不允许注入的thunk。\n\nchunksSortMode： none | auto| function，默认auto； 允许指定的thunk在插入到html文档前进行排序。\n\n","source":"_posts/wb3-2.md","raw":"---\ntitle: webpack3配置文件\ncomments: true\ndescription: webpack3配置文件\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件\ndate: 2017-08-1 14:28:10\n---\n\n上篇文章使用`webpack src/main.js dist/bundle.js`打包，在工作之中并不是这么使用。\n\n`webpack`有一个默认的配置文件\n\n`webpack.config.js``，这个文件需要手动的创建，位于项目根目录中。\n\nwebpack`配置文件会暴露一个一个对象：\n\n```js\nmodule.exports = {\n//配置项\n}\n```\n\n常用配置项将要说明：\n\n```js\nmodule.exports = {\n    entry:\"\",  // 打包的入口文件，一个字符串或者一个对象。\n    output:{  // 配置打包的结果，一个对象\n        path:\"\",   //定义输出文件路径  ，一个字符串。\n        filename:\"\"    // 定义输出文件名，一个字符串。\n    },\n    module:{  //配置打包的结果，一个对象。\n         // babel-loader(用来做js代码转化)\n         // style-loader & css-loader(用来转化css代码)\n        // less-loader 转化less文件\n        // raw-loader 把文件当做普通的文本文件读取\n       // json-loader webpack 2以后就不需要配置了（内置了）\n      // file-loader 用来处理文件，可以用url-loader代替，但是如果你资源文件是即时文件，那么就使用fileload 指定一类对象作为文件，并且返回一个public 的url，这样可以利用浏览器的线程来加载文件，减小bundle.js的大小。\n     // url-loader 用来处理eot|woff|woff2|ttf|svg|png|jpg这些文件，可以防止加载资源文件导致页面加载缓慢url-loader 使用limit来指定一个size，当文件的大小小于这个size的时候，对象将会转化为Dataurl，直接嵌入在js中.\n       rules:[  //定义一系列的加载器，一个数组\n            {\n                test:  //正则表达式，用于匹配到的文件。\n                loader/loaders:  //字符串或者数组，处理匹配到的文件。\n                include:  //字符串或者数组，指包含的文件夹\n    　　　　　　 exclude： //字符串或者数组，指排除的文件夹\n            }\n        ],\n    }  ,\n    plugins:[  //定义插件，一个数组\n    ],\n    devServer:{}  //配置webpack开发服务功能。\n}\n```\n\n## entry\n\n（1）当entry为字符串时候，表示需要打包的路径，并且只有一个文件需要打包。\n\n（2）当为对象时候\n\n    - 为数组：表示当需要将多个模块打包成一个模块。['main.js','index.js']\n\n    - 为json时候：需要分别打包成多个模块时：\n\n```js\n  entry:{\n    bundle1:\"main1.js\",\n    bundle2:\"main2.js\"\n  }\n```\n\n## output\n\noutput.filename: 指定输出文件名，一个字符串。\n\n当输出多个文件，output.filename不能为一个确定的字符串。为了让每个文件有一个唯一的名字，需要用到变量[name]，对应entry的键名。\n\noutput.path:指定输出文件的路径，相对路径，一个字符串。\n\n## module.rules \n\nmodule.rules是一个数组，定义一系列加载器，这个数组中的每一项都是一个对象。\n\n```js\n[\n　　{\n　　　　test:正则，用于匹配要处理的文件\n　　　　loader/loaders: 字符串或者数组， 如果只需要用到一个模块加载器 ,则使用loader：string，\n　　　　如果要使用多个模块加载器，则使用loaders：array\n　　　　include:字符串或者数组，指包含的文件夹\n　　　　exclude：字符串或者数组，指排除的文件夹\n　　}\n]\n```\n\n## plugins\n\nplugins是一个数组，要使用某个插件，我们需要通过npm安装它，然后在webpack配置中的plugins关键字部分添加该插件的一个实例。\n\nHtmlWebpackPlugin插件使用\n\nHtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule: {\n    plugins: [\nnew HtmlWebpackPlugin({\n            filename: 'index.html',\n            template: 'src/app/index.html',\n            inject: true,\n            chunks: ['vendor', 'index'], //会自动将js文件插入html中\n            chunksSortMode: 'dependency',\n            minify: {\n                removeComments: true,\n                collapseWhitespace: true,\n                removeRedundantAttributes: true,\n                useShortDoctype: true,\n                removeEmptyAttributes: true,\n                removeStyleLinkTypeAttributes: true,\n                keepClosingSlash: true,\n                minifyJS: true,\n                minifyCSS: true,\n                minifyURLs: true,\n            },\n        }),\n    ]\n}\n```\n\nfilename： 输出文件的文件名称\n\ntemplate：本地模板文件的位置，支持加载器(如handlebars、ejs、undersore、html等)。\n\ninject：向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不经相同。                   1、true或者body：所有JavaScript资源插入到body元素的底部\n\n2、head: 所有JavaScript资源插入到head元素中\n3、false： 所有静态资源css和JavaScript都不会注入到模板文件中\n\nchunks：允许插入到模板中的一些chunk，不配置此项默认会将entry中所有的thunk注入到模板中。在配置多个页面时，每个页面注入的chunk应该是不相同的，需要通过该配置为不同页面注入不同的chunk； excludeChunks： 这个与chunks配置项正好相反，用来配置不允许注入的thunk。\n\nchunksSortMode： none | auto| function，默认auto； 允许指定的thunk在插入到html文档前进行排序。\n\n","slug":"wb3-2","published":1,"updated":"2020-12-02T06:49:34.151Z","layout":"post","photos":[],"link":"","_id":"cki71wam8005rtl9kv3f14s8r","content":"<p>上篇文章使用<code>webpack src/main.js dist/bundle.js</code>打包，在工作之中并不是这么使用。</p>\n<p><code>webpack</code>有一个默认的配置文件</p>\n<p>`webpack.config.js``，这个文件需要手动的创建，位于项目根目录中。</p>\n<p>webpack`配置文件会暴露一个一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"><span class=\"comment\">//配置项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用配置项将要说明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry:<span class=\"string\">\"\"</span>,  <span class=\"comment\">// 打包的入口文件，一个字符串或者一个对象。</span></span><br><span class=\"line\">    output:&#123;  <span class=\"comment\">// 配置打包的结果，一个对象</span></span><br><span class=\"line\">        path:<span class=\"string\">\"\"</span>,   <span class=\"comment\">//定义输出文件路径  ，一个字符串。</span></span><br><span class=\"line\">        filename:<span class=\"string\">\"\"</span>    <span class=\"comment\">// 定义输出文件名，一个字符串。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;  <span class=\"comment\">//配置打包的结果，一个对象。</span></span><br><span class=\"line\">         <span class=\"comment\">// babel-loader(用来做js代码转化)</span></span><br><span class=\"line\">         <span class=\"comment\">// style-loader &amp; css-loader(用来转化css代码)</span></span><br><span class=\"line\">        <span class=\"comment\">// less-loader 转化less文件</span></span><br><span class=\"line\">        <span class=\"comment\">// raw-loader 把文件当做普通的文本文件读取</span></span><br><span class=\"line\">       <span class=\"comment\">// json-loader webpack 2以后就不需要配置了（内置了）</span></span><br><span class=\"line\">      <span class=\"comment\">// file-loader 用来处理文件，可以用url-loader代替，但是如果你资源文件是即时文件，那么就使用fileload 指定一类对象作为文件，并且返回一个public 的url，这样可以利用浏览器的线程来加载文件，减小bundle.js的大小。</span></span><br><span class=\"line\">     <span class=\"comment\">// url-loader 用来处理eot|woff|woff2|ttf|svg|png|jpg这些文件，可以防止加载资源文件导致页面加载缓慢url-loader 使用limit来指定一个size，当文件的大小小于这个size的时候，对象将会转化为Dataurl，直接嵌入在js中.</span></span><br><span class=\"line\">       rules:[  <span class=\"comment\">//定义一系列的加载器，一个数组</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:  <span class=\"comment\">//正则表达式，用于匹配到的文件。</span></span><br><span class=\"line\">                loader/loaders:  <span class=\"comment\">//字符串或者数组，处理匹配到的文件。</span></span><br><span class=\"line\">                include:  <span class=\"comment\">//字符串或者数组，指包含的文件夹</span></span><br><span class=\"line\">    　　　　　　 exclude： <span class=\"comment\">//字符串或者数组，指排除的文件夹</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;  ,</span><br><span class=\"line\">    plugins:[  <span class=\"comment\">//定义插件，一个数组</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    devServer:&#123;&#125;  <span class=\"comment\">//配置webpack开发服务功能。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2><p>（1）当entry为字符串时候，表示需要打包的路径，并且只有一个文件需要打包。</p>\n<p>（2）当为对象时候</p>\n<pre><code>- 为数组：表示当需要将多个模块打包成一个模块。[&apos;main.js&apos;,&apos;index.js&apos;]\n\n- 为json时候：需要分别打包成多个模块时：</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  bundle1:<span class=\"string\">\"main1.js\"</span>,</span><br><span class=\"line\">  bundle2:<span class=\"string\">\"main2.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p>output.filename: 指定输出文件名，一个字符串。</p>\n<p>当输出多个文件，output.filename不能为一个确定的字符串。为了让每个文件有一个唯一的名字，需要用到变量[name]，对应entry的键名。</p>\n<p>output.path:指定输出文件的路径，相对路径，一个字符串。</p>\n<h2 id=\"module-rules\"><a href=\"#module-rules\" class=\"headerlink\" title=\"module.rules\"></a>module.rules</h2><p>module.rules是一个数组，定义一系列加载器，这个数组中的每一项都是一个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">　　&#123;</span><br><span class=\"line\">　　　　test:正则，用于匹配要处理的文件</span><br><span class=\"line\">　　　　loader/loaders: 字符串或者数组， 如果只需要用到一个模块加载器 ,则使用loader：string，</span><br><span class=\"line\">　　　　如果要使用多个模块加载器，则使用loaders：array</span><br><span class=\"line\">　　　　include:字符串或者数组，指包含的文件夹</span><br><span class=\"line\">　　　　exclude：字符串或者数组，指排除的文件夹</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>plugins是一个数组，要使用某个插件，我们需要通过npm安装它，然后在webpack配置中的plugins关键字部分添加该插件的一个实例。</p>\n<p>HtmlWebpackPlugin插件使用</p>\n<p>HtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'src/app/index.html'</span>,</span><br><span class=\"line\">            inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'vendor'</span>, <span class=\"string\">'index'</span>], <span class=\"comment\">//会自动将js文件插入html中</span></span><br><span class=\"line\">            chunksSortMode: <span class=\"string\">'dependency'</span>,</span><br><span class=\"line\">            minify: &#123;</span><br><span class=\"line\">                removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeRedundantAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                useShortDoctype: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeEmptyAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeStyleLinkTypeAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                keepClosingSlash: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filename： 输出文件的文件名称</p>\n<p>template：本地模板文件的位置，支持加载器(如handlebars、ejs、undersore、html等)。</p>\n<p>inject：向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不经相同。                   1、true或者body：所有JavaScript资源插入到body元素的底部</p>\n<p>2、head: 所有JavaScript资源插入到head元素中<br>3、false： 所有静态资源css和JavaScript都不会注入到模板文件中</p>\n<p>chunks：允许插入到模板中的一些chunk，不配置此项默认会将entry中所有的thunk注入到模板中。在配置多个页面时，每个页面注入的chunk应该是不相同的，需要通过该配置为不同页面注入不同的chunk； excludeChunks： 这个与chunks配置项正好相反，用来配置不允许注入的thunk。</p>\n<p>chunksSortMode： none | auto| function，默认auto； 允许指定的thunk在插入到html文档前进行排序。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>上篇文章使用<code>webpack src/main.js dist/bundle.js</code>打包，在工作之中并不是这么使用。</p>\n<p><code>webpack</code>有一个默认的配置文件</p>\n<p>`webpack.config.js``，这个文件需要手动的创建，位于项目根目录中。</p>\n<p>webpack`配置文件会暴露一个一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"><span class=\"comment\">//配置项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用配置项将要说明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry:<span class=\"string\">\"\"</span>,  <span class=\"comment\">// 打包的入口文件，一个字符串或者一个对象。</span></span><br><span class=\"line\">    output:&#123;  <span class=\"comment\">// 配置打包的结果，一个对象</span></span><br><span class=\"line\">        path:<span class=\"string\">\"\"</span>,   <span class=\"comment\">//定义输出文件路径  ，一个字符串。</span></span><br><span class=\"line\">        filename:<span class=\"string\">\"\"</span>    <span class=\"comment\">// 定义输出文件名，一个字符串。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;  <span class=\"comment\">//配置打包的结果，一个对象。</span></span><br><span class=\"line\">         <span class=\"comment\">// babel-loader(用来做js代码转化)</span></span><br><span class=\"line\">         <span class=\"comment\">// style-loader &amp; css-loader(用来转化css代码)</span></span><br><span class=\"line\">        <span class=\"comment\">// less-loader 转化less文件</span></span><br><span class=\"line\">        <span class=\"comment\">// raw-loader 把文件当做普通的文本文件读取</span></span><br><span class=\"line\">       <span class=\"comment\">// json-loader webpack 2以后就不需要配置了（内置了）</span></span><br><span class=\"line\">      <span class=\"comment\">// file-loader 用来处理文件，可以用url-loader代替，但是如果你资源文件是即时文件，那么就使用fileload 指定一类对象作为文件，并且返回一个public 的url，这样可以利用浏览器的线程来加载文件，减小bundle.js的大小。</span></span><br><span class=\"line\">     <span class=\"comment\">// url-loader 用来处理eot|woff|woff2|ttf|svg|png|jpg这些文件，可以防止加载资源文件导致页面加载缓慢url-loader 使用limit来指定一个size，当文件的大小小于这个size的时候，对象将会转化为Dataurl，直接嵌入在js中.</span></span><br><span class=\"line\">       rules:[  <span class=\"comment\">//定义一系列的加载器，一个数组</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:  <span class=\"comment\">//正则表达式，用于匹配到的文件。</span></span><br><span class=\"line\">                loader/loaders:  <span class=\"comment\">//字符串或者数组，处理匹配到的文件。</span></span><br><span class=\"line\">                include:  <span class=\"comment\">//字符串或者数组，指包含的文件夹</span></span><br><span class=\"line\">    　　　　　　 exclude： <span class=\"comment\">//字符串或者数组，指排除的文件夹</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;  ,</span><br><span class=\"line\">    plugins:[  <span class=\"comment\">//定义插件，一个数组</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    devServer:&#123;&#125;  <span class=\"comment\">//配置webpack开发服务功能。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2><p>（1）当entry为字符串时候，表示需要打包的路径，并且只有一个文件需要打包。</p>\n<p>（2）当为对象时候</p>\n<pre><code>- 为数组：表示当需要将多个模块打包成一个模块。[&apos;main.js&apos;,&apos;index.js&apos;]\n\n- 为json时候：需要分别打包成多个模块时：</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  bundle1:<span class=\"string\">\"main1.js\"</span>,</span><br><span class=\"line\">  bundle2:<span class=\"string\">\"main2.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p>output.filename: 指定输出文件名，一个字符串。</p>\n<p>当输出多个文件，output.filename不能为一个确定的字符串。为了让每个文件有一个唯一的名字，需要用到变量[name]，对应entry的键名。</p>\n<p>output.path:指定输出文件的路径，相对路径，一个字符串。</p>\n<h2 id=\"module-rules\"><a href=\"#module-rules\" class=\"headerlink\" title=\"module.rules\"></a>module.rules</h2><p>module.rules是一个数组，定义一系列加载器，这个数组中的每一项都是一个对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">　　&#123;</span><br><span class=\"line\">　　　　test:正则，用于匹配要处理的文件</span><br><span class=\"line\">　　　　loader/loaders: 字符串或者数组， 如果只需要用到一个模块加载器 ,则使用loader：string，</span><br><span class=\"line\">　　　　如果要使用多个模块加载器，则使用loaders：array</span><br><span class=\"line\">　　　　include:字符串或者数组，指包含的文件夹</span><br><span class=\"line\">　　　　exclude：字符串或者数组，指排除的文件夹</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h2><p>plugins是一个数组，要使用某个插件，我们需要通过npm安装它，然后在webpack配置中的plugins关键字部分添加该插件的一个实例。</p>\n<p>HtmlWebpackPlugin插件使用</p>\n<p>HtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            template: <span class=\"string\">'src/app/index.html'</span>,</span><br><span class=\"line\">            inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'vendor'</span>, <span class=\"string\">'index'</span>], <span class=\"comment\">//会自动将js文件插入html中</span></span><br><span class=\"line\">            chunksSortMode: <span class=\"string\">'dependency'</span>,</span><br><span class=\"line\">            minify: &#123;</span><br><span class=\"line\">                removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeRedundantAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                useShortDoctype: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeEmptyAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeStyleLinkTypeAttributes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                keepClosingSlash: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filename： 输出文件的文件名称</p>\n<p>template：本地模板文件的位置，支持加载器(如handlebars、ejs、undersore、html等)。</p>\n<p>inject：向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不经相同。                   1、true或者body：所有JavaScript资源插入到body元素的底部</p>\n<p>2、head: 所有JavaScript资源插入到head元素中<br>3、false： 所有静态资源css和JavaScript都不会注入到模板文件中</p>\n<p>chunks：允许插入到模板中的一些chunk，不配置此项默认会将entry中所有的thunk注入到模板中。在配置多个页面时，每个页面注入的chunk应该是不相同的，需要通过该配置为不同页面注入不同的chunk； excludeChunks： 这个与chunks配置项正好相反，用来配置不允许注入的thunk。</p>\n<p>chunksSortMode： none | auto| function，默认auto； 允许指定的thunk在插入到html文档前进行排序。</p>\n"},{"title":"entry，output配置","comments":1,"description":"entry，output配置","keywords":"webpack, webpack3 ,webpack3配置文件, entry，output配置","date":"2017-08-03T00:18:09.000Z","_content":"\n在根目录下添加`webpack.config.js`文件：\n\n```js\nconst path = require(\"path\")\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js'\n    }\n}\n```\n\n`path.resolve(__dirname,’dist’)`就是获取了项目的绝对路径。\n\n`filename`:是打包后的文件名称。\n\n可以在终端中直接输入`webpack`就会进行打包。\n\n多入口多出口的配置：\n\n在src下新建一个main1.js写入：\n\n```js\ndocument.write('<h3>hello webpack</h3>')\n```\n\ndist内的index.html文件引入bundle1.js文件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"bundle.js\"></script>\n    <script src=\"bundle1.js\"></script>\n</body>\n</html>\n```\n\n在`webpack.config.js`：\n\n```js\nconst path = require(\"path\")\nmodule.exports = {\n    entry: {\n        bundle: \"./src/main.js\",\n        bundle1: \"./src/main1.js\"\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js'\n    }\n}\n```\n\n[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。\n\n在终端中直接输入webpack就会进行打包：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/3.png)\n","source":"_posts/wb3-3.md","raw":"---\ntitle: entry，output配置\ncomments: true\ndescription: entry，output配置\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件, entry，output配置\ndate: 2017-08-3 08:18:09\n---\n\n在根目录下添加`webpack.config.js`文件：\n\n```js\nconst path = require(\"path\")\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js'\n    }\n}\n```\n\n`path.resolve(__dirname,’dist’)`就是获取了项目的绝对路径。\n\n`filename`:是打包后的文件名称。\n\n可以在终端中直接输入`webpack`就会进行打包。\n\n多入口多出口的配置：\n\n在src下新建一个main1.js写入：\n\n```js\ndocument.write('<h3>hello webpack</h3>')\n```\n\ndist内的index.html文件引入bundle1.js文件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"bundle.js\"></script>\n    <script src=\"bundle1.js\"></script>\n</body>\n</html>\n```\n\n在`webpack.config.js`：\n\n```js\nconst path = require(\"path\")\nmodule.exports = {\n    entry: {\n        bundle: \"./src/main.js\",\n        bundle1: \"./src/main1.js\"\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js'\n    }\n}\n```\n\n[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。\n\n在终端中直接输入webpack就会进行打包：\n\n![](http://www.hbbaly.com/wp-content/uploads/2018/03/3.png)\n","slug":"wb3-3","published":1,"updated":"2020-12-02T06:49:34.151Z","layout":"post","photos":[],"link":"","_id":"cki71wamb005wtl9ku7yzmnyt","content":"<p>在根目录下添加<code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>path.resolve(__dirname,’dist’)</code>就是获取了项目的绝对路径。</p>\n<p><code>filename</code>:是打包后的文件名称。</p>\n<p>可以在终端中直接输入<code>webpack</code>就会进行打包。</p>\n<p>多入口多出口的配置：</p>\n<p>在src下新建一个main1.js写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h3&gt;hello webpack&lt;/h3&gt;'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>dist内的index.html文件引入bundle1.js文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        bundle: <span class=\"string\">\"./src/main.js\"</span>,</span><br><span class=\"line\">        bundle1: <span class=\"string\">\"./src/main1.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</p>\n<p>在终端中直接输入webpack就会进行打包：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/3.png\" alt></p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>在根目录下添加<code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>path.resolve(__dirname,’dist’)</code>就是获取了项目的绝对路径。</p>\n<p><code>filename</code>:是打包后的文件名称。</p>\n<p>可以在终端中直接输入<code>webpack</code>就会进行打包。</p>\n<p>多入口多出口的配置：</p>\n<p>在src下新建一个main1.js写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;h3&gt;hello webpack&lt;/h3&gt;'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>dist内的index.html文件引入bundle1.js文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        bundle: <span class=\"string\">\"./src/main.js\"</span>,</span><br><span class=\"line\">        bundle1: <span class=\"string\">\"./src/main1.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</p>\n<p>在终端中直接输入webpack就会进行打包：</p>\n<p><img src=\"http://www.hbbaly.com/wp-content/uploads/2018/03/3.png\" alt></p>\n"},{"title":"html，css文件打包，js文件压缩","comments":1,"description":"html，css文件打包，js文件压缩","keywords":"webpack, webpack3 ,webpack3配置文件, html，css文件打包，js文件压缩","date":"2017-08-03T02:09:29.000Z","_content":"\n## html文件的发布\n\n在webpack使用那篇文章中我们的目录结构其实有点问题，index.html文件应该是在src目录下的，剪切dist文件夹下面的index.html，复制到src文件夹下面。\n\n（1）安装html-webpack-plugin插件(使用cnpm来安装)\n\n```sh\ncnpm install --save-dev html-webpack-plugin\n```\n\n（2）在webpack.config.js内引入html-webpack-plugin\n```js\nconst htmlPlugin = require('html-webpack-plugin')\n```\n（3）在plugins内配置插件：\n\n```js\nnew htmlPlugin({\n    minify:{\n      removeAttributeQuotes:true\n    },\n    hash:true,\n    template:'./src/index.html'\n })\n```\n- minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。\n- hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。\n- template：是要打包的html模版路径和文件名称。\n之后输入命令webpack，可以看到在dist文件夹内生成index.html文件。\n\n## css文件的打包\n\n（1）在src文件夹下新建css文件夹，在css文件夹内新建main.css文件，编写：\n\n```css\nbody{\n  background:yellow;\n}\n```\n（2）在main.js文件内引入main.css：\n\n```js\nrequire(\"./css/main.css\")\ndocument.write(\"<h1>hello webpack</h1>\")\n```\n\n（3）安装css-loader与style-loader\n\n```sh\ncnpm install --save-dev css-loader style-loader\n```\n\n(4)修改webpack.config.js中module属性中的配置：\n\n```js\nmodule:{\n  rules:[\n    {\n      test:/\\.css$/,\n      use:['style-loader','css-loader']\n    }\n  ]\n}\n```\n\n输入命令webpack进行打包。\n\n\n## js文件压缩\n\n（1）webpack.config.js文件中引入uglifyjs插件（虽然uglifyjs是插件，但是webpack版本里默认已经集成，不需要再次安装。）：\n\n```js\nconst uglify = require('uglifyjs-webpack-plugin')\n```\n\n（2）引入后在plugins配置里new一个 uglify对象就可以了：\n\n```js\nnew uglify()\n```","source":"_posts/wb3-4.md","raw":"---\ntitle: html，css文件打包，js文件压缩\ncomments: true\ndescription: html，css文件打包，js文件压缩\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件, html，css文件打包，js文件压缩\ndate: 2017-08-3 10:09:29\n---\n\n## html文件的发布\n\n在webpack使用那篇文章中我们的目录结构其实有点问题，index.html文件应该是在src目录下的，剪切dist文件夹下面的index.html，复制到src文件夹下面。\n\n（1）安装html-webpack-plugin插件(使用cnpm来安装)\n\n```sh\ncnpm install --save-dev html-webpack-plugin\n```\n\n（2）在webpack.config.js内引入html-webpack-plugin\n```js\nconst htmlPlugin = require('html-webpack-plugin')\n```\n（3）在plugins内配置插件：\n\n```js\nnew htmlPlugin({\n    minify:{\n      removeAttributeQuotes:true\n    },\n    hash:true,\n    template:'./src/index.html'\n })\n```\n- minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。\n- hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。\n- template：是要打包的html模版路径和文件名称。\n之后输入命令webpack，可以看到在dist文件夹内生成index.html文件。\n\n## css文件的打包\n\n（1）在src文件夹下新建css文件夹，在css文件夹内新建main.css文件，编写：\n\n```css\nbody{\n  background:yellow;\n}\n```\n（2）在main.js文件内引入main.css：\n\n```js\nrequire(\"./css/main.css\")\ndocument.write(\"<h1>hello webpack</h1>\")\n```\n\n（3）安装css-loader与style-loader\n\n```sh\ncnpm install --save-dev css-loader style-loader\n```\n\n(4)修改webpack.config.js中module属性中的配置：\n\n```js\nmodule:{\n  rules:[\n    {\n      test:/\\.css$/,\n      use:['style-loader','css-loader']\n    }\n  ]\n}\n```\n\n输入命令webpack进行打包。\n\n\n## js文件压缩\n\n（1）webpack.config.js文件中引入uglifyjs插件（虽然uglifyjs是插件，但是webpack版本里默认已经集成，不需要再次安装。）：\n\n```js\nconst uglify = require('uglifyjs-webpack-plugin')\n```\n\n（2）引入后在plugins配置里new一个 uglify对象就可以了：\n\n```js\nnew uglify()\n```","slug":"wb3-4","published":1,"updated":"2020-12-02T06:49:34.152Z","layout":"post","photos":[],"link":"","_id":"cki71wamd005ztl9koh9is1kz","content":"<h2 id=\"html文件的发布\"><a href=\"#html文件的发布\" class=\"headerlink\" title=\"html文件的发布\"></a>html文件的发布</h2><p>在webpack使用那篇文章中我们的目录结构其实有点问题，index.html文件应该是在src目录下的，剪切dist文件夹下面的index.html，复制到src文件夹下面。</p>\n<p>（1）安装html-webpack-plugin插件(使用cnpm来安装)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>（2）在webpack.config.js内引入html-webpack-plugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> htmlPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）在plugins内配置插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> htmlPlugin(&#123;</span><br><span class=\"line\">    minify:&#123;</span><br><span class=\"line\">      removeAttributeQuotes:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    template:<span class=\"string\">'./src/index.html'</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。</li>\n<li>hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。</li>\n<li>template：是要打包的html模版路径和文件名称。<br>之后输入命令webpack，可以看到在dist文件夹内生成index.html文件。</li>\n</ul>\n<h2 id=\"css文件的打包\"><a href=\"#css文件的打包\" class=\"headerlink\" title=\"css文件的打包\"></a>css文件的打包</h2><p>（1）在src文件夹下新建css文件夹，在css文件夹内新建main.css文件，编写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）在main.js文件内引入main.css：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.css\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;hello webpack&lt;/h1&gt;\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）安装css-loader与style-loader</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure>\n\n<p>(4)修改webpack.config.js中module属性中的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">  rules:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入命令webpack进行打包。</p>\n<h2 id=\"js文件压缩\"><a href=\"#js文件压缩\" class=\"headerlink\" title=\"js文件压缩\"></a>js文件压缩</h2><p>（1）webpack.config.js文件中引入uglifyjs插件（虽然uglifyjs是插件，但是webpack版本里默认已经集成，不需要再次安装。）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（2）引入后在plugins配置里new一个 uglify对象就可以了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> uglify()</span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"html文件的发布\"><a href=\"#html文件的发布\" class=\"headerlink\" title=\"html文件的发布\"></a>html文件的发布</h2><p>在webpack使用那篇文章中我们的目录结构其实有点问题，index.html文件应该是在src目录下的，剪切dist文件夹下面的index.html，复制到src文件夹下面。</p>\n<p>（1）安装html-webpack-plugin插件(使用cnpm来安装)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>（2）在webpack.config.js内引入html-webpack-plugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> htmlPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）在plugins内配置插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> htmlPlugin(&#123;</span><br><span class=\"line\">    minify:&#123;</span><br><span class=\"line\">      removeAttributeQuotes:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    template:<span class=\"string\">'./src/index.html'</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。</li>\n<li>hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。</li>\n<li>template：是要打包的html模版路径和文件名称。<br>之后输入命令webpack，可以看到在dist文件夹内生成index.html文件。</li>\n</ul>\n<h2 id=\"css文件的打包\"><a href=\"#css文件的打包\" class=\"headerlink\" title=\"css文件的打包\"></a>css文件的打包</h2><p>（1）在src文件夹下新建css文件夹，在css文件夹内新建main.css文件，编写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）在main.js文件内引入main.css：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.css\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;hello webpack&lt;/h1&gt;\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）安装css-loader与style-loader</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure>\n\n<p>(4)修改webpack.config.js中module属性中的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">  rules:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入命令webpack进行打包。</p>\n<h2 id=\"js文件压缩\"><a href=\"#js文件压缩\" class=\"headerlink\" title=\"js文件压缩\"></a>js文件压缩</h2><p>（1）webpack.config.js文件中引入uglifyjs插件（虽然uglifyjs是插件，但是webpack版本里默认已经集成，不需要再次安装。）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（2）引入后在plugins配置里new一个 uglify对象就可以了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> uglify()</span><br></pre></td></tr></table></figure>"},{"title":"CSS分离与图片路径处理","comments":1,"description":"CSS分离与图片路径处理压缩","keywords":"webpack, webpack3 ,webpack3配置文件, CSS分离与图片路径处理","date":"2017-08-03T12:19:29.000Z","_content":"\n## CSS从JavasScript代码中分离出来\n\n（1）安装插件：\nextract-text-webpack-plugin插件\n\n```sh\ncnpm install --save-dev extract-text-webpack-plugin\n```\n\n（2）在webpack.config.js中引入此插件\n\n```js\nconst extractText = require('extract-text-webpack-plugin')\n```\n\n（3）引入成功后配置plugins\n\n```js\nnew extractText(\"css/main.css\")\n```\n\n（4）这里还要修改module中关于style-loader与css-loader代码：\n\n```js\n{\n  test:/\\.css$/,\n  use:extractText.extract({\n    fallback:'style-loader',\n    use:'css-loader'\n  })\n}\n```\n\n输入命令webpack打包之后发现在dist文件夹内生成css文件夹及其内main.css,实现了css分离。\n\n但是css内的图片路径不对，导致图片不能显示。\n\n## 图片路径处理\n可以用publicPath来解决css分离后路径不对问题。\n\n（1）在webpack.config.js文件头部写入：\n\n```js\nconst public = {\n    publicPath:'http://ip:port/'\n}\n```\n\n这里的ip和port，是你本机的ip或者是你devServer配置的ip和端口。\n\n（2）在output中引用publicPath：\n\n```js\noutput:{\n    path:path.resolve(__dirname,'dist'),\n    filename:'bundle.js',\n    publicPath:public.publicPath\n},\n```\n\n使用webpack命令进行打包，发现原来的相对路径改为了绝对路径。\n\n## 处理html中的图片\n\n处理html中图片，使用html-withimg-loader插件来处理。\n\n（1）：安装html-withimg-loader插件：\n\n```sh\ncnpm install --save-dev html-withimg-loader\n```\n（2）配置loader\n\n```js\n{\n    test:/\\.(htm|html)$/i,\n    use:['html-withimg-loader']\n }\n```\n\n使用webpack，在dist中index.html可以看到img标签的src。","source":"_posts/wb3-5.md","raw":"---\ntitle: CSS分离与图片路径处理\ncomments: true\ndescription: CSS分离与图片路径处理压缩\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件, CSS分离与图片路径处理\ndate: 2017-08-3 20:19:29\n---\n\n## CSS从JavasScript代码中分离出来\n\n（1）安装插件：\nextract-text-webpack-plugin插件\n\n```sh\ncnpm install --save-dev extract-text-webpack-plugin\n```\n\n（2）在webpack.config.js中引入此插件\n\n```js\nconst extractText = require('extract-text-webpack-plugin')\n```\n\n（3）引入成功后配置plugins\n\n```js\nnew extractText(\"css/main.css\")\n```\n\n（4）这里还要修改module中关于style-loader与css-loader代码：\n\n```js\n{\n  test:/\\.css$/,\n  use:extractText.extract({\n    fallback:'style-loader',\n    use:'css-loader'\n  })\n}\n```\n\n输入命令webpack打包之后发现在dist文件夹内生成css文件夹及其内main.css,实现了css分离。\n\n但是css内的图片路径不对，导致图片不能显示。\n\n## 图片路径处理\n可以用publicPath来解决css分离后路径不对问题。\n\n（1）在webpack.config.js文件头部写入：\n\n```js\nconst public = {\n    publicPath:'http://ip:port/'\n}\n```\n\n这里的ip和port，是你本机的ip或者是你devServer配置的ip和端口。\n\n（2）在output中引用publicPath：\n\n```js\noutput:{\n    path:path.resolve(__dirname,'dist'),\n    filename:'bundle.js',\n    publicPath:public.publicPath\n},\n```\n\n使用webpack命令进行打包，发现原来的相对路径改为了绝对路径。\n\n## 处理html中的图片\n\n处理html中图片，使用html-withimg-loader插件来处理。\n\n（1）：安装html-withimg-loader插件：\n\n```sh\ncnpm install --save-dev html-withimg-loader\n```\n（2）配置loader\n\n```js\n{\n    test:/\\.(htm|html)$/i,\n    use:['html-withimg-loader']\n }\n```\n\n使用webpack，在dist中index.html可以看到img标签的src。","slug":"wb3-5","published":1,"updated":"2020-12-02T06:49:34.153Z","layout":"post","photos":[],"link":"","_id":"cki71wame0064tl9k5stcwc63","content":"<h2 id=\"CSS从JavasScript代码中分离出来\"><a href=\"#CSS从JavasScript代码中分离出来\" class=\"headerlink\" title=\"CSS从JavasScript代码中分离出来\"></a>CSS从JavasScript代码中分离出来</h2><p>（1）安装插件：<br>extract-text-webpack-plugin插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>（2）在webpack.config.js中引入此插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> extractText = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）引入成功后配置plugins</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> extractText(<span class=\"string\">\"css/main.css\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（4）这里还要修改module中关于style-loader与css-loader代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">    fallback:<span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">    use:<span class=\"string\">'css-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入命令webpack打包之后发现在dist文件夹内生成css文件夹及其内main.css,实现了css分离。</p>\n<p>但是css内的图片路径不对，导致图片不能显示。</p>\n<h2 id=\"图片路径处理\"><a href=\"#图片路径处理\" class=\"headerlink\" title=\"图片路径处理\"></a>图片路径处理</h2><p>可以用publicPath来解决css分离后路径不对问题。</p>\n<p>（1）在webpack.config.js文件头部写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> public = &#123;</span><br><span class=\"line\">    publicPath:<span class=\"string\">'http://ip:port/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的ip和port，是你本机的ip或者是你devServer配置的ip和端口。</p>\n<p>（2）在output中引用publicPath：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    publicPath:public.publicPath</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack命令进行打包，发现原来的相对路径改为了绝对路径。</p>\n<h2 id=\"处理html中的图片\"><a href=\"#处理html中的图片\" class=\"headerlink\" title=\"处理html中的图片\"></a>处理html中的图片</h2><p>处理html中图片，使用html-withimg-loader插件来处理。</p>\n<p>（1）：安装html-withimg-loader插件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev html-withimg-loader</span><br></pre></td></tr></table></figure>\n\n<p>（2）配置loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test:<span class=\"regexp\">/\\.(htm|html)$/i</span>,</span><br><span class=\"line\">    use:[<span class=\"string\">'html-withimg-loader'</span>]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack，在dist中index.html可以看到img标签的src。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"CSS从JavasScript代码中分离出来\"><a href=\"#CSS从JavasScript代码中分离出来\" class=\"headerlink\" title=\"CSS从JavasScript代码中分离出来\"></a>CSS从JavasScript代码中分离出来</h2><p>（1）安装插件：<br>extract-text-webpack-plugin插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev extract-text-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>（2）在webpack.config.js中引入此插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> extractText = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）引入成功后配置plugins</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> extractText(<span class=\"string\">\"css/main.css\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（4）这里还要修改module中关于style-loader与css-loader代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">    fallback:<span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">    use:<span class=\"string\">'css-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入命令webpack打包之后发现在dist文件夹内生成css文件夹及其内main.css,实现了css分离。</p>\n<p>但是css内的图片路径不对，导致图片不能显示。</p>\n<h2 id=\"图片路径处理\"><a href=\"#图片路径处理\" class=\"headerlink\" title=\"图片路径处理\"></a>图片路径处理</h2><p>可以用publicPath来解决css分离后路径不对问题。</p>\n<p>（1）在webpack.config.js文件头部写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> public = &#123;</span><br><span class=\"line\">    publicPath:<span class=\"string\">'http://ip:port/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的ip和port，是你本机的ip或者是你devServer配置的ip和端口。</p>\n<p>（2）在output中引用publicPath：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    publicPath:public.publicPath</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack命令进行打包，发现原来的相对路径改为了绝对路径。</p>\n<h2 id=\"处理html中的图片\"><a href=\"#处理html中的图片\" class=\"headerlink\" title=\"处理html中的图片\"></a>处理html中的图片</h2><p>处理html中图片，使用html-withimg-loader插件来处理。</p>\n<p>（1）：安装html-withimg-loader插件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev html-withimg-loader</span><br></pre></td></tr></table></figure>\n\n<p>（2）配置loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test:<span class=\"regexp\">/\\.(htm|html)$/i</span>,</span><br><span class=\"line\">    use:[<span class=\"string\">'html-withimg-loader'</span>]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack，在dist中index.html可以看到img标签的src。</p>\n"},{"title":"Less，Sass文件的打包和分离，babel支持","comments":1,"description":"Less，Sass文件的打包和分离，babel支持","keywords":"webpack, webpack3 ,webpack3配置文件, Less，Sass文件的打包和分离，babel支持","date":"2017-08-05T12:19:29.000Z","_content":"\n## less文件的打包和分离\n\n（1）安装less，less-loader\n\n```sh\ncnpm install --save-dev less\ncnpm install --save-dev less-loader\n```\n\n（2）编写less文件，并且在entry.js中引入。\n\n```scss\n@base : #f60;\n#img{\n     color:@base;\n}\n```\n\nmain.js头部：\n\n```js\nrequire(\"./css/main.less\")\n```\n\n使用webpack命令，这是less文件已经打包好了，但是在entry.js中，所以我们要把less文件分离：\n\n（3）less文件分离\n\n```js\n{\n  test:/\\.less$/,\n  use:extractText.extract({\n    use:[\n        {loader:'css-loader'},\n        {loader:'less-loader'}\n    ],\n    fallback:'style-loader'\n  })\n}\n使用webpack命令，可知less文件内容在dist中的main.css。\n\n## sass文件的打包和分离\n（1）安装sass，sass-loader\n\n```sh\ncnpm install --save-dev node-sass\ncnpm install --save-dev sass-loader\n```\n\n（2）编写sass文件，并且在entry.js中引入。\n\n```scss\n$fontStack: Helvetica, sans-serif;\n$primaryColor: #333;\nbody\" {\"\n  font-family: $fontStack;\n  color: $primaryColor;\n\"}\"\n```\n\nmain.js头部：\n\n```js\nrequire(\"./css/main.sass\")\n```\n\n（3）编写loader配置\n\n```js\n{\n  test:/\\.sass$/,\n  use:[\n    {loader:'style-loader'},\n    {loader:'css-loader'},\n    {loader:'sass-loader'}\n  ]\n}\n```\n\n使用webpack，打包在dist中bundle.js。\n\n（3）sass文件分离\n\n改写loader配置：\n\n```js\n{\n  est:/\\.sass$/,\n  use:extractText.extract({\n      use:[\n        {loader:'css-loader'},\n        {loader:'sass-loader'}\n      ],\n      fallback:'style-loader'\n  })\n}\n```\n\n可以得知less打包与分离与sass基本上都是一样步骤。\n\n## babel支持\n（1）安装这些依赖包：\n\n```sh\ncnpm i -D babel-core babel-loader babel-preset-env\n```\n\n（2）webpack.config.js配置\n\n```js\n{\n  test:/\\.js$/,\n  use:{loader:'babel-loader'},\n  exclude:/node_modules/\n}\n```\n\n（3）在根目录下新建一个.babelrc文件，编写：\n\n```js\n{\n    \"presets\":[\"env\"]\n}\n```\n\n配置好了之后在entry.js中使用ES6编写js代码，使用webpack命令将ES6转化为ES5。","source":"_posts/wb3-6.md","raw":"---\ntitle: Less，Sass文件的打包和分离，babel支持\ncomments: true\ndescription: Less，Sass文件的打包和分离，babel支持\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件, Less，Sass文件的打包和分离，babel支持\ndate: 2017-08-5 20:19:29\n---\n\n## less文件的打包和分离\n\n（1）安装less，less-loader\n\n```sh\ncnpm install --save-dev less\ncnpm install --save-dev less-loader\n```\n\n（2）编写less文件，并且在entry.js中引入。\n\n```scss\n@base : #f60;\n#img{\n     color:@base;\n}\n```\n\nmain.js头部：\n\n```js\nrequire(\"./css/main.less\")\n```\n\n使用webpack命令，这是less文件已经打包好了，但是在entry.js中，所以我们要把less文件分离：\n\n（3）less文件分离\n\n```js\n{\n  test:/\\.less$/,\n  use:extractText.extract({\n    use:[\n        {loader:'css-loader'},\n        {loader:'less-loader'}\n    ],\n    fallback:'style-loader'\n  })\n}\n使用webpack命令，可知less文件内容在dist中的main.css。\n\n## sass文件的打包和分离\n（1）安装sass，sass-loader\n\n```sh\ncnpm install --save-dev node-sass\ncnpm install --save-dev sass-loader\n```\n\n（2）编写sass文件，并且在entry.js中引入。\n\n```scss\n$fontStack: Helvetica, sans-serif;\n$primaryColor: #333;\nbody\" {\"\n  font-family: $fontStack;\n  color: $primaryColor;\n\"}\"\n```\n\nmain.js头部：\n\n```js\nrequire(\"./css/main.sass\")\n```\n\n（3）编写loader配置\n\n```js\n{\n  test:/\\.sass$/,\n  use:[\n    {loader:'style-loader'},\n    {loader:'css-loader'},\n    {loader:'sass-loader'}\n  ]\n}\n```\n\n使用webpack，打包在dist中bundle.js。\n\n（3）sass文件分离\n\n改写loader配置：\n\n```js\n{\n  est:/\\.sass$/,\n  use:extractText.extract({\n      use:[\n        {loader:'css-loader'},\n        {loader:'sass-loader'}\n      ],\n      fallback:'style-loader'\n  })\n}\n```\n\n可以得知less打包与分离与sass基本上都是一样步骤。\n\n## babel支持\n（1）安装这些依赖包：\n\n```sh\ncnpm i -D babel-core babel-loader babel-preset-env\n```\n\n（2）webpack.config.js配置\n\n```js\n{\n  test:/\\.js$/,\n  use:{loader:'babel-loader'},\n  exclude:/node_modules/\n}\n```\n\n（3）在根目录下新建一个.babelrc文件，编写：\n\n```js\n{\n    \"presets\":[\"env\"]\n}\n```\n\n配置好了之后在entry.js中使用ES6编写js代码，使用webpack命令将ES6转化为ES5。","slug":"wb3-6","published":1,"updated":"2020-12-02T06:49:34.153Z","layout":"post","photos":[],"link":"","_id":"cki71wamg0067tl9kctyrhvb3","content":"<h2 id=\"less文件的打包和分离\"><a href=\"#less文件的打包和分离\" class=\"headerlink\" title=\"less文件的打包和分离\"></a>less文件的打包和分离</h2><p>（1）安装less，less-loader</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev less</span><br><span class=\"line\">cnpm install --save-dev less-loader</span><br></pre></td></tr></table></figure>\n\n<p>（2）编写less文件，并且在entry.js中引入。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@base</span> : <span class=\"number\">#f60</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#img</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">color</span>:@base;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.js头部：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.less\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack命令，这是less文件已经打包好了，但是在entry.js中，所以我们要把less文件分离：</p>\n<p>（3）less文件分离</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">    use:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'less-loader'</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    fallback:<span class=\"string\">'style-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用webpack命令，可知less文件内容在dist中的main.css。</span><br><span class=\"line\"></span><br><span class=\"line\">## sass文件的打包和分离</span><br><span class=\"line\">（<span class=\"number\">1</span>）安装sass，sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`sh</span></span><br><span class=\"line\"><span class=\"string\">cnpm install --save-dev node-sass</span></span><br><span class=\"line\"><span class=\"string\">cnpm install --save-dev sass-loader</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）编写sass文件，并且在entry.js中引入。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontStack</span>: Helvetica, sans-serif;</span><br><span class=\"line\"><span class=\"variable\">$primaryColor</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>\" &#123;\"</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$fontStack</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$primaryColor</span>;</span><br><span class=\"line\">\"&#125;\"</span><br></pre></td></tr></table></figure>\n\n<p>main.js头部：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.sass\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）编写loader配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">  use:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'style-loader'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'sass-loader'</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack，打包在dist中bundle.js。</p>\n<p>（3）sass文件分离</p>\n<p>改写loader配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  est:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">      use:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'sass-loader'</span>&#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      fallback:<span class=\"string\">'style-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以得知less打包与分离与sass基本上都是一样步骤。</p>\n<h2 id=\"babel支持\"><a href=\"#babel支持\" class=\"headerlink\" title=\"babel支持\"></a>babel支持</h2><p>（1）安装这些依赖包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D babel-core babel-loader babel-preset-env</span><br></pre></td></tr></table></figure>\n\n<p>（2）webpack.config.js配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  use:&#123;<span class=\"attr\">loader</span>:<span class=\"string\">'babel-loader'</span>&#125;,</span><br><span class=\"line\">  exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）在根目录下新建一个.babelrc文件，编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置好了之后在entry.js中使用ES6编写js代码，使用webpack命令将ES6转化为ES5。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<h2 id=\"less文件的打包和分离\"><a href=\"#less文件的打包和分离\" class=\"headerlink\" title=\"less文件的打包和分离\"></a>less文件的打包和分离</h2><p>（1）安装less，less-loader</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev less</span><br><span class=\"line\">cnpm install --save-dev less-loader</span><br></pre></td></tr></table></figure>\n\n<p>（2）编写less文件，并且在entry.js中引入。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@base</span> : <span class=\"number\">#f60</span>;</span><br><span class=\"line\"><span class=\"selector-id\">#img</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">color</span>:@base;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.js头部：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.less\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack命令，这是less文件已经打包好了，但是在entry.js中，所以我们要把less文件分离：</p>\n<p>（3）less文件分离</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">    use:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'less-loader'</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    fallback:<span class=\"string\">'style-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用webpack命令，可知less文件内容在dist中的main.css。</span><br><span class=\"line\"></span><br><span class=\"line\">## sass文件的打包和分离</span><br><span class=\"line\">（<span class=\"number\">1</span>）安装sass，sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`sh</span></span><br><span class=\"line\"><span class=\"string\">cnpm install --save-dev node-sass</span></span><br><span class=\"line\"><span class=\"string\">cnpm install --save-dev sass-loader</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）编写sass文件，并且在entry.js中引入。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontStack</span>: Helvetica, sans-serif;</span><br><span class=\"line\"><span class=\"variable\">$primaryColor</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>\" &#123;\"</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$fontStack</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$primaryColor</span>;</span><br><span class=\"line\">\"&#125;\"</span><br></pre></td></tr></table></figure>\n\n<p>main.js头部：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./css/main.sass\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）编写loader配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">  use:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'style-loader'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'sass-loader'</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用webpack，打包在dist中bundle.js。</p>\n<p>（3）sass文件分离</p>\n<p>改写loader配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  est:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">  use:extractText.extract(&#123;</span><br><span class=\"line\">      use:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'css-loader'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">loader</span>:<span class=\"string\">'sass-loader'</span>&#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      fallback:<span class=\"string\">'style-loader'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以得知less打包与分离与sass基本上都是一样步骤。</p>\n<h2 id=\"babel支持\"><a href=\"#babel支持\" class=\"headerlink\" title=\"babel支持\"></a>babel支持</h2><p>（1）安装这些依赖包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D babel-core babel-loader babel-preset-env</span><br></pre></td></tr></table></figure>\n\n<p>（2）webpack.config.js配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  use:&#123;<span class=\"attr\">loader</span>:<span class=\"string\">'babel-loader'</span>&#125;,</span><br><span class=\"line\">  exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）在根目录下新建一个.babelrc文件，编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置好了之后在entry.js中使用ES6编写js代码，使用webpack命令将ES6转化为ES5。</p>\n"},{"title":"css3前缀及消除多余的css","comments":1,"description":"css3前缀及消除多余的css","keywords":"webpack, webpack3 ,webpack3配置文件, css3前缀及消除多余的css","date":"2017-08-07T14:00:29.000Z","_content":"\n这里给出postcss-loader的github地址：https://github.com/postcss/postcss-loader\n\n## PostCSS\n\nPostCSS是一个CSS的处理平台，它可以实现更多的功能，过其中的一个加前缀的功能。\n\n（1）安装postcss-loader与autoprefixer\n\n```sh\ncnpm install --save-dev postcss-loader autoprefixer\n```\n\n（2）在与webpack.config.js同级下新建一个postcss.config.js文件，并配置此文件。\n\n```js\nmodule.exports = {\n    plugins:[\n        require('autoprefixer')\n    ]\n}\n```\n\n（3）在webpack.config.js中修改配置：\n\n```js\n{\n    test: /\\.css$/,\n    use: extractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            { loader: 'css-loader', options: { importLoaders: 1 } },\n            'postcss-loader'\n        ]\n    })\n}\n```\n\n## 消除未使用的css\n使用PurifyCSS可以大大减少CSS冗余。\n\n（1）安装PurifyCSS-webpack\n\n```sh\ncnpm install -D purifycss-webpack purify-css\n```\n\n-D代表的是–save-dev ,只是一个简写。\n\n（2）引入glob与purifycss-webpack\n\n我们需要同步检查html模板，所以我们需要引入node的glob对象使用。在webpack.config.js文件头部引入glob。\n\n```js\nconst glob = require(\"glob\")\nconst purifyCSS = require(\"purifycss-webpack\")\n```\n\n（3）配置plugins\n\n```js\nnew purifyCSS({\n    paths:glob.sync(path.join(__dirname,'src/*.html'))\n })\n ```\n \n在main.css内些多余的css代码，webpack后查看dist内的main.css可以看到多余的代码没有了。\n\n","source":"_posts/wb3-7.md","raw":"---\ntitle: css3前缀及消除多余的css\ncomments: true\ndescription: css3前缀及消除多余的css\ntags: \"webpack\"\ncategories: \"webpack\"\nkeywords: webpack, webpack3 ,webpack3配置文件, css3前缀及消除多余的css\ndate: 2017-08-7 22:00:29\n---\n\n这里给出postcss-loader的github地址：https://github.com/postcss/postcss-loader\n\n## PostCSS\n\nPostCSS是一个CSS的处理平台，它可以实现更多的功能，过其中的一个加前缀的功能。\n\n（1）安装postcss-loader与autoprefixer\n\n```sh\ncnpm install --save-dev postcss-loader autoprefixer\n```\n\n（2）在与webpack.config.js同级下新建一个postcss.config.js文件，并配置此文件。\n\n```js\nmodule.exports = {\n    plugins:[\n        require('autoprefixer')\n    ]\n}\n```\n\n（3）在webpack.config.js中修改配置：\n\n```js\n{\n    test: /\\.css$/,\n    use: extractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            { loader: 'css-loader', options: { importLoaders: 1 } },\n            'postcss-loader'\n        ]\n    })\n}\n```\n\n## 消除未使用的css\n使用PurifyCSS可以大大减少CSS冗余。\n\n（1）安装PurifyCSS-webpack\n\n```sh\ncnpm install -D purifycss-webpack purify-css\n```\n\n-D代表的是–save-dev ,只是一个简写。\n\n（2）引入glob与purifycss-webpack\n\n我们需要同步检查html模板，所以我们需要引入node的glob对象使用。在webpack.config.js文件头部引入glob。\n\n```js\nconst glob = require(\"glob\")\nconst purifyCSS = require(\"purifycss-webpack\")\n```\n\n（3）配置plugins\n\n```js\nnew purifyCSS({\n    paths:glob.sync(path.join(__dirname,'src/*.html'))\n })\n ```\n \n在main.css内些多余的css代码，webpack后查看dist内的main.css可以看到多余的代码没有了。\n\n","slug":"wb3-7","published":1,"updated":"2020-12-02T06:49:34.153Z","layout":"post","photos":[],"link":"","_id":"cki71wamh006ctl9kbwzdaafd","content":"<p>这里给出postcss-loader的github地址：<a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://github.com/postcss/postcss-loader</a></p>\n<h2 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h2><p>PostCSS是一个CSS的处理平台，它可以实现更多的功能，过其中的一个加前缀的功能。</p>\n<p>（1）安装postcss-loader与autoprefixer</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n\n<p>（2）在与webpack.config.js同级下新建一个postcss.config.js文件，并配置此文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）在webpack.config.js中修改配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: extractTextPlugin.extract(&#123;</span><br><span class=\"line\">        fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">importLoaders</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">            <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除未使用的css\"><a href=\"#消除未使用的css\" class=\"headerlink\" title=\"消除未使用的css\"></a>消除未使用的css</h2><p>使用PurifyCSS可以大大减少CSS冗余。</p>\n<p>（1）安装PurifyCSS-webpack</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -D purifycss-webpack purify-css</span><br></pre></td></tr></table></figure>\n\n<p>-D代表的是–save-dev ,只是一个简写。</p>\n<p>（2）引入glob与purifycss-webpack</p>\n<p>我们需要同步检查html模板，所以我们需要引入node的glob对象使用。在webpack.config.js文件头部引入glob。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">\"glob\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> purifyCSS = <span class=\"built_in\">require</span>(<span class=\"string\">\"purifycss-webpack\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）配置plugins</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> purifyCSS(&#123;</span><br><span class=\"line\">    paths:glob.sync(path.join(__dirname,<span class=\"string\">'src/*.html'</span>))</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>在main.css内些多余的css代码，webpack后查看dist内的main.css可以看到多余的代码没有了。</p>\n","site":{"data":{"butterfly":{"menu":{"首页":"/||fa fa-home","归档":"/archives/||fa fa-archive","标签":"/tags/||fa fa-tags","分类":"/categories/||fa fa-folder-open","链接":"/link/||fa fa-link"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"social":{"fa fa-github":"https://github.com/hbbaly"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/main.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"},"js":{"jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","js-cookies":"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"}},"avatar":"https://avatars1.githubusercontent.com/u/34227573?s=460&v=4","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","post_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/post.png","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"gitalk":{"enable":true,"client_id":"11ced11d44bc7f521532","client_secret":"802696976891825a1a72d80c8c0c68ddc89406f1","repo":"hbbaly.github.io","owner":"hbbaly","admin":"hbbaly"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link"},"since":2017,"footer_custom_text":"Hi, welcome to my <a href=\"https://hbbaly.github.io/\">blog</a>!","footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情链接","info_headline":"我的Blog资料","name":"Blog 名字： hbbaly","address":"Blog 地址： www.hbbaly.com","avatar":"Blog 头像： https://avatars0.githubusercontent.com/u/34227573?s=400&v=4","info":"Blog 简介： 今日事,今日畢","comment":"如果需要交换链接， 请留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.jpg","text":"微信"}},{"itemlist":{"img":"/img/alipay.jpg","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6},"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"canvas_ribbon_piao":{"enable":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"script":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/js/canvas-nest.js"},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"avatar_effect":false,"display_mode":"day","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB,\"Microsoft JhengHei\", \"MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft JhengHei\",\"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft JhengHei\", \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"sub1":"开心就好","sub2":"Never put off till tomorrow what you can do today"},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"感谢访问本站, 喜欢请收藏"},"busuanzi":{"site_uv":false,"site_pv":false,"page_pv":false},"runtimeshow":{"enable":true,"start_date":"4/1/2016 00:00:00"},"translate":{"enable":true,"default":"简","defaultEncoding":1,"translateDelay":0,"cookieDomain":"https://hbbaly.github.io/","msgToTraditionalChinese":"简","msgToSimplifiedChinese":"繁"},"nightshift":{"enable":true},"readmode":{"enable":true},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"simple","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true,"script":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true},"link":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}},"excerpt":"","more":"<p>这里给出postcss-loader的github地址：<a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://github.com/postcss/postcss-loader</a></p>\n<h2 id=\"PostCSS\"><a href=\"#PostCSS\" class=\"headerlink\" title=\"PostCSS\"></a>PostCSS</h2><p>PostCSS是一个CSS的处理平台，它可以实现更多的功能，过其中的一个加前缀的功能。</p>\n<p>（1）安装postcss-loader与autoprefixer</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n\n<p>（2）在与webpack.config.js同级下新建一个postcss.config.js文件，并配置此文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）在webpack.config.js中修改配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: extractTextPlugin.extract(&#123;</span><br><span class=\"line\">        fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader'</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">importLoaders</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">            <span class=\"string\">'postcss-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除未使用的css\"><a href=\"#消除未使用的css\" class=\"headerlink\" title=\"消除未使用的css\"></a>消除未使用的css</h2><p>使用PurifyCSS可以大大减少CSS冗余。</p>\n<p>（1）安装PurifyCSS-webpack</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -D purifycss-webpack purify-css</span><br></pre></td></tr></table></figure>\n\n<p>-D代表的是–save-dev ,只是一个简写。</p>\n<p>（2）引入glob与purifycss-webpack</p>\n<p>我们需要同步检查html模板，所以我们需要引入node的glob对象使用。在webpack.config.js文件头部引入glob。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">\"glob\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> purifyCSS = <span class=\"built_in\">require</span>(<span class=\"string\">\"purifycss-webpack\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>（3）配置plugins</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> purifyCSS(&#123;</span><br><span class=\"line\">    paths:glob.sync(path.join(__dirname,<span class=\"string\">'src/*.html'</span>))</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>在main.css内些多余的css代码，webpack后查看dist内的main.css可以看到多余的代码没有了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cki71wajo0000tl9kh394m3la","category_id":"cki71wajw0004tl9kyeqkcaxg","_id":"cki71wak8000gtl9kpjgpilgh"},{"post_id":"cki71waju0002tl9kdxpcrq7p","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakb000ntl9kqc7gkak0"},{"post_id":"cki71wak7000ftl9klyoa45xp","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakd000stl9kldh5ial3"},{"post_id":"cki71wak8000jtl9k5soyziwi","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakf000vtl9k9dcqmhbq"},{"post_id":"cki71wajy0006tl9kjnajlr4n","category_id":"cki71wak8000htl9kpcsc0h0v","_id":"cki71wakh0010tl9kmcja2kn2"},{"post_id":"cki71waka000ltl9kakiidxb0","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakj0013tl9kcvzms6ct"},{"post_id":"cki71wakc000qtl9kbde291yx","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakl0018tl9k7tqago2a"},{"post_id":"cki71wak00008tl9k1nx44y4i","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakm001btl9ku9xn2fxm"},{"post_id":"cki71wake000ttl9kybc4biiu","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakp001etl9k2o3drtmp"},{"post_id":"cki71wakg000ytl9kxgot4g0u","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakq001htl9kvsqzbnqi"},{"post_id":"cki71wak3000atl9kx6mb1qis","category_id":"cki71wak8000htl9kpcsc0h0v","_id":"cki71wakr001ktl9kai4kg3iy"},{"post_id":"cki71waki0011tl9k9krl2r11","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71waks001ntl9kma12nsz7"},{"post_id":"cki71wakk0016tl9kd6igauzs","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71waku001stl9k7yz6o84b"},{"post_id":"cki71wak5000etl9kzmeolc7r","category_id":"cki71wak8000htl9kpcsc0h0v","_id":"cki71wakv001vtl9ka68vc359"},{"post_id":"cki71wakl0019tl9kzpiks46u","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakw0020tl9keui4ja5u"},{"post_id":"cki71wakn001ctl9k6nbradtz","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71wakx0023tl9krmf4aekr"},{"post_id":"cki71wakp001ftl9kc7ypb00l","category_id":"cki71wak4000btl9k7zjsz2ab","_id":"cki71waky0028tl9kw6zz5665"},{"post_id":"cki71wakq001itl9kh7fngmw8","category_id":"cki71waks001otl9kq3tvcp45","_id":"cki71wakz002btl9kmkm446au"},{"post_id":"cki71wakt001qtl9kj4i5e0jn","category_id":"cki71wakw001xtl9kqc15ew14","_id":"cki71wal0002dtl9kqfyxi2rg"},{"post_id":"cki71waku001ttl9ku56oqhl3","category_id":"cki71waky0026tl9kfsufu10z","_id":"cki71wal2002jtl9k5jcdmtal"},{"post_id":"cki71wal1002gtl9k1ytftmeh","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wal4002ptl9kfytrn8zb"},{"post_id":"cki71wakv001wtl9kee9zp5j2","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wal6002stl9kwnkwdlq9"},{"post_id":"cki71wal1002itl9khn7wnxc9","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wal7002wtl9kax5avpsn"},{"post_id":"cki71wal3002mtl9kace9syfd","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wal80030tl9kxyz10iz6"},{"post_id":"cki71wakw0021tl9ktc4k7daa","category_id":"cki71waky0026tl9kfsufu10z","_id":"cki71wal90033tl9klt2f5orx"},{"post_id":"cki71wal5002rtl9kvyldes20","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walb0037tl9k8tqzbvq3"},{"post_id":"cki71wakx0024tl9kv8mhbk55","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walc003btl9kh6qai4p1"},{"post_id":"cki71wal6002vtl9k7s94cr1e","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wald003ftl9kxx1yk1w1"},{"post_id":"cki71wal8002ztl9kxj6xtyq4","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walf003jtl9k934j8b9s"},{"post_id":"cki71wakz0029tl9kgiu12ebp","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walh003mtl9ksopfy123"},{"post_id":"cki71wal90032tl9kg2jzexr1","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wali003qtl9k9laj5oah"},{"post_id":"cki71wala0036tl9kh179bayd","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walj003ttl9kg88lnxiv"},{"post_id":"cki71wakz002ctl9k8npmjzqm","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wall003xtl9kz1hi6fso"},{"post_id":"cki71walc003atl9k54yacc1f","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walm0040tl9kd7mlb064"},{"post_id":"cki71wald003etl9kxcn13prq","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71waln0044tl9kjlskfkg2"},{"post_id":"cki71wale003itl9kdo0owz4f","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walp0047tl9kfc7xwz4t"},{"post_id":"cki71wal4002otl9kz5cbzk1x","category_id":"cki71wald003dtl9kmqrqpuhr","_id":"cki71walq004btl9k5eibjt13"},{"post_id":"cki71walg003ltl9k3f1kfugb","category_id":"cki71wak8000htl9kpcsc0h0v","_id":"cki71walr004etl9k7g38cv2v"},{"post_id":"cki71wali003ptl9klyxv1xb6","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wals004itl9kpockebc1"},{"post_id":"cki71walj003stl9kgpx4npmb","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walu004ltl9kbxc3ukxb"},{"post_id":"cki71walk003wtl9ka5miqrgp","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walv004qtl9kcvrq2euz"},{"post_id":"cki71wall003ztl9kl5l0bl8c","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walw004ttl9ks2vmmla0"},{"post_id":"cki71walm0043tl9ka2wc8h7r","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walx004xtl9k815wmfs8"},{"post_id":"cki71walo0046tl9ko1vylycb","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71waly0051tl9k6f1b8tgx"},{"post_id":"cki71walq004atl9kmhj5er99","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71walz0054tl9k9u22ksul"},{"post_id":"cki71walr004dtl9kj5q70k6s","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wam10059tl9kel1ejxv3"},{"post_id":"cki71walt004ktl9krusyedo0","category_id":"cki71wal0002etl9k8yq481jw","_id":"cki71wam2005ctl9k2se1fgti"},{"post_id":"cki71wals004htl9k8l2eq4x9","category_id":"cki71walu004ntl9khf8vzkjl","_id":"cki71wam4005htl9kg5r2gntq"},{"post_id":"cki71walu004ptl9k9ry9wemu","category_id":"cki71walx004wtl9khqmqzxot","_id":"cki71wam5005ktl9k2764mkay"},{"post_id":"cki71wam10058tl9knp1guh9d","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wam7005ptl9kf5lag0oj"},{"post_id":"cki71walv004stl9ksr3ikfwd","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wam9005stl9kucbqgboi"},{"post_id":"cki71wam2005btl9k1i2nilcm","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wamc005xtl9kdy9hf9p1"},{"post_id":"cki71wam3005gtl9kfgp3ioht","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wamd0060tl9k8jms45hp"},{"post_id":"cki71walw004vtl9kjveekg1u","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wamf0065tl9ku2xq3tm9"},{"post_id":"cki71wam5005jtl9k9sl9aj7s","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wamg0068tl9ko1w7okq5"},{"post_id":"cki71waly0050tl9k7kmbtz80","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wami006dtl9kt5em5jex"},{"post_id":"cki71waly0053tl9kks5ki3fd","category_id":"cki71walz0056tl9kpjeara3i","_id":"cki71wamk006ftl9k8g38wlxd"},{"post_id":"cki71wame0064tl9k5stcwc63","category_id":"cki71wame0062tl9krm485efm","_id":"cki71waml006jtl9kkny20np6"},{"post_id":"cki71wam6005otl9ke0tfxfek","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamm006ltl9k425qtue9"},{"post_id":"cki71wamg0067tl9kctyrhvb3","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamn006otl9kexg44q2e"},{"post_id":"cki71wamh006ctl9kbwzdaafd","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamn006qtl9k89os4jl2"},{"post_id":"cki71wam8005rtl9kv3f14s8r","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamo006rtl9kx38ws2oc"},{"post_id":"cki71wamb005wtl9ku7yzmnyt","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamp006utl9ku1pcy7oj"},{"post_id":"cki71wamd005ztl9koh9is1kz","category_id":"cki71wame0062tl9krm485efm","_id":"cki71wamp006vtl9k6h8u7hdi"}],"PostTag":[{"post_id":"cki71wajo0000tl9kh394m3la","tag_id":"cki71wajy0005tl9kvw0f533m","_id":"cki71wak5000dtl9kkvaexv7i"},{"post_id":"cki71waju0002tl9kdxpcrq7p","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wak9000ktl9kdop8xrvw"},{"post_id":"cki71wak7000ftl9klyoa45xp","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakb000mtl9k8j0kmkom"},{"post_id":"cki71wak8000jtl9k5soyziwi","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakd000rtl9k05smvw5x"},{"post_id":"cki71wajy0006tl9kjnajlr4n","tag_id":"cki71wak8000itl9kxpzfjw1v","_id":"cki71wake000utl9krz55uzxp"},{"post_id":"cki71waka000ltl9kakiidxb0","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakg000ztl9kqk8a0dro"},{"post_id":"cki71wakc000qtl9kbde291yx","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakj0012tl9kll5jrjmo"},{"post_id":"cki71wak00008tl9k1nx44y4i","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakl0017tl9k1egah8oa"},{"post_id":"cki71wake000ttl9kybc4biiu","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakm001atl9k53vyukfj"},{"post_id":"cki71wakg000ytl9kxgot4g0u","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakp001dtl9k2zwuf6zd"},{"post_id":"cki71wak3000atl9kx6mb1qis","tag_id":"cki71wak8000itl9kxpzfjw1v","_id":"cki71wakq001gtl9k7ztgs5la"},{"post_id":"cki71waki0011tl9k9krl2r11","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakr001jtl9k6rl7kdv8"},{"post_id":"cki71wakk0016tl9kd6igauzs","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71waks001mtl9kz5sizd5w"},{"post_id":"cki71wak5000etl9kzmeolc7r","tag_id":"cki71wak8000itl9kxpzfjw1v","_id":"cki71wakt001rtl9kjsyehsop"},{"post_id":"cki71wakl0019tl9kzpiks46u","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71waku001utl9k35hc7grt"},{"post_id":"cki71wakn001ctl9k6nbradtz","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakw001ztl9kgobl6e67"},{"post_id":"cki71wakp001ftl9kc7ypb00l","tag_id":"cki71wak4000ctl9kf160gi89","_id":"cki71wakx0022tl9kt7ojuvut"},{"post_id":"cki71wakq001itl9kh7fngmw8","tag_id":"cki71wakt001ptl9k33uus64y","_id":"cki71waky0025tl9kg8aw2e0a"},{"post_id":"cki71wakr001ltl9k3v4ynkxg","tag_id":"cki71wakw001ytl9kt7hncsfv","_id":"cki71wakz002atl9k043qadng"},{"post_id":"cki71wakt001qtl9kj4i5e0jn","tag_id":"cki71waky0027tl9kr39ktnfx","_id":"cki71wal1002htl9ksy6b45a6"},{"post_id":"cki71waku001ttl9ku56oqhl3","tag_id":"cki71wal0002ftl9khfiwvkt7","_id":"cki71wal4002ntl9k1vmvjup1"},{"post_id":"cki71wal4002otl9kz5cbzk1x","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71wal6002utl9kya6ukjlj"},{"post_id":"cki71wakv001wtl9kee9zp5j2","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71wal7002xtl9k84i4oj0j"},{"post_id":"cki71wakw0021tl9ktc4k7daa","tag_id":"cki71wal6002ttl9kvx0iiymz","_id":"cki71wal90034tl9kzr9no83i"},{"post_id":"cki71wal8002ztl9kxj6xtyq4","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walb0038tl9k5j9tp0s3"},{"post_id":"cki71wal90032tl9kg2jzexr1","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walc003ctl9kft81ysai"},{"post_id":"cki71wakx0024tl9kv8mhbk55","tag_id":"cki71wal80031tl9kvqx7cmot","_id":"cki71wald003gtl9kehk49q1s"},{"post_id":"cki71wala0036tl9kh179bayd","tag_id":"cki71wal80031tl9kvqx7cmot","_id":"cki71walf003ktl9kymj6k8cl"},{"post_id":"cki71walc003atl9k54yacc1f","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walh003ntl9k9163n1xv"},{"post_id":"cki71wakz0029tl9kgiu12ebp","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walj003rtl9kho0a2upu"},{"post_id":"cki71wald003etl9kxcn13prq","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walj003utl9ktbe2pwvy"},{"post_id":"cki71wale003itl9kdo0owz4f","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71wall003ytl9kyr2mzo4t"},{"post_id":"cki71wakz002ctl9k8npmjzqm","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walm0041tl9kx4wd2wiu"},{"post_id":"cki71walg003ltl9k3f1kfugb","tag_id":"cki71wak8000itl9kxpzfjw1v","_id":"cki71waln0045tl9klgelslo1"},{"post_id":"cki71wali003ptl9klyxv1xb6","tag_id":"cki71wal80031tl9kvqx7cmot","_id":"cki71walp0048tl9kymovxoh9"},{"post_id":"cki71wal1002gtl9k1ytftmeh","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walq004ctl9kj94lwu5g"},{"post_id":"cki71walj003stl9kgpx4npmb","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walr004ftl9kn7cjx9ve"},{"post_id":"cki71walk003wtl9ka5miqrgp","tag_id":"cki71wal80031tl9kvqx7cmot","_id":"cki71walt004jtl9kgpi8ui6u"},{"post_id":"cki71wal1002itl9khn7wnxc9","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walu004mtl9kvzc0695z"},{"post_id":"cki71wall003ztl9kl5l0bl8c","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walv004rtl9knowitnjz"},{"post_id":"cki71wal3002mtl9kace9syfd","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walw004utl9kkehbom76"},{"post_id":"cki71walo0046tl9ko1vylycb","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71walx004ztl9ktmwb83t3"},{"post_id":"cki71walq004atl9kmhj5er99","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71waly0052tl9kldwsavtx"},{"post_id":"cki71wal5002rtl9kvyldes20","tag_id":"cki71walp0049tl9kk2f4w0jp","_id":"cki71walz0055tl9km613m29j"},{"post_id":"cki71walr004dtl9kj5q70k6s","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71wam1005atl9kbgll0ojm"},{"post_id":"cki71wal6002vtl9k7s94cr1e","tag_id":"cki71walp0049tl9kk2f4w0jp","_id":"cki71wam2005dtl9k1nod0low"},{"post_id":"cki71walt004ktl9krusyedo0","tag_id":"cki71wal2002ltl9k4jc2d071","_id":"cki71wam4005itl9k3ahvse6m"},{"post_id":"cki71walm0043tl9ka2wc8h7r","tag_id":"cki71walu004otl9k6r7r4ffd","_id":"cki71wam5005ltl9kff7xa5iu"},{"post_id":"cki71wals004htl9k8l2eq4x9","tag_id":"cki71walx004ytl9kzhzyxh7a","_id":"cki71wam7005qtl9k94v7xhp3"},{"post_id":"cki71walu004ptl9k9ry9wemu","tag_id":"cki71walz0057tl9k3wyyh36m","_id":"cki71wam9005ttl9ks54fsw7s"},{"post_id":"cki71wam3005gtl9kfgp3ioht","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamc005ytl9kiir2otm4"},{"post_id":"cki71walv004stl9ksr3ikfwd","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamd0061tl9kl02hmzg4"},{"post_id":"cki71wam5005jtl9k9sl9aj7s","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamf0066tl9kyut84pje"},{"post_id":"cki71walw004vtl9kjveekg1u","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamg0069tl9kuo1alens"},{"post_id":"cki71waly0050tl9k7kmbtz80","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamj006etl9k89o8elqi"},{"post_id":"cki71waly0053tl9kks5ki3fd","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamk006gtl9k7441r244"},{"post_id":"cki71wam10058tl9knp1guh9d","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamm006ktl9k90aljis0"},{"post_id":"cki71wam2005btl9k1i2nilcm","tag_id":"cki71wam3005ftl9ktfqsni92","_id":"cki71wamn006ptl9k9ldd7sun"},{"post_id":"cki71wam6005otl9ke0tfxfek","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wamp006ttl9ky209azt5"},{"post_id":"cki71wam8005rtl9kv3f14s8r","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wamp006xtl9km0mgn1x5"},{"post_id":"cki71wamb005wtl9ku7yzmnyt","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wamr006ztl9kbhzcj5p6"},{"post_id":"cki71wamd005ztl9koh9is1kz","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wamr0071tl9kqlvmrxim"},{"post_id":"cki71wame0064tl9k5stcwc63","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wams0073tl9kcd12wqpo"},{"post_id":"cki71wamg0067tl9kctyrhvb3","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wams0075tl9k1whbsntb"},{"post_id":"cki71wamh006ctl9kbwzdaafd","tag_id":"cki71wamm006ntl9kjgo3gc1j","_id":"cki71wams0076tl9kp56aumt5"}],"Tag":[{"name":"node","_id":"cki71wajy0005tl9kvw0f533m"},{"name":"ES6","_id":"cki71wak4000ctl9kf160gi89"},{"name":"css","_id":"cki71wak8000itl9kxpzfjw1v"},{"name":"Git","_id":"cki71wakt001ptl9k33uus64y"},{"name":"hello world","_id":"cki71wakw001ytl9kt7hncsfv"},{"name":"gulp","_id":"cki71waky0027tl9kr39ktnfx"},{"name":"html","_id":"cki71wal0002ftl9khfiwvkt7"},{"name":"js","_id":"cki71wal2002ltl9k4jc2d071"},{"name":"Html","_id":"cki71wal6002ttl9kvx0iiymz"},{"name":"canvas","_id":"cki71wal80031tl9kvqx7cmot"},{"name":"es6","_id":"cki71walp0049tl9kk2f4w0jp"},{"name":"jquery","_id":"cki71walu004otl9k6r7r4ffd"},{"name":"md","_id":"cki71walx004ytl9kzhzyxh7a"},{"name":"REACT","_id":"cki71walz0057tl9k3wyyh36m"},{"name":"Vue","_id":"cki71wam3005ftl9ktfqsni92"},{"name":"webpack","_id":"cki71wamm006ntl9kjgo3gc1j"}]}}